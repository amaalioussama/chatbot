"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/openai";
exports.ids = ["vendor-chunks/openai"];
exports.modules = {

/***/ "(ssr)/./node_modules/openai/_shims/MultipartBody.mjs":
/*!******************************************************!*\
  !*** ./node_modules/openai/_shims/MultipartBody.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MultipartBody: () => (/* binding */ MultipartBody)\n/* harmony export */ });\n/**\n * Disclaimer: modules in _shims aren't intended to be imported by SDK users.\n */ class MultipartBody {\n    constructor(body){\n        this.body = body;\n    }\n    get [Symbol.toStringTag]() {\n        return \"MultipartBody\";\n    }\n} //# sourceMappingURL=MultipartBody.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbmFpL19zaGltcy9NdWx0aXBhcnRCb2R5Lm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7O0NBRUMsR0FDTSxNQUFNQTtJQUNUQyxZQUFZQyxJQUFJLENBQUU7UUFDZCxJQUFJLENBQUNBLElBQUksR0FBR0E7SUFDaEI7SUFDQSxJQUFJLENBQUNDLE9BQU9DLFdBQVcsQ0FBQyxHQUFHO1FBQ3ZCLE9BQU87SUFDWDtBQUNKLEVBQ0EsMENBQTBDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktYXBwLy4vbm9kZV9tb2R1bGVzL29wZW5haS9fc2hpbXMvTXVsdGlwYXJ0Qm9keS5tanM/N2RhZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIERpc2NsYWltZXI6IG1vZHVsZXMgaW4gX3NoaW1zIGFyZW4ndCBpbnRlbmRlZCB0byBiZSBpbXBvcnRlZCBieSBTREsgdXNlcnMuXG4gKi9cbmV4cG9ydCBjbGFzcyBNdWx0aXBhcnRCb2R5IHtcbiAgICBjb25zdHJ1Y3Rvcihib2R5KSB7XG4gICAgICAgIHRoaXMuYm9keSA9IGJvZHk7XG4gICAgfVxuICAgIGdldCBbU3ltYm9sLnRvU3RyaW5nVGFnXSgpIHtcbiAgICAgICAgcmV0dXJuICdNdWx0aXBhcnRCb2R5JztcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1NdWx0aXBhcnRCb2R5Lm1qcy5tYXAiXSwibmFtZXMiOlsiTXVsdGlwYXJ0Qm9keSIsImNvbnN0cnVjdG9yIiwiYm9keSIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openai/_shims/MultipartBody.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/openai/_shims/index.mjs":
/*!**********************************************!*\
  !*** ./node_modules/openai/_shims/index.mjs ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Blob: () => (/* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.Blob),\n/* harmony export */   File: () => (/* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.File),\n/* harmony export */   FormData: () => (/* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.FormData),\n/* harmony export */   Headers: () => (/* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.Headers),\n/* harmony export */   ReadableStream: () => (/* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.ReadableStream),\n/* harmony export */   Request: () => (/* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.Request),\n/* harmony export */   Response: () => (/* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.Response),\n/* harmony export */   auto: () => (/* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.auto),\n/* harmony export */   fetch: () => (/* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.fetch),\n/* harmony export */   fileFromPath: () => (/* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.fileFromPath),\n/* harmony export */   getDefaultAgent: () => (/* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.getDefaultAgent),\n/* harmony export */   getMultipartRequestOptions: () => (/* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.getMultipartRequestOptions),\n/* harmony export */   isFsReadStream: () => (/* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.isFsReadStream),\n/* harmony export */   kind: () => (/* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.kind),\n/* harmony export */   setShims: () => (/* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.setShims)\n/* harmony export */ });\n/* harmony import */ var _registry_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./registry.mjs */ \"(ssr)/./node_modules/openai/_shims/registry.mjs\");\n/* harmony import */ var openai_shims_auto_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai/_shims/auto/runtime */ \"(ssr)/./node_modules/openai/_shims/node-runtime.mjs\");\n/**\n * Disclaimer: modules in _shims aren't intended to be imported by SDK users.\n */ \n\nif (!_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.kind) _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.setShims(openai_shims_auto_runtime__WEBPACK_IMPORTED_MODULE_1__.getRuntime(), {\n    auto: true\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbmFpL19zaGltcy9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7Q0FFQyxHQUN1QztBQUNXO0FBQ25ELElBQUksQ0FBQ0EsK0NBQVUsRUFBRUEsbURBQWMsQ0FBQ0MsaUVBQWUsSUFBSTtJQUFFQSxNQUFNO0FBQUs7QUFDakMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1hcHAvLi9ub2RlX21vZHVsZXMvb3BlbmFpL19zaGltcy9pbmRleC5tanM/N2Y5MCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIERpc2NsYWltZXI6IG1vZHVsZXMgaW4gX3NoaW1zIGFyZW4ndCBpbnRlbmRlZCB0byBiZSBpbXBvcnRlZCBieSBTREsgdXNlcnMuXG4gKi9cbmltcG9ydCAqIGFzIHNoaW1zIGZyb20gJy4vcmVnaXN0cnkubWpzJztcbmltcG9ydCAqIGFzIGF1dG8gZnJvbSAnb3BlbmFpL19zaGltcy9hdXRvL3J1bnRpbWUnO1xuaWYgKCFzaGltcy5raW5kKSBzaGltcy5zZXRTaGltcyhhdXRvLmdldFJ1bnRpbWUoKSwgeyBhdXRvOiB0cnVlIH0pO1xuZXhwb3J0ICogZnJvbSAnLi9yZWdpc3RyeS5tanMnO1xuIl0sIm5hbWVzIjpbInNoaW1zIiwiYXV0byIsImtpbmQiLCJzZXRTaGltcyIsImdldFJ1bnRpbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openai/_shims/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/openai/_shims/node-runtime.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/openai/_shims/node-runtime.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getRuntime: () => (/* binding */ getRuntime)\n/* harmony export */ });\n/* harmony import */ var node_fetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node-fetch */ \"(ssr)/./node_modules/node-fetch/lib/index.mjs\");\n/* harmony import */ var formdata_node__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! formdata-node */ \"(ssr)/./node_modules/formdata-node/lib/esm/index.js\");\n/* harmony import */ var agentkeepalive__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! agentkeepalive */ \"(ssr)/./node_modules/agentkeepalive/index.js\");\n/* harmony import */ var abort_controller__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! abort-controller */ \"(ssr)/./node_modules/abort-controller/dist/abort-controller.js\");\n/* harmony import */ var node_fs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! node:fs */ \"node:fs\");\n/* harmony import */ var form_data_encoder__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! form-data-encoder */ \"(ssr)/./node_modules/form-data-encoder/lib/esm/index.js\");\n/* harmony import */ var node_stream__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! node:stream */ \"node:stream\");\n/* harmony import */ var _MultipartBody_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./MultipartBody.mjs */ \"(ssr)/./node_modules/openai/_shims/MultipartBody.mjs\");\n/* harmony import */ var web_streams_polyfill_dist_ponyfill_es2018_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! web-streams-polyfill/dist/ponyfill.es2018.js */ \"(ssr)/./node_modules/web-streams-polyfill/dist/ponyfill.es2018.js\");\n\n\n\n\n\n\n\n\n\nlet fileFromPathWarned = false;\nasync function fileFromPath(path, ...args) {\n    // this import fails in environments that don't handle export maps correctly, like old versions of Jest\n    const { fileFromPath: _fileFromPath } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/formdata-node\"), __webpack_require__.e(\"vendor-chunks/node-domexception\")]).then(__webpack_require__.bind(__webpack_require__, /*! formdata-node/file-from-path */ \"(ssr)/./node_modules/formdata-node/lib/esm/fileFromPath.js\"));\n    if (!fileFromPathWarned) {\n        console.warn(`fileFromPath is deprecated; use fs.createReadStream(${JSON.stringify(path)}) instead`);\n        fileFromPathWarned = true;\n    }\n    // @ts-ignore\n    return await _fileFromPath(path, ...args);\n}\nconst defaultHttpAgent = new agentkeepalive__WEBPACK_IMPORTED_MODULE_2__({\n    keepAlive: true,\n    timeout: 5 * 60 * 1000\n});\nconst defaultHttpsAgent = new agentkeepalive__WEBPACK_IMPORTED_MODULE_2__.HttpsAgent({\n    keepAlive: true,\n    timeout: 5 * 60 * 1000\n});\nasync function getMultipartRequestOptions(form, opts) {\n    const encoder = new form_data_encoder__WEBPACK_IMPORTED_MODULE_5__.FormDataEncoder(form);\n    const readable = node_stream__WEBPACK_IMPORTED_MODULE_6__.Readable.from(encoder);\n    const body = new _MultipartBody_mjs__WEBPACK_IMPORTED_MODULE_8__.MultipartBody(readable);\n    const headers = {\n        ...opts.headers,\n        ...encoder.headers,\n        \"Content-Length\": encoder.contentLength\n    };\n    return {\n        ...opts,\n        body: body,\n        headers\n    };\n}\nfunction getRuntime() {\n    // Polyfill global object if needed.\n    if (typeof AbortController === \"undefined\") {\n        // @ts-expect-error (the types are subtly different, but compatible in practice)\n        globalThis.AbortController = abort_controller__WEBPACK_IMPORTED_MODULE_3__.AbortController;\n    }\n    return {\n        kind: \"node\",\n        fetch: node_fetch__WEBPACK_IMPORTED_MODULE_0__[\"default\"],\n        Request: node_fetch__WEBPACK_IMPORTED_MODULE_0__.Request,\n        Response: node_fetch__WEBPACK_IMPORTED_MODULE_0__.Response,\n        Headers: node_fetch__WEBPACK_IMPORTED_MODULE_0__.Headers,\n        FormData: formdata_node__WEBPACK_IMPORTED_MODULE_1__.FormData,\n        Blob: formdata_node__WEBPACK_IMPORTED_MODULE_1__.Blob,\n        File: formdata_node__WEBPACK_IMPORTED_MODULE_1__.File,\n        ReadableStream: web_streams_polyfill_dist_ponyfill_es2018_js__WEBPACK_IMPORTED_MODULE_7__.ReadableStream,\n        getMultipartRequestOptions,\n        getDefaultAgent: (url)=>url.startsWith(\"https\") ? defaultHttpsAgent : defaultHttpAgent,\n        fileFromPath,\n        isFsReadStream: (value)=>value instanceof node_fs__WEBPACK_IMPORTED_MODULE_4__.ReadStream\n    };\n} //# sourceMappingURL=node-runtime.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbmFpL19zaGltcy9ub2RlLXJ1bnRpbWUubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBaUM7QUFDRztBQUNRO0FBQ2tDO0FBQ3pCO0FBQ0Q7QUFDYjtBQUNhO0FBQzBCO0FBQzlFLElBQUlXLHFCQUFxQjtBQUN6QixlQUFlQyxhQUFhQyxJQUFJLEVBQUUsR0FBR0MsSUFBSTtJQUNyQyx1R0FBdUc7SUFDdkcsTUFBTSxFQUFFRixjQUFjRyxhQUFhLEVBQUUsR0FBRyxNQUFNLGtTQUFPO0lBQ3JELElBQUksQ0FBQ0osb0JBQW9CO1FBQ3JCSyxRQUFRQyxJQUFJLENBQUMsQ0FBQyxvREFBb0QsRUFBRUMsS0FBS0MsU0FBUyxDQUFDTixNQUFNLFNBQVMsQ0FBQztRQUNuR0YscUJBQXFCO0lBQ3pCO0lBQ0EsYUFBYTtJQUNiLE9BQU8sTUFBTUksY0FBY0YsU0FBU0M7QUFDeEM7QUFDQSxNQUFNTSxtQkFBbUIsSUFBSWxCLDJDQUFjQSxDQUFDO0lBQUVtQixXQUFXO0lBQU1DLFNBQVMsSUFBSSxLQUFLO0FBQUs7QUFDdEYsTUFBTUMsb0JBQW9CLElBQUlyQixzREFBeUIsQ0FBQztJQUFFbUIsV0FBVztJQUFNQyxTQUFTLElBQUksS0FBSztBQUFLO0FBQ2xHLGVBQWVHLDJCQUEyQkMsSUFBSSxFQUFFQyxJQUFJO0lBQ2hELE1BQU1DLFVBQVUsSUFBSXJCLDhEQUFlQSxDQUFDbUI7SUFDcEMsTUFBTUcsV0FBV3JCLGlEQUFRQSxDQUFDc0IsSUFBSSxDQUFDRjtJQUMvQixNQUFNRyxPQUFPLElBQUl0Qiw2REFBYUEsQ0FBQ29CO0lBQy9CLE1BQU1HLFVBQVU7UUFDWixHQUFHTCxLQUFLSyxPQUFPO1FBQ2YsR0FBR0osUUFBUUksT0FBTztRQUNsQixrQkFBa0JKLFFBQVFLLGFBQWE7SUFDM0M7SUFDQSxPQUFPO1FBQUUsR0FBR04sSUFBSTtRQUFFSSxNQUFNQTtRQUFNQztJQUFRO0FBQzFDO0FBQ08sU0FBU0U7SUFDWixvQ0FBb0M7SUFDcEMsSUFBSSxPQUFPL0Isb0JBQW9CLGFBQWE7UUFDeEMsZ0ZBQWdGO1FBQ2hGZ0MsV0FBV2hDLGVBQWUsR0FBR0MsNkRBQXVCQTtJQUN4RDtJQUNBLE9BQU87UUFDSGdDLE1BQU07UUFDTkMsT0FBT3JDLGtEQUFVO1FBQ2pCdUMsU0FBU3ZDLCtDQUFVO1FBQ25Cd0MsVUFBVXhDLGdEQUFXO1FBQ3JCeUMsU0FBU3pDLCtDQUFVO1FBQ25CMEMsVUFBVXpDLG1EQUFXO1FBQ3JCMEMsTUFBTTFDLCtDQUFPO1FBQ2IyQyxNQUFNM0MsK0NBQU87UUFDYlMsY0FBY0EsMEZBQUFBO1FBQ2RlO1FBQ0FvQixpQkFBaUIsQ0FBQ0MsTUFBU0EsSUFBSUMsVUFBVSxDQUFDLFdBQVd4QixvQkFBb0JIO1FBQ3pFUjtRQUNBb0MsZ0JBQWdCLENBQUNDLFFBQVVBLGlCQUFpQjNDLCtDQUFZQTtJQUM1RDtBQUNKLEVBQ0EseUNBQXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktYXBwLy4vbm9kZV9tb2R1bGVzL29wZW5haS9fc2hpbXMvbm9kZS1ydW50aW1lLm1qcz80YTYxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIG5mIGZyb20gJ25vZGUtZmV0Y2gnO1xuaW1wb3J0ICogYXMgZmQgZnJvbSAnZm9ybWRhdGEtbm9kZSc7XG5pbXBvcnQgS2VlcEFsaXZlQWdlbnQgZnJvbSAnYWdlbnRrZWVwYWxpdmUnO1xuaW1wb3J0IHsgQWJvcnRDb250cm9sbGVyIGFzIEFib3J0Q29udHJvbGxlclBvbHlmaWxsIH0gZnJvbSAnYWJvcnQtY29udHJvbGxlcic7XG5pbXBvcnQgeyBSZWFkU3RyZWFtIGFzIEZzUmVhZFN0cmVhbSB9IGZyb20gJ25vZGU6ZnMnO1xuaW1wb3J0IHsgRm9ybURhdGFFbmNvZGVyIH0gZnJvbSAnZm9ybS1kYXRhLWVuY29kZXInO1xuaW1wb3J0IHsgUmVhZGFibGUgfSBmcm9tICdub2RlOnN0cmVhbSc7XG5pbXBvcnQgeyBNdWx0aXBhcnRCb2R5IH0gZnJvbSBcIi4vTXVsdGlwYXJ0Qm9keS5tanNcIjtcbmltcG9ydCB7IFJlYWRhYmxlU3RyZWFtIH0gZnJvbSAnd2ViLXN0cmVhbXMtcG9seWZpbGwvZGlzdC9wb255ZmlsbC5lczIwMTguanMnO1xubGV0IGZpbGVGcm9tUGF0aFdhcm5lZCA9IGZhbHNlO1xuYXN5bmMgZnVuY3Rpb24gZmlsZUZyb21QYXRoKHBhdGgsIC4uLmFyZ3MpIHtcbiAgICAvLyB0aGlzIGltcG9ydCBmYWlscyBpbiBlbnZpcm9ubWVudHMgdGhhdCBkb24ndCBoYW5kbGUgZXhwb3J0IG1hcHMgY29ycmVjdGx5LCBsaWtlIG9sZCB2ZXJzaW9ucyBvZiBKZXN0XG4gICAgY29uc3QgeyBmaWxlRnJvbVBhdGg6IF9maWxlRnJvbVBhdGggfSA9IGF3YWl0IGltcG9ydCgnZm9ybWRhdGEtbm9kZS9maWxlLWZyb20tcGF0aCcpO1xuICAgIGlmICghZmlsZUZyb21QYXRoV2FybmVkKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihgZmlsZUZyb21QYXRoIGlzIGRlcHJlY2F0ZWQ7IHVzZSBmcy5jcmVhdGVSZWFkU3RyZWFtKCR7SlNPTi5zdHJpbmdpZnkocGF0aCl9KSBpbnN0ZWFkYCk7XG4gICAgICAgIGZpbGVGcm9tUGF0aFdhcm5lZCA9IHRydWU7XG4gICAgfVxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICByZXR1cm4gYXdhaXQgX2ZpbGVGcm9tUGF0aChwYXRoLCAuLi5hcmdzKTtcbn1cbmNvbnN0IGRlZmF1bHRIdHRwQWdlbnQgPSBuZXcgS2VlcEFsaXZlQWdlbnQoeyBrZWVwQWxpdmU6IHRydWUsIHRpbWVvdXQ6IDUgKiA2MCAqIDEwMDAgfSk7XG5jb25zdCBkZWZhdWx0SHR0cHNBZ2VudCA9IG5ldyBLZWVwQWxpdmVBZ2VudC5IdHRwc0FnZW50KHsga2VlcEFsaXZlOiB0cnVlLCB0aW1lb3V0OiA1ICogNjAgKiAxMDAwIH0pO1xuYXN5bmMgZnVuY3Rpb24gZ2V0TXVsdGlwYXJ0UmVxdWVzdE9wdGlvbnMoZm9ybSwgb3B0cykge1xuICAgIGNvbnN0IGVuY29kZXIgPSBuZXcgRm9ybURhdGFFbmNvZGVyKGZvcm0pO1xuICAgIGNvbnN0IHJlYWRhYmxlID0gUmVhZGFibGUuZnJvbShlbmNvZGVyKTtcbiAgICBjb25zdCBib2R5ID0gbmV3IE11bHRpcGFydEJvZHkocmVhZGFibGUpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgIC4uLm9wdHMuaGVhZGVycyxcbiAgICAgICAgLi4uZW5jb2Rlci5oZWFkZXJzLFxuICAgICAgICAnQ29udGVudC1MZW5ndGgnOiBlbmNvZGVyLmNvbnRlbnRMZW5ndGgsXG4gICAgfTtcbiAgICByZXR1cm4geyAuLi5vcHRzLCBib2R5OiBib2R5LCBoZWFkZXJzIH07XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0UnVudGltZSgpIHtcbiAgICAvLyBQb2x5ZmlsbCBnbG9iYWwgb2JqZWN0IGlmIG5lZWRlZC5cbiAgICBpZiAodHlwZW9mIEFib3J0Q29udHJvbGxlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciAodGhlIHR5cGVzIGFyZSBzdWJ0bHkgZGlmZmVyZW50LCBidXQgY29tcGF0aWJsZSBpbiBwcmFjdGljZSlcbiAgICAgICAgZ2xvYmFsVGhpcy5BYm9ydENvbnRyb2xsZXIgPSBBYm9ydENvbnRyb2xsZXJQb2x5ZmlsbDtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAga2luZDogJ25vZGUnLFxuICAgICAgICBmZXRjaDogbmYuZGVmYXVsdCxcbiAgICAgICAgUmVxdWVzdDogbmYuUmVxdWVzdCxcbiAgICAgICAgUmVzcG9uc2U6IG5mLlJlc3BvbnNlLFxuICAgICAgICBIZWFkZXJzOiBuZi5IZWFkZXJzLFxuICAgICAgICBGb3JtRGF0YTogZmQuRm9ybURhdGEsXG4gICAgICAgIEJsb2I6IGZkLkJsb2IsXG4gICAgICAgIEZpbGU6IGZkLkZpbGUsXG4gICAgICAgIFJlYWRhYmxlU3RyZWFtLFxuICAgICAgICBnZXRNdWx0aXBhcnRSZXF1ZXN0T3B0aW9ucyxcbiAgICAgICAgZ2V0RGVmYXVsdEFnZW50OiAodXJsKSA9PiAodXJsLnN0YXJ0c1dpdGgoJ2h0dHBzJykgPyBkZWZhdWx0SHR0cHNBZ2VudCA6IGRlZmF1bHRIdHRwQWdlbnQpLFxuICAgICAgICBmaWxlRnJvbVBhdGgsXG4gICAgICAgIGlzRnNSZWFkU3RyZWFtOiAodmFsdWUpID0+IHZhbHVlIGluc3RhbmNlb2YgRnNSZWFkU3RyZWFtLFxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub2RlLXJ1bnRpbWUubWpzLm1hcCJdLCJuYW1lcyI6WyJuZiIsImZkIiwiS2VlcEFsaXZlQWdlbnQiLCJBYm9ydENvbnRyb2xsZXIiLCJBYm9ydENvbnRyb2xsZXJQb2x5ZmlsbCIsIlJlYWRTdHJlYW0iLCJGc1JlYWRTdHJlYW0iLCJGb3JtRGF0YUVuY29kZXIiLCJSZWFkYWJsZSIsIk11bHRpcGFydEJvZHkiLCJSZWFkYWJsZVN0cmVhbSIsImZpbGVGcm9tUGF0aFdhcm5lZCIsImZpbGVGcm9tUGF0aCIsInBhdGgiLCJhcmdzIiwiX2ZpbGVGcm9tUGF0aCIsImNvbnNvbGUiLCJ3YXJuIiwiSlNPTiIsInN0cmluZ2lmeSIsImRlZmF1bHRIdHRwQWdlbnQiLCJrZWVwQWxpdmUiLCJ0aW1lb3V0IiwiZGVmYXVsdEh0dHBzQWdlbnQiLCJIdHRwc0FnZW50IiwiZ2V0TXVsdGlwYXJ0UmVxdWVzdE9wdGlvbnMiLCJmb3JtIiwib3B0cyIsImVuY29kZXIiLCJyZWFkYWJsZSIsImZyb20iLCJib2R5IiwiaGVhZGVycyIsImNvbnRlbnRMZW5ndGgiLCJnZXRSdW50aW1lIiwiZ2xvYmFsVGhpcyIsImtpbmQiLCJmZXRjaCIsImRlZmF1bHQiLCJSZXF1ZXN0IiwiUmVzcG9uc2UiLCJIZWFkZXJzIiwiRm9ybURhdGEiLCJCbG9iIiwiRmlsZSIsImdldERlZmF1bHRBZ2VudCIsInVybCIsInN0YXJ0c1dpdGgiLCJpc0ZzUmVhZFN0cmVhbSIsInZhbHVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openai/_shims/node-runtime.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/openai/_shims/registry.mjs":
/*!*************************************************!*\
  !*** ./node_modules/openai/_shims/registry.mjs ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Blob: () => (/* binding */ Blob),\n/* harmony export */   File: () => (/* binding */ File),\n/* harmony export */   FormData: () => (/* binding */ FormData),\n/* harmony export */   Headers: () => (/* binding */ Headers),\n/* harmony export */   ReadableStream: () => (/* binding */ ReadableStream),\n/* harmony export */   Request: () => (/* binding */ Request),\n/* harmony export */   Response: () => (/* binding */ Response),\n/* harmony export */   auto: () => (/* binding */ auto),\n/* harmony export */   fetch: () => (/* binding */ fetch),\n/* harmony export */   fileFromPath: () => (/* binding */ fileFromPath),\n/* harmony export */   getDefaultAgent: () => (/* binding */ getDefaultAgent),\n/* harmony export */   getMultipartRequestOptions: () => (/* binding */ getMultipartRequestOptions),\n/* harmony export */   isFsReadStream: () => (/* binding */ isFsReadStream),\n/* harmony export */   kind: () => (/* binding */ kind),\n/* harmony export */   setShims: () => (/* binding */ setShims)\n/* harmony export */ });\nlet auto = false;\nlet kind = undefined;\nlet fetch = undefined;\nlet Request = undefined;\nlet Response = undefined;\nlet Headers = undefined;\nlet FormData = undefined;\nlet Blob = undefined;\nlet File = undefined;\nlet ReadableStream = undefined;\nlet getMultipartRequestOptions = undefined;\nlet getDefaultAgent = undefined;\nlet fileFromPath = undefined;\nlet isFsReadStream = undefined;\nfunction setShims(shims, options = {\n    auto: false\n}) {\n    if (auto) {\n        throw new Error(`you must \\`import 'openai/shims/${shims.kind}'\\` before importing anything else from openai`);\n    }\n    if (kind) {\n        throw new Error(`can't \\`import 'openai/shims/${shims.kind}'\\` after \\`import 'openai/shims/${kind}'\\``);\n    }\n    auto = options.auto;\n    kind = shims.kind;\n    fetch = shims.fetch;\n    Request = shims.Request;\n    Response = shims.Response;\n    Headers = shims.Headers;\n    FormData = shims.FormData;\n    Blob = shims.Blob;\n    File = shims.File;\n    ReadableStream = shims.ReadableStream;\n    getMultipartRequestOptions = shims.getMultipartRequestOptions;\n    getDefaultAgent = shims.getDefaultAgent;\n    fileFromPath = shims.fileFromPath;\n    isFsReadStream = shims.isFsReadStream;\n} //# sourceMappingURL=registry.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbmFpL19zaGltcy9yZWdpc3RyeS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQU8sSUFBSUEsT0FBTyxNQUFNO0FBQ2pCLElBQUlDLE9BQU9DLFVBQVU7QUFDckIsSUFBSUMsUUFBUUQsVUFBVTtBQUN0QixJQUFJRSxVQUFVRixVQUFVO0FBQ3hCLElBQUlHLFdBQVdILFVBQVU7QUFDekIsSUFBSUksVUFBVUosVUFBVTtBQUN4QixJQUFJSyxXQUFXTCxVQUFVO0FBQ3pCLElBQUlNLE9BQU9OLFVBQVU7QUFDckIsSUFBSU8sT0FBT1AsVUFBVTtBQUNyQixJQUFJUSxpQkFBaUJSLFVBQVU7QUFDL0IsSUFBSVMsNkJBQTZCVCxVQUFVO0FBQzNDLElBQUlVLGtCQUFrQlYsVUFBVTtBQUNoQyxJQUFJVyxlQUFlWCxVQUFVO0FBQzdCLElBQUlZLGlCQUFpQlosVUFBVTtBQUMvQixTQUFTYSxTQUFTQyxLQUFLLEVBQUVDLFVBQVU7SUFBRWpCLE1BQU07QUFBTSxDQUFDO0lBQ3JELElBQUlBLE1BQU07UUFDTixNQUFNLElBQUlrQixNQUFNLENBQUMsZ0NBQWdDLEVBQUVGLE1BQU1mLElBQUksQ0FBQyw4Q0FBOEMsQ0FBQztJQUNqSDtJQUNBLElBQUlBLE1BQU07UUFDTixNQUFNLElBQUlpQixNQUFNLENBQUMsNkJBQTZCLEVBQUVGLE1BQU1mLElBQUksQ0FBQyxpQ0FBaUMsRUFBRUEsS0FBSyxHQUFHLENBQUM7SUFDM0c7SUFDQUQsT0FBT2lCLFFBQVFqQixJQUFJO0lBQ25CQyxPQUFPZSxNQUFNZixJQUFJO0lBQ2pCRSxRQUFRYSxNQUFNYixLQUFLO0lBQ25CQyxVQUFVWSxNQUFNWixPQUFPO0lBQ3ZCQyxXQUFXVyxNQUFNWCxRQUFRO0lBQ3pCQyxVQUFVVSxNQUFNVixPQUFPO0lBQ3ZCQyxXQUFXUyxNQUFNVCxRQUFRO0lBQ3pCQyxPQUFPUSxNQUFNUixJQUFJO0lBQ2pCQyxPQUFPTyxNQUFNUCxJQUFJO0lBQ2pCQyxpQkFBaUJNLE1BQU1OLGNBQWM7SUFDckNDLDZCQUE2QkssTUFBTUwsMEJBQTBCO0lBQzdEQyxrQkFBa0JJLE1BQU1KLGVBQWU7SUFDdkNDLGVBQWVHLE1BQU1ILFlBQVk7SUFDakNDLGlCQUFpQkUsTUFBTUYsY0FBYztBQUN6QyxFQUNBLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWFwcC8uL25vZGVfbW9kdWxlcy9vcGVuYWkvX3NoaW1zL3JlZ2lzdHJ5Lm1qcz9iNGMwIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBsZXQgYXV0byA9IGZhbHNlO1xuZXhwb3J0IGxldCBraW5kID0gdW5kZWZpbmVkO1xuZXhwb3J0IGxldCBmZXRjaCA9IHVuZGVmaW5lZDtcbmV4cG9ydCBsZXQgUmVxdWVzdCA9IHVuZGVmaW5lZDtcbmV4cG9ydCBsZXQgUmVzcG9uc2UgPSB1bmRlZmluZWQ7XG5leHBvcnQgbGV0IEhlYWRlcnMgPSB1bmRlZmluZWQ7XG5leHBvcnQgbGV0IEZvcm1EYXRhID0gdW5kZWZpbmVkO1xuZXhwb3J0IGxldCBCbG9iID0gdW5kZWZpbmVkO1xuZXhwb3J0IGxldCBGaWxlID0gdW5kZWZpbmVkO1xuZXhwb3J0IGxldCBSZWFkYWJsZVN0cmVhbSA9IHVuZGVmaW5lZDtcbmV4cG9ydCBsZXQgZ2V0TXVsdGlwYXJ0UmVxdWVzdE9wdGlvbnMgPSB1bmRlZmluZWQ7XG5leHBvcnQgbGV0IGdldERlZmF1bHRBZ2VudCA9IHVuZGVmaW5lZDtcbmV4cG9ydCBsZXQgZmlsZUZyb21QYXRoID0gdW5kZWZpbmVkO1xuZXhwb3J0IGxldCBpc0ZzUmVhZFN0cmVhbSA9IHVuZGVmaW5lZDtcbmV4cG9ydCBmdW5jdGlvbiBzZXRTaGltcyhzaGltcywgb3B0aW9ucyA9IHsgYXV0bzogZmFsc2UgfSkge1xuICAgIGlmIChhdXRvKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgeW91IG11c3QgXFxgaW1wb3J0ICdvcGVuYWkvc2hpbXMvJHtzaGltcy5raW5kfSdcXGAgYmVmb3JlIGltcG9ydGluZyBhbnl0aGluZyBlbHNlIGZyb20gb3BlbmFpYCk7XG4gICAgfVxuICAgIGlmIChraW5kKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgY2FuJ3QgXFxgaW1wb3J0ICdvcGVuYWkvc2hpbXMvJHtzaGltcy5raW5kfSdcXGAgYWZ0ZXIgXFxgaW1wb3J0ICdvcGVuYWkvc2hpbXMvJHtraW5kfSdcXGBgKTtcbiAgICB9XG4gICAgYXV0byA9IG9wdGlvbnMuYXV0bztcbiAgICBraW5kID0gc2hpbXMua2luZDtcbiAgICBmZXRjaCA9IHNoaW1zLmZldGNoO1xuICAgIFJlcXVlc3QgPSBzaGltcy5SZXF1ZXN0O1xuICAgIFJlc3BvbnNlID0gc2hpbXMuUmVzcG9uc2U7XG4gICAgSGVhZGVycyA9IHNoaW1zLkhlYWRlcnM7XG4gICAgRm9ybURhdGEgPSBzaGltcy5Gb3JtRGF0YTtcbiAgICBCbG9iID0gc2hpbXMuQmxvYjtcbiAgICBGaWxlID0gc2hpbXMuRmlsZTtcbiAgICBSZWFkYWJsZVN0cmVhbSA9IHNoaW1zLlJlYWRhYmxlU3RyZWFtO1xuICAgIGdldE11bHRpcGFydFJlcXVlc3RPcHRpb25zID0gc2hpbXMuZ2V0TXVsdGlwYXJ0UmVxdWVzdE9wdGlvbnM7XG4gICAgZ2V0RGVmYXVsdEFnZW50ID0gc2hpbXMuZ2V0RGVmYXVsdEFnZW50O1xuICAgIGZpbGVGcm9tUGF0aCA9IHNoaW1zLmZpbGVGcm9tUGF0aDtcbiAgICBpc0ZzUmVhZFN0cmVhbSA9IHNoaW1zLmlzRnNSZWFkU3RyZWFtO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVnaXN0cnkubWpzLm1hcCJdLCJuYW1lcyI6WyJhdXRvIiwia2luZCIsInVuZGVmaW5lZCIsImZldGNoIiwiUmVxdWVzdCIsIlJlc3BvbnNlIiwiSGVhZGVycyIsIkZvcm1EYXRhIiwiQmxvYiIsIkZpbGUiLCJSZWFkYWJsZVN0cmVhbSIsImdldE11bHRpcGFydFJlcXVlc3RPcHRpb25zIiwiZ2V0RGVmYXVsdEFnZW50IiwiZmlsZUZyb21QYXRoIiwiaXNGc1JlYWRTdHJlYW0iLCJzZXRTaGltcyIsInNoaW1zIiwib3B0aW9ucyIsIkVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openai/_shims/registry.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/openai/core.mjs":
/*!**************************************!*\
  !*** ./node_modules/openai/core.mjs ***!
  \**************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APIClient: () => (/* binding */ APIClient),\n/* harmony export */   APIPromise: () => (/* binding */ APIPromise),\n/* harmony export */   AbstractPage: () => (/* binding */ AbstractPage),\n/* harmony export */   PagePromise: () => (/* binding */ PagePromise),\n/* harmony export */   castToError: () => (/* binding */ castToError),\n/* harmony export */   coerceBoolean: () => (/* binding */ coerceBoolean),\n/* harmony export */   coerceFloat: () => (/* binding */ coerceFloat),\n/* harmony export */   coerceInteger: () => (/* binding */ coerceInteger),\n/* harmony export */   createForm: () => (/* reexport safe */ _uploads_mjs__WEBPACK_IMPORTED_MODULE_1__.createForm),\n/* harmony export */   createResponseHeaders: () => (/* binding */ createResponseHeaders),\n/* harmony export */   debug: () => (/* binding */ debug),\n/* harmony export */   ensurePresent: () => (/* binding */ ensurePresent),\n/* harmony export */   getRequiredHeader: () => (/* binding */ getRequiredHeader),\n/* harmony export */   hasOwn: () => (/* binding */ hasOwn),\n/* harmony export */   isEmptyObj: () => (/* binding */ isEmptyObj),\n/* harmony export */   isHeadersProtocol: () => (/* binding */ isHeadersProtocol),\n/* harmony export */   isObj: () => (/* binding */ isObj),\n/* harmony export */   isRequestOptions: () => (/* binding */ isRequestOptions),\n/* harmony export */   isRunningInBrowser: () => (/* binding */ isRunningInBrowser),\n/* harmony export */   maybeCoerceBoolean: () => (/* binding */ maybeCoerceBoolean),\n/* harmony export */   maybeCoerceFloat: () => (/* binding */ maybeCoerceFloat),\n/* harmony export */   maybeCoerceInteger: () => (/* binding */ maybeCoerceInteger),\n/* harmony export */   maybeMultipartFormRequestOptions: () => (/* reexport safe */ _uploads_mjs__WEBPACK_IMPORTED_MODULE_1__.maybeMultipartFormRequestOptions),\n/* harmony export */   multipartFormRequestOptions: () => (/* reexport safe */ _uploads_mjs__WEBPACK_IMPORTED_MODULE_1__.multipartFormRequestOptions),\n/* harmony export */   readEnv: () => (/* binding */ readEnv),\n/* harmony export */   safeJSON: () => (/* binding */ safeJSON),\n/* harmony export */   sleep: () => (/* binding */ sleep),\n/* harmony export */   toBase64: () => (/* binding */ toBase64)\n/* harmony export */ });\n/* harmony import */ var _version_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./version.mjs */ \"(ssr)/./node_modules/openai/version.mjs\");\n/* harmony import */ var _streaming_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./streaming.mjs */ \"(ssr)/./node_modules/openai/streaming.mjs\");\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./error.mjs */ \"(ssr)/./node_modules/openai/error.mjs\");\n/* harmony import */ var _shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_shims/index.mjs */ \"(ssr)/./node_modules/openai/_shims/index.mjs\");\n/* harmony import */ var _uploads_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./uploads.mjs */ \"(ssr)/./node_modules/openai/uploads.mjs\");\nvar __classPrivateFieldSet = undefined && undefined.__classPrivateFieldSet || function(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = undefined && undefined.__classPrivateFieldGet || function(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _AbstractPage_client;\n\n\n\n\n\n\nasync function defaultParseResponse(props) {\n    const { response } = props;\n    if (props.options.stream) {\n        debug(\"response\", response.status, response.url, response.headers, response.body);\n        // Note: there is an invariant here that isn't represented in the type system\n        // that if you set `stream: true` the response type must also be `Stream<T>`\n        if (props.options.__streamClass) {\n            return props.options.__streamClass.fromSSEResponse(response, props.controller);\n        }\n        return _streaming_mjs__WEBPACK_IMPORTED_MODULE_2__.Stream.fromSSEResponse(response, props.controller);\n    }\n    // fetch refuses to read the body when the status code is 204.\n    if (response.status === 204) {\n        return null;\n    }\n    if (props.options.__binaryResponse) {\n        return response;\n    }\n    const contentType = response.headers.get(\"content-type\");\n    if (contentType?.includes(\"application/json\")) {\n        const json = await response.json();\n        debug(\"response\", response.status, response.url, response.headers, json);\n        return json;\n    }\n    const text = await response.text();\n    debug(\"response\", response.status, response.url, response.headers, text);\n    // TODO handle blob, arraybuffer, other content types, etc.\n    return text;\n}\n/**\n * A subclass of `Promise` providing additional helper methods\n * for interacting with the SDK.\n */ class APIPromise extends Promise {\n    constructor(responsePromise, parseResponse = defaultParseResponse){\n        super((resolve)=>{\n            // this is maybe a bit weird but this has to be a no-op to not implicitly\n            // parse the response body; instead .then, .catch, .finally are overridden\n            // to parse the response\n            resolve(null);\n        });\n        this.responsePromise = responsePromise;\n        this.parseResponse = parseResponse;\n    }\n    _thenUnwrap(transform) {\n        return new APIPromise(this.responsePromise, async (props)=>transform(await this.parseResponse(props)));\n    }\n    /**\n     * Gets the raw `Response` instance instead of parsing the response\n     * data.\n     *\n     * If you want to parse the response body but still get the `Response`\n     * instance, you can use {@link withResponse()}.\n     *\n     * 👋 Getting the wrong TypeScript type for `Response`?\n     * Try setting `\"moduleResolution\": \"NodeNext\"` if you can,\n     * or add one of these imports before your first `import … from 'openai'`:\n     * - `import 'openai/shims/node'` (if you're running on Node)\n     * - `import 'openai/shims/web'` (otherwise)\n     */ asResponse() {\n        return this.responsePromise.then((p)=>p.response);\n    }\n    /**\n     * Gets the parsed response data and the raw `Response` instance.\n     *\n     * If you just want to get the raw `Response` instance without parsing it,\n     * you can use {@link asResponse()}.\n     *\n     *\n     * 👋 Getting the wrong TypeScript type for `Response`?\n     * Try setting `\"moduleResolution\": \"NodeNext\"` if you can,\n     * or add one of these imports before your first `import … from 'openai'`:\n     * - `import 'openai/shims/node'` (if you're running on Node)\n     * - `import 'openai/shims/web'` (otherwise)\n     */ async withResponse() {\n        const [data, response] = await Promise.all([\n            this.parse(),\n            this.asResponse()\n        ]);\n        return {\n            data,\n            response\n        };\n    }\n    parse() {\n        if (!this.parsedPromise) {\n            this.parsedPromise = this.responsePromise.then(this.parseResponse);\n        }\n        return this.parsedPromise;\n    }\n    then(onfulfilled, onrejected) {\n        return this.parse().then(onfulfilled, onrejected);\n    }\n    catch(onrejected) {\n        return this.parse().catch(onrejected);\n    }\n    finally(onfinally) {\n        return this.parse().finally(onfinally);\n    }\n}\nclass APIClient {\n    constructor({ baseURL, maxRetries = 2, timeout = 600000, httpAgent, fetch: overridenFetch }){\n        this.baseURL = baseURL;\n        this.maxRetries = validatePositiveInteger(\"maxRetries\", maxRetries);\n        this.timeout = validatePositiveInteger(\"timeout\", timeout);\n        this.httpAgent = httpAgent;\n        this.fetch = overridenFetch ?? _shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.fetch;\n    }\n    authHeaders(opts) {\n        return {};\n    }\n    /**\n     * Override this to add your own default headers, for example:\n     *\n     *  {\n     *    ...super.defaultHeaders(),\n     *    Authorization: 'Bearer 123',\n     *  }\n     */ defaultHeaders(opts) {\n        return {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n            \"User-Agent\": this.getUserAgent(),\n            ...getPlatformHeaders(),\n            ...this.authHeaders(opts)\n        };\n    }\n    /**\n     * Override this to add your own headers validation:\n     */ validateHeaders(headers, customHeaders) {}\n    defaultIdempotencyKey() {\n        return `stainless-node-retry-${uuid4()}`;\n    }\n    get(path, opts) {\n        return this.methodRequest(\"get\", path, opts);\n    }\n    post(path, opts) {\n        return this.methodRequest(\"post\", path, opts);\n    }\n    patch(path, opts) {\n        return this.methodRequest(\"patch\", path, opts);\n    }\n    put(path, opts) {\n        return this.methodRequest(\"put\", path, opts);\n    }\n    delete(path, opts) {\n        return this.methodRequest(\"delete\", path, opts);\n    }\n    methodRequest(method, path, opts) {\n        return this.request(Promise.resolve(opts).then((opts)=>({\n                method,\n                path,\n                ...opts\n            })));\n    }\n    getAPIList(path, Page, opts) {\n        return this.requestAPIList(Page, {\n            method: \"get\",\n            path,\n            ...opts\n        });\n    }\n    calculateContentLength(body) {\n        if (typeof body === \"string\") {\n            if (typeof Buffer !== \"undefined\") {\n                return Buffer.byteLength(body, \"utf8\").toString();\n            }\n            if (typeof TextEncoder !== \"undefined\") {\n                const encoder = new TextEncoder();\n                const encoded = encoder.encode(body);\n                return encoded.length.toString();\n            }\n        }\n        return null;\n    }\n    buildRequest(options) {\n        const { method, path, query, headers: headers = {} } = options;\n        const body = (0,_uploads_mjs__WEBPACK_IMPORTED_MODULE_1__.isMultipartBody)(options.body) ? options.body.body : options.body ? JSON.stringify(options.body, null, 2) : null;\n        const contentLength = this.calculateContentLength(body);\n        const url = this.buildURL(path, query);\n        if (\"timeout\" in options) validatePositiveInteger(\"timeout\", options.timeout);\n        const timeout = options.timeout ?? this.timeout;\n        const httpAgent = options.httpAgent ?? this.httpAgent ?? (0,_shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.getDefaultAgent)(url);\n        const minAgentTimeout = timeout + 1000;\n        if (typeof httpAgent?.options?.timeout === \"number\" && minAgentTimeout > (httpAgent.options.timeout ?? 0)) {\n            // Allow any given request to bump our agent active socket timeout.\n            // This may seem strange, but leaking active sockets should be rare and not particularly problematic,\n            // and without mutating agent we would need to create more of them.\n            // This tradeoff optimizes for performance.\n            httpAgent.options.timeout = minAgentTimeout;\n        }\n        if (this.idempotencyHeader && method !== \"get\") {\n            if (!options.idempotencyKey) options.idempotencyKey = this.defaultIdempotencyKey();\n            headers[this.idempotencyHeader] = options.idempotencyKey;\n        }\n        const reqHeaders = this.buildHeaders({\n            options,\n            headers,\n            contentLength\n        });\n        const req = {\n            method,\n            ...body && {\n                body: body\n            },\n            headers: reqHeaders,\n            ...httpAgent && {\n                agent: httpAgent\n            },\n            // @ts-ignore node-fetch uses a custom AbortSignal type that is\n            // not compatible with standard web types\n            signal: options.signal ?? null\n        };\n        return {\n            req,\n            url,\n            timeout\n        };\n    }\n    buildHeaders({ options, headers, contentLength }) {\n        const reqHeaders = {};\n        if (contentLength) {\n            reqHeaders[\"content-length\"] = contentLength;\n        }\n        const defaultHeaders = this.defaultHeaders(options);\n        applyHeadersMut(reqHeaders, defaultHeaders);\n        applyHeadersMut(reqHeaders, headers);\n        // let builtin fetch set the Content-Type for multipart bodies\n        if ((0,_uploads_mjs__WEBPACK_IMPORTED_MODULE_1__.isMultipartBody)(options.body) && _shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.kind !== \"node\") {\n            delete reqHeaders[\"content-type\"];\n        }\n        this.validateHeaders(reqHeaders, headers);\n        return reqHeaders;\n    }\n    /**\n     * Used as a callback for mutating the given `FinalRequestOptions` object.\n     */ async prepareOptions(options) {}\n    /**\n     * Used as a callback for mutating the given `RequestInit` object.\n     *\n     * This is useful for cases where you want to add certain headers based off of\n     * the request properties, e.g. `method` or `url`.\n     */ async prepareRequest(request, { url, options }) {}\n    parseHeaders(headers) {\n        return !headers ? {} : Symbol.iterator in headers ? Object.fromEntries(Array.from(headers).map((header)=>[\n                ...header\n            ])) : {\n            ...headers\n        };\n    }\n    makeStatusError(status, error, message, headers) {\n        return _error_mjs__WEBPACK_IMPORTED_MODULE_3__.APIError.generate(status, error, message, headers);\n    }\n    request(options, remainingRetries = null) {\n        return new APIPromise(this.makeRequest(options, remainingRetries));\n    }\n    async makeRequest(optionsInput, retriesRemaining) {\n        const options = await optionsInput;\n        if (retriesRemaining == null) {\n            retriesRemaining = options.maxRetries ?? this.maxRetries;\n        }\n        await this.prepareOptions(options);\n        const { req, url, timeout } = this.buildRequest(options);\n        await this.prepareRequest(req, {\n            url,\n            options\n        });\n        debug(\"request\", url, options, req.headers);\n        if (options.signal?.aborted) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.APIUserAbortError();\n        }\n        const controller = new AbortController();\n        const response = await this.fetchWithTimeout(url, req, timeout, controller).catch(castToError);\n        if (response instanceof Error) {\n            if (options.signal?.aborted) {\n                throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.APIUserAbortError();\n            }\n            if (retriesRemaining) {\n                return this.retryRequest(options, retriesRemaining);\n            }\n            if (response.name === \"AbortError\") {\n                throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.APIConnectionTimeoutError();\n            }\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.APIConnectionError({\n                cause: response\n            });\n        }\n        const responseHeaders = createResponseHeaders(response.headers);\n        if (!response.ok) {\n            if (retriesRemaining && this.shouldRetry(response)) {\n                const retryMessage = `retrying, ${retriesRemaining} attempts remaining`;\n                debug(`response (error; ${retryMessage})`, response.status, url, responseHeaders);\n                return this.retryRequest(options, retriesRemaining, responseHeaders);\n            }\n            const errText = await response.text().catch((e)=>castToError(e).message);\n            const errJSON = safeJSON(errText);\n            const errMessage = errJSON ? undefined : errText;\n            const retryMessage = retriesRemaining ? `(error; no more retries left)` : `(error; not retryable)`;\n            debug(`response (error; ${retryMessage})`, response.status, url, responseHeaders, errMessage);\n            const err = this.makeStatusError(response.status, errJSON, errMessage, responseHeaders);\n            throw err;\n        }\n        return {\n            response,\n            options,\n            controller\n        };\n    }\n    requestAPIList(Page, options) {\n        const request = this.makeRequest(options, null);\n        return new PagePromise(this, request, Page);\n    }\n    buildURL(path, query) {\n        const url = isAbsoluteURL(path) ? new URL(path) : new URL(this.baseURL + (this.baseURL.endsWith(\"/\") && path.startsWith(\"/\") ? path.slice(1) : path));\n        const defaultQuery = this.defaultQuery();\n        if (!isEmptyObj(defaultQuery)) {\n            query = {\n                ...defaultQuery,\n                ...query\n            };\n        }\n        if (typeof query === \"object\" && query && !Array.isArray(query)) {\n            url.search = this.stringifyQuery(query);\n        }\n        return url.toString();\n    }\n    stringifyQuery(query) {\n        return Object.entries(query).filter(([_, value])=>typeof value !== \"undefined\").map(([key, value])=>{\n            if (typeof value === \"string\" || typeof value === \"number\" || typeof value === \"boolean\") {\n                return `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;\n            }\n            if (value === null) {\n                return `${encodeURIComponent(key)}=`;\n            }\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.OpenAIError(`Cannot stringify type ${typeof value}; Expected string, number, boolean, or null. If you need to pass nested query parameters, you can manually encode them, e.g. { query: { 'foo[key1]': value1, 'foo[key2]': value2 } }, and please open a GitHub issue requesting better support for your use case.`);\n        }).join(\"&\");\n    }\n    async fetchWithTimeout(url, init, ms, controller) {\n        const { signal, ...options } = init || {};\n        if (signal) signal.addEventListener(\"abort\", ()=>controller.abort());\n        const timeout = setTimeout(()=>controller.abort(), ms);\n        return this.getRequestClient()// use undefined this binding; fetch errors if bound to something else in browser/cloudflare\n        .fetch.call(undefined, url, {\n            signal: controller.signal,\n            ...options\n        }).finally(()=>{\n            clearTimeout(timeout);\n        });\n    }\n    getRequestClient() {\n        return {\n            fetch: this.fetch\n        };\n    }\n    shouldRetry(response) {\n        // Note this is not a standard header.\n        const shouldRetryHeader = response.headers.get(\"x-should-retry\");\n        // If the server explicitly says whether or not to retry, obey.\n        if (shouldRetryHeader === \"true\") return true;\n        if (shouldRetryHeader === \"false\") return false;\n        // Retry on request timeouts.\n        if (response.status === 408) return true;\n        // Retry on lock timeouts.\n        if (response.status === 409) return true;\n        // Retry on rate limits.\n        if (response.status === 429) return true;\n        // Retry internal errors.\n        if (response.status >= 500) return true;\n        return false;\n    }\n    async retryRequest(options, retriesRemaining, responseHeaders) {\n        let timeoutMillis;\n        // Note the `retry-after-ms` header may not be standard, but is a good idea and we'd like proactive support for it.\n        const retryAfterMillisHeader = responseHeaders?.[\"retry-after-ms\"];\n        if (retryAfterMillisHeader) {\n            const timeoutMs = parseFloat(retryAfterMillisHeader);\n            if (!Number.isNaN(timeoutMs)) {\n                timeoutMillis = timeoutMs;\n            }\n        }\n        // About the Retry-After header: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After\n        const retryAfterHeader = responseHeaders?.[\"retry-after\"];\n        if (retryAfterHeader && !timeoutMillis) {\n            const timeoutSeconds = parseFloat(retryAfterHeader);\n            if (!Number.isNaN(timeoutSeconds)) {\n                timeoutMillis = timeoutSeconds * 1000;\n            } else {\n                timeoutMillis = Date.parse(retryAfterHeader) - Date.now();\n            }\n        }\n        // If the API asks us to wait a certain amount of time (and it's a reasonable amount),\n        // just do what it says, but otherwise calculate a default\n        if (!(timeoutMillis && 0 <= timeoutMillis && timeoutMillis < 60 * 1000)) {\n            const maxRetries = options.maxRetries ?? this.maxRetries;\n            timeoutMillis = this.calculateDefaultRetryTimeoutMillis(retriesRemaining, maxRetries);\n        }\n        await sleep(timeoutMillis);\n        return this.makeRequest(options, retriesRemaining - 1);\n    }\n    calculateDefaultRetryTimeoutMillis(retriesRemaining, maxRetries) {\n        const initialRetryDelay = 0.5;\n        const maxRetryDelay = 8.0;\n        const numRetries = maxRetries - retriesRemaining;\n        // Apply exponential backoff, but not more than the max.\n        const sleepSeconds = Math.min(initialRetryDelay * Math.pow(2, numRetries), maxRetryDelay);\n        // Apply some jitter, take up to at most 25 percent of the retry time.\n        const jitter = 1 - Math.random() * 0.25;\n        return sleepSeconds * jitter * 1000;\n    }\n    getUserAgent() {\n        return `${this.constructor.name}/JS ${_version_mjs__WEBPACK_IMPORTED_MODULE_4__.VERSION}`;\n    }\n}\nclass AbstractPage {\n    constructor(client, response, body, options){\n        _AbstractPage_client.set(this, void 0);\n        __classPrivateFieldSet(this, _AbstractPage_client, client, \"f\");\n        this.options = options;\n        this.response = response;\n        this.body = body;\n    }\n    hasNextPage() {\n        const items = this.getPaginatedItems();\n        if (!items.length) return false;\n        return this.nextPageInfo() != null;\n    }\n    async getNextPage() {\n        const nextInfo = this.nextPageInfo();\n        if (!nextInfo) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.OpenAIError(\"No next page expected; please check `.hasNextPage()` before calling `.getNextPage()`.\");\n        }\n        const nextOptions = {\n            ...this.options\n        };\n        if (\"params\" in nextInfo && typeof nextOptions.query === \"object\") {\n            nextOptions.query = {\n                ...nextOptions.query,\n                ...nextInfo.params\n            };\n        } else if (\"url\" in nextInfo) {\n            const params = [\n                ...Object.entries(nextOptions.query || {}),\n                ...nextInfo.url.searchParams.entries()\n            ];\n            for (const [key, value] of params){\n                nextInfo.url.searchParams.set(key, value);\n            }\n            nextOptions.query = undefined;\n            nextOptions.path = nextInfo.url.toString();\n        }\n        return await __classPrivateFieldGet(this, _AbstractPage_client, \"f\").requestAPIList(this.constructor, nextOptions);\n    }\n    async *iterPages() {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        let page = this;\n        yield page;\n        while(page.hasNextPage()){\n            page = await page.getNextPage();\n            yield page;\n        }\n    }\n    async *[(_AbstractPage_client = new WeakMap(), Symbol.asyncIterator)]() {\n        for await (const page of this.iterPages()){\n            for (const item of page.getPaginatedItems()){\n                yield item;\n            }\n        }\n    }\n}\n/**\n * This subclass of Promise will resolve to an instantiated Page once the request completes.\n *\n * It also implements AsyncIterable to allow auto-paginating iteration on an unawaited list call, eg:\n *\n *    for await (const item of client.items.list()) {\n *      console.log(item)\n *    }\n */ class PagePromise extends APIPromise {\n    constructor(client, request, Page){\n        super(request, async (props)=>new Page(client, props.response, await defaultParseResponse(props), props.options));\n    }\n    /**\n     * Allow auto-paginating iteration on an unawaited list call, eg:\n     *\n     *    for await (const item of client.items.list()) {\n     *      console.log(item)\n     *    }\n     */ async *[Symbol.asyncIterator]() {\n        const page = await this;\n        for await (const item of page){\n            yield item;\n        }\n    }\n}\nconst createResponseHeaders = (headers)=>{\n    return new Proxy(Object.fromEntries(// @ts-ignore\n    headers.entries()), {\n        get (target, name) {\n            const key = name.toString();\n            return target[key.toLowerCase()] || target[key];\n        }\n    });\n};\n// This is required so that we can determine if a given object matches the RequestOptions\n// type at runtime. While this requires duplication, it is enforced by the TypeScript\n// compiler such that any missing / extraneous keys will cause an error.\nconst requestOptionsKeys = {\n    method: true,\n    path: true,\n    query: true,\n    body: true,\n    headers: true,\n    maxRetries: true,\n    stream: true,\n    timeout: true,\n    httpAgent: true,\n    signal: true,\n    idempotencyKey: true,\n    __binaryResponse: true,\n    __streamClass: true\n};\nconst isRequestOptions = (obj)=>{\n    return typeof obj === \"object\" && obj !== null && !isEmptyObj(obj) && Object.keys(obj).every((k)=>hasOwn(requestOptionsKeys, k));\n};\nconst getPlatformProperties = ()=>{\n    if (typeof Deno !== \"undefined\" && Deno.build != null) {\n        return {\n            \"X-Stainless-Lang\": \"js\",\n            \"X-Stainless-Package-Version\": _version_mjs__WEBPACK_IMPORTED_MODULE_4__.VERSION,\n            \"X-Stainless-OS\": normalizePlatform(Deno.build.os),\n            \"X-Stainless-Arch\": normalizeArch(Deno.build.arch),\n            \"X-Stainless-Runtime\": \"deno\",\n            \"X-Stainless-Runtime-Version\": Deno.version\n        };\n    }\n    if (typeof EdgeRuntime !== \"undefined\") {\n        return {\n            \"X-Stainless-Lang\": \"js\",\n            \"X-Stainless-Package-Version\": _version_mjs__WEBPACK_IMPORTED_MODULE_4__.VERSION,\n            \"X-Stainless-OS\": \"Unknown\",\n            \"X-Stainless-Arch\": `other:${EdgeRuntime}`,\n            \"X-Stainless-Runtime\": \"edge\",\n            \"X-Stainless-Runtime-Version\": process.version\n        };\n    }\n    // Check if Node.js\n    if (Object.prototype.toString.call(typeof process !== \"undefined\" ? process : 0) === \"[object process]\") {\n        return {\n            \"X-Stainless-Lang\": \"js\",\n            \"X-Stainless-Package-Version\": _version_mjs__WEBPACK_IMPORTED_MODULE_4__.VERSION,\n            \"X-Stainless-OS\": normalizePlatform(process.platform),\n            \"X-Stainless-Arch\": normalizeArch(process.arch),\n            \"X-Stainless-Runtime\": \"node\",\n            \"X-Stainless-Runtime-Version\": process.version\n        };\n    }\n    const browserInfo = getBrowserInfo();\n    if (browserInfo) {\n        return {\n            \"X-Stainless-Lang\": \"js\",\n            \"X-Stainless-Package-Version\": _version_mjs__WEBPACK_IMPORTED_MODULE_4__.VERSION,\n            \"X-Stainless-OS\": \"Unknown\",\n            \"X-Stainless-Arch\": \"unknown\",\n            \"X-Stainless-Runtime\": `browser:${browserInfo.browser}`,\n            \"X-Stainless-Runtime-Version\": browserInfo.version\n        };\n    }\n    // TODO add support for Cloudflare workers, etc.\n    return {\n        \"X-Stainless-Lang\": \"js\",\n        \"X-Stainless-Package-Version\": _version_mjs__WEBPACK_IMPORTED_MODULE_4__.VERSION,\n        \"X-Stainless-OS\": \"Unknown\",\n        \"X-Stainless-Arch\": \"unknown\",\n        \"X-Stainless-Runtime\": \"unknown\",\n        \"X-Stainless-Runtime-Version\": \"unknown\"\n    };\n};\n// Note: modified from https://github.com/JS-DevTools/host-environment/blob/b1ab79ecde37db5d6e163c050e54fe7d287d7c92/src/isomorphic.browser.ts\nfunction getBrowserInfo() {\n    if (typeof navigator === \"undefined\" || !navigator) {\n        return null;\n    }\n    // NOTE: The order matters here!\n    const browserPatterns = [\n        {\n            key: \"edge\",\n            pattern: /Edge(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/\n        },\n        {\n            key: \"ie\",\n            pattern: /MSIE(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/\n        },\n        {\n            key: \"ie\",\n            pattern: /Trident(?:.*rv\\:(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/\n        },\n        {\n            key: \"chrome\",\n            pattern: /Chrome(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/\n        },\n        {\n            key: \"firefox\",\n            pattern: /Firefox(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/\n        },\n        {\n            key: \"safari\",\n            pattern: /(?:Version\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?(?:\\W+Mobile\\S*)?\\W+Safari/\n        }\n    ];\n    // Find the FIRST matching browser\n    for (const { key, pattern } of browserPatterns){\n        const match = pattern.exec(navigator.userAgent);\n        if (match) {\n            const major = match[1] || 0;\n            const minor = match[2] || 0;\n            const patch = match[3] || 0;\n            return {\n                browser: key,\n                version: `${major}.${minor}.${patch}`\n            };\n        }\n    }\n    return null;\n}\nconst normalizeArch = (arch)=>{\n    // Node docs:\n    // - https://nodejs.org/api/process.html#processarch\n    // Deno docs:\n    // - https://doc.deno.land/deno/stable/~/Deno.build\n    if (arch === \"x32\") return \"x32\";\n    if (arch === \"x86_64\" || arch === \"x64\") return \"x64\";\n    if (arch === \"arm\") return \"arm\";\n    if (arch === \"aarch64\" || arch === \"arm64\") return \"arm64\";\n    if (arch) return `other:${arch}`;\n    return \"unknown\";\n};\nconst normalizePlatform = (platform)=>{\n    // Node platforms:\n    // - https://nodejs.org/api/process.html#processplatform\n    // Deno platforms:\n    // - https://doc.deno.land/deno/stable/~/Deno.build\n    // - https://github.com/denoland/deno/issues/14799\n    platform = platform.toLowerCase();\n    // NOTE: this iOS check is untested and may not work\n    // Node does not work natively on IOS, there is a fork at\n    // https://github.com/nodejs-mobile/nodejs-mobile\n    // however it is unknown at the time of writing how to detect if it is running\n    if (platform.includes(\"ios\")) return \"iOS\";\n    if (platform === \"android\") return \"Android\";\n    if (platform === \"darwin\") return \"MacOS\";\n    if (platform === \"win32\") return \"Windows\";\n    if (platform === \"freebsd\") return \"FreeBSD\";\n    if (platform === \"openbsd\") return \"OpenBSD\";\n    if (platform === \"linux\") return \"Linux\";\n    if (platform) return `Other:${platform}`;\n    return \"Unknown\";\n};\nlet _platformHeaders;\nconst getPlatformHeaders = ()=>{\n    return _platformHeaders ?? (_platformHeaders = getPlatformProperties());\n};\nconst safeJSON = (text)=>{\n    try {\n        return JSON.parse(text);\n    } catch (err) {\n        return undefined;\n    }\n};\n// https://stackoverflow.com/a/19709846\nconst startsWithSchemeRegexp = new RegExp(\"^(?:[a-z]+:)?//\", \"i\");\nconst isAbsoluteURL = (url)=>{\n    return startsWithSchemeRegexp.test(url);\n};\nconst sleep = (ms)=>new Promise((resolve)=>setTimeout(resolve, ms));\nconst validatePositiveInteger = (name, n)=>{\n    if (typeof n !== \"number\" || !Number.isInteger(n)) {\n        throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.OpenAIError(`${name} must be an integer`);\n    }\n    if (n < 0) {\n        throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.OpenAIError(`${name} must be a positive integer`);\n    }\n    return n;\n};\nconst castToError = (err)=>{\n    if (err instanceof Error) return err;\n    return new Error(err);\n};\nconst ensurePresent = (value)=>{\n    if (value == null) throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.OpenAIError(`Expected a value to be given but received ${value} instead.`);\n    return value;\n};\n/**\n * Read an environment variable.\n *\n * Trims beginning and trailing whitespace.\n *\n * Will return undefined if the environment variable doesn't exist or cannot be accessed.\n */ const readEnv = (env)=>{\n    if (typeof process !== \"undefined\") {\n        return process.env?.[env]?.trim() ?? undefined;\n    }\n    if (typeof Deno !== \"undefined\") {\n        return Deno.env?.get?.(env)?.trim();\n    }\n    return undefined;\n};\nconst coerceInteger = (value)=>{\n    if (typeof value === \"number\") return Math.round(value);\n    if (typeof value === \"string\") return parseInt(value, 10);\n    throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.OpenAIError(`Could not coerce ${value} (type: ${typeof value}) into a number`);\n};\nconst coerceFloat = (value)=>{\n    if (typeof value === \"number\") return value;\n    if (typeof value === \"string\") return parseFloat(value);\n    throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.OpenAIError(`Could not coerce ${value} (type: ${typeof value}) into a number`);\n};\nconst coerceBoolean = (value)=>{\n    if (typeof value === \"boolean\") return value;\n    if (typeof value === \"string\") return value === \"true\";\n    return Boolean(value);\n};\nconst maybeCoerceInteger = (value)=>{\n    if (value === undefined) {\n        return undefined;\n    }\n    return coerceInteger(value);\n};\nconst maybeCoerceFloat = (value)=>{\n    if (value === undefined) {\n        return undefined;\n    }\n    return coerceFloat(value);\n};\nconst maybeCoerceBoolean = (value)=>{\n    if (value === undefined) {\n        return undefined;\n    }\n    return coerceBoolean(value);\n};\n// https://stackoverflow.com/a/34491287\nfunction isEmptyObj(obj) {\n    if (!obj) return true;\n    for(const _k in obj)return false;\n    return true;\n}\n// https://eslint.org/docs/latest/rules/no-prototype-builtins\nfunction hasOwn(obj, key) {\n    return Object.prototype.hasOwnProperty.call(obj, key);\n}\n/**\n * Copies headers from \"newHeaders\" onto \"targetHeaders\",\n * using lower-case for all properties,\n * ignoring any keys with undefined values,\n * and deleting any keys with null values.\n */ function applyHeadersMut(targetHeaders, newHeaders) {\n    for(const k in newHeaders){\n        if (!hasOwn(newHeaders, k)) continue;\n        const lowerKey = k.toLowerCase();\n        if (!lowerKey) continue;\n        const val = newHeaders[k];\n        if (val === null) {\n            delete targetHeaders[lowerKey];\n        } else if (val !== undefined) {\n            targetHeaders[lowerKey] = val;\n        }\n    }\n}\nfunction debug(action, ...args) {\n    if (typeof process !== \"undefined\" && process.env[\"DEBUG\"] === \"true\") {\n        console.log(`OpenAI:DEBUG:${action}`, ...args);\n    }\n}\n/**\n * https://stackoverflow.com/a/2117523\n */ const uuid4 = ()=>{\n    return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c)=>{\n        const r = Math.random() * 16 | 0;\n        const v = c === \"x\" ? r : r & 0x3 | 0x8;\n        return v.toString(16);\n    });\n};\nconst isRunningInBrowser = ()=>{\n    return(// @ts-ignore\n     false && // @ts-ignore\n    0);\n};\nconst isHeadersProtocol = (headers)=>{\n    return typeof headers?.get === \"function\";\n};\nconst getRequiredHeader = (headers, header)=>{\n    const lowerCasedHeader = header.toLowerCase();\n    if (isHeadersProtocol(headers)) {\n        // to deal with the case where the header looks like Stainless-Event-Id\n        const intercapsHeader = header[0]?.toUpperCase() + header.substring(1).replace(/([^\\w])(\\w)/g, (_m, g1, g2)=>g1 + g2.toUpperCase());\n        for (const key of [\n            header,\n            lowerCasedHeader,\n            header.toUpperCase(),\n            intercapsHeader\n        ]){\n            const value = headers.get(key);\n            if (value) {\n                return value;\n            }\n        }\n    }\n    for (const [key, value] of Object.entries(headers)){\n        if (key.toLowerCase() === lowerCasedHeader) {\n            if (Array.isArray(value)) {\n                if (value.length <= 1) return value[0];\n                console.warn(`Received ${value.length} entries for the ${header} header, using the first entry.`);\n                return value[0];\n            }\n            return value;\n        }\n    }\n    throw new Error(`Could not find ${header} header`);\n};\n/**\n * Encodes a string to Base64 format.\n */ const toBase64 = (str)=>{\n    if (!str) return \"\";\n    if (typeof Buffer !== \"undefined\") {\n        return Buffer.from(str).toString(\"base64\");\n    }\n    if (typeof btoa !== \"undefined\") {\n        return btoa(str);\n    }\n    throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.OpenAIError(\"Cannot generate b64 string; Expected `Buffer` or `btoa` to be defined\");\n};\nfunction isObj(obj) {\n    return obj != null && typeof obj === \"object\" && !Array.isArray(obj);\n} //# sourceMappingURL=core.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2NvcmUubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLElBQUlBLHlCQUF5QixTQUFLLElBQUksU0FBSSxDQUFDQSxzQkFBc0IsSUFBSyxTQUFVQyxRQUFRLEVBQUVDLEtBQUssRUFBRUMsS0FBSyxFQUFFQyxJQUFJLEVBQUVDLENBQUM7SUFDM0csSUFBSUQsU0FBUyxLQUFLLE1BQU0sSUFBSUUsVUFBVTtJQUN0QyxJQUFJRixTQUFTLE9BQU8sQ0FBQ0MsR0FBRyxNQUFNLElBQUlDLFVBQVU7SUFDNUMsSUFBSSxPQUFPSixVQUFVLGFBQWFELGFBQWFDLFNBQVMsQ0FBQ0csSUFBSSxDQUFDSCxNQUFNSyxHQUFHLENBQUNOLFdBQVcsTUFBTSxJQUFJSyxVQUFVO0lBQ3ZHLE9BQU8sU0FBVSxNQUFNRCxFQUFFRyxJQUFJLENBQUNQLFVBQVVFLFNBQVNFLElBQUlBLEVBQUVGLEtBQUssR0FBR0EsUUFBUUQsTUFBTU8sR0FBRyxDQUFDUixVQUFVRSxRQUFTQTtBQUN4RztBQUNBLElBQUlPLHlCQUF5QixTQUFLLElBQUksU0FBSSxDQUFDQSxzQkFBc0IsSUFBSyxTQUFVVCxRQUFRLEVBQUVDLEtBQUssRUFBRUUsSUFBSSxFQUFFQyxDQUFDO0lBQ3BHLElBQUlELFNBQVMsT0FBTyxDQUFDQyxHQUFHLE1BQU0sSUFBSUMsVUFBVTtJQUM1QyxJQUFJLE9BQU9KLFVBQVUsYUFBYUQsYUFBYUMsU0FBUyxDQUFDRyxJQUFJLENBQUNILE1BQU1LLEdBQUcsQ0FBQ04sV0FBVyxNQUFNLElBQUlLLFVBQVU7SUFDdkcsT0FBT0YsU0FBUyxNQUFNQyxJQUFJRCxTQUFTLE1BQU1DLEVBQUVHLElBQUksQ0FBQ1AsWUFBWUksSUFBSUEsRUFBRUYsS0FBSyxHQUFHRCxNQUFNUyxHQUFHLENBQUNWO0FBQ3hGO0FBQ0EsSUFBSVc7QUFDb0M7QUFDQztBQUM4RTtBQUN2QztBQUNoQztBQUMy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LElBQUk1UixtREFBV0EsQ0FBQztBQUMxQixFQUFFO0FBQ0ssU0FBUzhSLE1BQU03RSxHQUFHO0lBQ3JCLE9BQU9BLE9BQU8sUUFBUSxPQUFPQSxRQUFRLFlBQVksQ0FBQ25HLE1BQU13QyxPQUFPLENBQUMyRDtBQUNwRSxFQUNBLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWFwcC8uL25vZGVfbW9kdWxlcy9vcGVuYWkvY29yZS5tanM/N2Q4OCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19jbGFzc1ByaXZhdGVGaWVsZFNldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZFNldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwgdmFsdWUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJtXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIG1ldGhvZCBpcyBub3Qgd3JpdGFibGVcIik7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgc2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHdyaXRlIHByaXZhdGUgbWVtYmVyIHRvIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIChraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlciwgdmFsdWUpIDogZiA/IGYudmFsdWUgPSB2YWx1ZSA6IHN0YXRlLnNldChyZWNlaXZlciwgdmFsdWUpKSwgdmFsdWU7XG59O1xudmFyIF9fY2xhc3NQcml2YXRlRmllbGRHZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRHZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlciBmcm9tIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcbn07XG52YXIgX0Fic3RyYWN0UGFnZV9jbGllbnQ7XG5pbXBvcnQgeyBWRVJTSU9OIH0gZnJvbSBcIi4vdmVyc2lvbi5tanNcIjtcbmltcG9ydCB7IFN0cmVhbSB9IGZyb20gXCIuL3N0cmVhbWluZy5tanNcIjtcbmltcG9ydCB7IE9wZW5BSUVycm9yLCBBUElFcnJvciwgQVBJQ29ubmVjdGlvbkVycm9yLCBBUElDb25uZWN0aW9uVGltZW91dEVycm9yLCBBUElVc2VyQWJvcnRFcnJvciwgfSBmcm9tIFwiLi9lcnJvci5tanNcIjtcbmltcG9ydCB7IGtpbmQgYXMgc2hpbXNLaW5kLCBnZXREZWZhdWx0QWdlbnQsIGZldGNoLCB9IGZyb20gXCIuL19zaGltcy9pbmRleC5tanNcIjtcbmltcG9ydCB7IGlzTXVsdGlwYXJ0Qm9keSB9IGZyb20gXCIuL3VwbG9hZHMubWpzXCI7XG5leHBvcnQgeyBtYXliZU11bHRpcGFydEZvcm1SZXF1ZXN0T3B0aW9ucywgbXVsdGlwYXJ0Rm9ybVJlcXVlc3RPcHRpb25zLCBjcmVhdGVGb3JtLCB9IGZyb20gXCIuL3VwbG9hZHMubWpzXCI7XG5hc3luYyBmdW5jdGlvbiBkZWZhdWx0UGFyc2VSZXNwb25zZShwcm9wcykge1xuICAgIGNvbnN0IHsgcmVzcG9uc2UgfSA9IHByb3BzO1xuICAgIGlmIChwcm9wcy5vcHRpb25zLnN0cmVhbSkge1xuICAgICAgICBkZWJ1ZygncmVzcG9uc2UnLCByZXNwb25zZS5zdGF0dXMsIHJlc3BvbnNlLnVybCwgcmVzcG9uc2UuaGVhZGVycywgcmVzcG9uc2UuYm9keSk7XG4gICAgICAgIC8vIE5vdGU6IHRoZXJlIGlzIGFuIGludmFyaWFudCBoZXJlIHRoYXQgaXNuJ3QgcmVwcmVzZW50ZWQgaW4gdGhlIHR5cGUgc3lzdGVtXG4gICAgICAgIC8vIHRoYXQgaWYgeW91IHNldCBgc3RyZWFtOiB0cnVlYCB0aGUgcmVzcG9uc2UgdHlwZSBtdXN0IGFsc28gYmUgYFN0cmVhbTxUPmBcbiAgICAgICAgaWYgKHByb3BzLm9wdGlvbnMuX19zdHJlYW1DbGFzcykge1xuICAgICAgICAgICAgcmV0dXJuIHByb3BzLm9wdGlvbnMuX19zdHJlYW1DbGFzcy5mcm9tU1NFUmVzcG9uc2UocmVzcG9uc2UsIHByb3BzLmNvbnRyb2xsZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBTdHJlYW0uZnJvbVNTRVJlc3BvbnNlKHJlc3BvbnNlLCBwcm9wcy5jb250cm9sbGVyKTtcbiAgICB9XG4gICAgLy8gZmV0Y2ggcmVmdXNlcyB0byByZWFkIHRoZSBib2R5IHdoZW4gdGhlIHN0YXR1cyBjb2RlIGlzIDIwNC5cbiAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSAyMDQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmIChwcm9wcy5vcHRpb25zLl9fYmluYXJ5UmVzcG9uc2UpIHtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50VHlwZSA9IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCdjb250ZW50LXR5cGUnKTtcbiAgICBpZiAoY29udGVudFR5cGU/LmluY2x1ZGVzKCdhcHBsaWNhdGlvbi9qc29uJykpIHtcbiAgICAgICAgY29uc3QganNvbiA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgZGVidWcoJ3Jlc3BvbnNlJywgcmVzcG9uc2Uuc3RhdHVzLCByZXNwb25zZS51cmwsIHJlc3BvbnNlLmhlYWRlcnMsIGpzb24pO1xuICAgICAgICByZXR1cm4ganNvbjtcbiAgICB9XG4gICAgY29uc3QgdGV4dCA9IGF3YWl0IHJlc3BvbnNlLnRleHQoKTtcbiAgICBkZWJ1ZygncmVzcG9uc2UnLCByZXNwb25zZS5zdGF0dXMsIHJlc3BvbnNlLnVybCwgcmVzcG9uc2UuaGVhZGVycywgdGV4dCk7XG4gICAgLy8gVE9ETyBoYW5kbGUgYmxvYiwgYXJyYXlidWZmZXIsIG90aGVyIGNvbnRlbnQgdHlwZXMsIGV0Yy5cbiAgICByZXR1cm4gdGV4dDtcbn1cbi8qKlxuICogQSBzdWJjbGFzcyBvZiBgUHJvbWlzZWAgcHJvdmlkaW5nIGFkZGl0aW9uYWwgaGVscGVyIG1ldGhvZHNcbiAqIGZvciBpbnRlcmFjdGluZyB3aXRoIHRoZSBTREsuXG4gKi9cbmV4cG9ydCBjbGFzcyBBUElQcm9taXNlIGV4dGVuZHMgUHJvbWlzZSB7XG4gICAgY29uc3RydWN0b3IocmVzcG9uc2VQcm9taXNlLCBwYXJzZVJlc3BvbnNlID0gZGVmYXVsdFBhcnNlUmVzcG9uc2UpIHtcbiAgICAgICAgc3VwZXIoKHJlc29sdmUpID0+IHtcbiAgICAgICAgICAgIC8vIHRoaXMgaXMgbWF5YmUgYSBiaXQgd2VpcmQgYnV0IHRoaXMgaGFzIHRvIGJlIGEgbm8tb3AgdG8gbm90IGltcGxpY2l0bHlcbiAgICAgICAgICAgIC8vIHBhcnNlIHRoZSByZXNwb25zZSBib2R5OyBpbnN0ZWFkIC50aGVuLCAuY2F0Y2gsIC5maW5hbGx5IGFyZSBvdmVycmlkZGVuXG4gICAgICAgICAgICAvLyB0byBwYXJzZSB0aGUgcmVzcG9uc2VcbiAgICAgICAgICAgIHJlc29sdmUobnVsbCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnJlc3BvbnNlUHJvbWlzZSA9IHJlc3BvbnNlUHJvbWlzZTtcbiAgICAgICAgdGhpcy5wYXJzZVJlc3BvbnNlID0gcGFyc2VSZXNwb25zZTtcbiAgICB9XG4gICAgX3RoZW5VbndyYXAodHJhbnNmb3JtKSB7XG4gICAgICAgIHJldHVybiBuZXcgQVBJUHJvbWlzZSh0aGlzLnJlc3BvbnNlUHJvbWlzZSwgYXN5bmMgKHByb3BzKSA9PiB0cmFuc2Zvcm0oYXdhaXQgdGhpcy5wYXJzZVJlc3BvbnNlKHByb3BzKSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSByYXcgYFJlc3BvbnNlYCBpbnN0YW5jZSBpbnN0ZWFkIG9mIHBhcnNpbmcgdGhlIHJlc3BvbnNlXG4gICAgICogZGF0YS5cbiAgICAgKlxuICAgICAqIElmIHlvdSB3YW50IHRvIHBhcnNlIHRoZSByZXNwb25zZSBib2R5IGJ1dCBzdGlsbCBnZXQgdGhlIGBSZXNwb25zZWBcbiAgICAgKiBpbnN0YW5jZSwgeW91IGNhbiB1c2Uge0BsaW5rIHdpdGhSZXNwb25zZSgpfS5cbiAgICAgKlxuICAgICAqIPCfkYsgR2V0dGluZyB0aGUgd3JvbmcgVHlwZVNjcmlwdCB0eXBlIGZvciBgUmVzcG9uc2VgP1xuICAgICAqIFRyeSBzZXR0aW5nIGBcIm1vZHVsZVJlc29sdXRpb25cIjogXCJOb2RlTmV4dFwiYCBpZiB5b3UgY2FuLFxuICAgICAqIG9yIGFkZCBvbmUgb2YgdGhlc2UgaW1wb3J0cyBiZWZvcmUgeW91ciBmaXJzdCBgaW1wb3J0IOKApiBmcm9tICdvcGVuYWknYDpcbiAgICAgKiAtIGBpbXBvcnQgJ29wZW5haS9zaGltcy9ub2RlJ2AgKGlmIHlvdSdyZSBydW5uaW5nIG9uIE5vZGUpXG4gICAgICogLSBgaW1wb3J0ICdvcGVuYWkvc2hpbXMvd2ViJ2AgKG90aGVyd2lzZSlcbiAgICAgKi9cbiAgICBhc1Jlc3BvbnNlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXNwb25zZVByb21pc2UudGhlbigocCkgPT4gcC5yZXNwb25zZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHBhcnNlZCByZXNwb25zZSBkYXRhIGFuZCB0aGUgcmF3IGBSZXNwb25zZWAgaW5zdGFuY2UuXG4gICAgICpcbiAgICAgKiBJZiB5b3UganVzdCB3YW50IHRvIGdldCB0aGUgcmF3IGBSZXNwb25zZWAgaW5zdGFuY2Ugd2l0aG91dCBwYXJzaW5nIGl0LFxuICAgICAqIHlvdSBjYW4gdXNlIHtAbGluayBhc1Jlc3BvbnNlKCl9LlxuICAgICAqXG4gICAgICpcbiAgICAgKiDwn5GLIEdldHRpbmcgdGhlIHdyb25nIFR5cGVTY3JpcHQgdHlwZSBmb3IgYFJlc3BvbnNlYD9cbiAgICAgKiBUcnkgc2V0dGluZyBgXCJtb2R1bGVSZXNvbHV0aW9uXCI6IFwiTm9kZU5leHRcImAgaWYgeW91IGNhbixcbiAgICAgKiBvciBhZGQgb25lIG9mIHRoZXNlIGltcG9ydHMgYmVmb3JlIHlvdXIgZmlyc3QgYGltcG9ydCDigKYgZnJvbSAnb3BlbmFpJ2A6XG4gICAgICogLSBgaW1wb3J0ICdvcGVuYWkvc2hpbXMvbm9kZSdgIChpZiB5b3UncmUgcnVubmluZyBvbiBOb2RlKVxuICAgICAqIC0gYGltcG9ydCAnb3BlbmFpL3NoaW1zL3dlYidgIChvdGhlcndpc2UpXG4gICAgICovXG4gICAgYXN5bmMgd2l0aFJlc3BvbnNlKCkge1xuICAgICAgICBjb25zdCBbZGF0YSwgcmVzcG9uc2VdID0gYXdhaXQgUHJvbWlzZS5hbGwoW3RoaXMucGFyc2UoKSwgdGhpcy5hc1Jlc3BvbnNlKCldKTtcbiAgICAgICAgcmV0dXJuIHsgZGF0YSwgcmVzcG9uc2UgfTtcbiAgICB9XG4gICAgcGFyc2UoKSB7XG4gICAgICAgIGlmICghdGhpcy5wYXJzZWRQcm9taXNlKSB7XG4gICAgICAgICAgICB0aGlzLnBhcnNlZFByb21pc2UgPSB0aGlzLnJlc3BvbnNlUHJvbWlzZS50aGVuKHRoaXMucGFyc2VSZXNwb25zZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VkUHJvbWlzZTtcbiAgICB9XG4gICAgdGhlbihvbmZ1bGZpbGxlZCwgb25yZWplY3RlZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZSgpLnRoZW4ob25mdWxmaWxsZWQsIG9ucmVqZWN0ZWQpO1xuICAgIH1cbiAgICBjYXRjaChvbnJlamVjdGVkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlKCkuY2F0Y2gob25yZWplY3RlZCk7XG4gICAgfVxuICAgIGZpbmFsbHkob25maW5hbGx5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlKCkuZmluYWxseShvbmZpbmFsbHkpO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBBUElDbGllbnQge1xuICAgIGNvbnN0cnVjdG9yKHsgYmFzZVVSTCwgbWF4UmV0cmllcyA9IDIsIHRpbWVvdXQgPSA2MDAwMDAsIC8vIDEwIG1pbnV0ZXNcbiAgICBodHRwQWdlbnQsIGZldGNoOiBvdmVycmlkZW5GZXRjaCwgfSkge1xuICAgICAgICB0aGlzLmJhc2VVUkwgPSBiYXNlVVJMO1xuICAgICAgICB0aGlzLm1heFJldHJpZXMgPSB2YWxpZGF0ZVBvc2l0aXZlSW50ZWdlcignbWF4UmV0cmllcycsIG1heFJldHJpZXMpO1xuICAgICAgICB0aGlzLnRpbWVvdXQgPSB2YWxpZGF0ZVBvc2l0aXZlSW50ZWdlcigndGltZW91dCcsIHRpbWVvdXQpO1xuICAgICAgICB0aGlzLmh0dHBBZ2VudCA9IGh0dHBBZ2VudDtcbiAgICAgICAgdGhpcy5mZXRjaCA9IG92ZXJyaWRlbkZldGNoID8/IGZldGNoO1xuICAgIH1cbiAgICBhdXRoSGVhZGVycyhvcHRzKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogT3ZlcnJpZGUgdGhpcyB0byBhZGQgeW91ciBvd24gZGVmYXVsdCBoZWFkZXJzLCBmb3IgZXhhbXBsZTpcbiAgICAgKlxuICAgICAqICB7XG4gICAgICogICAgLi4uc3VwZXIuZGVmYXVsdEhlYWRlcnMoKSxcbiAgICAgKiAgICBBdXRob3JpemF0aW9uOiAnQmVhcmVyIDEyMycsXG4gICAgICogIH1cbiAgICAgKi9cbiAgICBkZWZhdWx0SGVhZGVycyhvcHRzKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBBY2NlcHQ6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAnVXNlci1BZ2VudCc6IHRoaXMuZ2V0VXNlckFnZW50KCksXG4gICAgICAgICAgICAuLi5nZXRQbGF0Zm9ybUhlYWRlcnMoKSxcbiAgICAgICAgICAgIC4uLnRoaXMuYXV0aEhlYWRlcnMob3B0cyksXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE92ZXJyaWRlIHRoaXMgdG8gYWRkIHlvdXIgb3duIGhlYWRlcnMgdmFsaWRhdGlvbjpcbiAgICAgKi9cbiAgICB2YWxpZGF0ZUhlYWRlcnMoaGVhZGVycywgY3VzdG9tSGVhZGVycykgeyB9XG4gICAgZGVmYXVsdElkZW1wb3RlbmN5S2V5KCkge1xuICAgICAgICByZXR1cm4gYHN0YWlubGVzcy1ub2RlLXJldHJ5LSR7dXVpZDQoKX1gO1xuICAgIH1cbiAgICBnZXQocGF0aCwgb3B0cykge1xuICAgICAgICByZXR1cm4gdGhpcy5tZXRob2RSZXF1ZXN0KCdnZXQnLCBwYXRoLCBvcHRzKTtcbiAgICB9XG4gICAgcG9zdChwYXRoLCBvcHRzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1ldGhvZFJlcXVlc3QoJ3Bvc3QnLCBwYXRoLCBvcHRzKTtcbiAgICB9XG4gICAgcGF0Y2gocGF0aCwgb3B0cykge1xuICAgICAgICByZXR1cm4gdGhpcy5tZXRob2RSZXF1ZXN0KCdwYXRjaCcsIHBhdGgsIG9wdHMpO1xuICAgIH1cbiAgICBwdXQocGF0aCwgb3B0cykge1xuICAgICAgICByZXR1cm4gdGhpcy5tZXRob2RSZXF1ZXN0KCdwdXQnLCBwYXRoLCBvcHRzKTtcbiAgICB9XG4gICAgZGVsZXRlKHBhdGgsIG9wdHMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWV0aG9kUmVxdWVzdCgnZGVsZXRlJywgcGF0aCwgb3B0cyk7XG4gICAgfVxuICAgIG1ldGhvZFJlcXVlc3QobWV0aG9kLCBwYXRoLCBvcHRzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QoUHJvbWlzZS5yZXNvbHZlKG9wdHMpLnRoZW4oKG9wdHMpID0+ICh7IG1ldGhvZCwgcGF0aCwgLi4ub3B0cyB9KSkpO1xuICAgIH1cbiAgICBnZXRBUElMaXN0KHBhdGgsIFBhZ2UsIG9wdHMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdEFQSUxpc3QoUGFnZSwgeyBtZXRob2Q6ICdnZXQnLCBwYXRoLCAuLi5vcHRzIH0pO1xuICAgIH1cbiAgICBjYWxjdWxhdGVDb250ZW50TGVuZ3RoKGJvZHkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBib2R5ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBCdWZmZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEJ1ZmZlci5ieXRlTGVuZ3RoKGJvZHksICd1dGY4JykudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgVGV4dEVuY29kZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZW5jb2RlciA9IG5ldyBUZXh0RW5jb2RlcigpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGVuY29kZWQgPSBlbmNvZGVyLmVuY29kZShib2R5KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZW5jb2RlZC5sZW5ndGgudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgYnVpbGRSZXF1ZXN0KG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgeyBtZXRob2QsIHBhdGgsIHF1ZXJ5LCBoZWFkZXJzOiBoZWFkZXJzID0ge30gfSA9IG9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGJvZHkgPSBpc011bHRpcGFydEJvZHkob3B0aW9ucy5ib2R5KSA/IG9wdGlvbnMuYm9keS5ib2R5XG4gICAgICAgICAgICA6IG9wdGlvbnMuYm9keSA/IEpTT04uc3RyaW5naWZ5KG9wdGlvbnMuYm9keSwgbnVsbCwgMilcbiAgICAgICAgICAgICAgICA6IG51bGw7XG4gICAgICAgIGNvbnN0IGNvbnRlbnRMZW5ndGggPSB0aGlzLmNhbGN1bGF0ZUNvbnRlbnRMZW5ndGgoYm9keSk7XG4gICAgICAgIGNvbnN0IHVybCA9IHRoaXMuYnVpbGRVUkwocGF0aCwgcXVlcnkpO1xuICAgICAgICBpZiAoJ3RpbWVvdXQnIGluIG9wdGlvbnMpXG4gICAgICAgICAgICB2YWxpZGF0ZVBvc2l0aXZlSW50ZWdlcigndGltZW91dCcsIG9wdGlvbnMudGltZW91dCk7XG4gICAgICAgIGNvbnN0IHRpbWVvdXQgPSBvcHRpb25zLnRpbWVvdXQgPz8gdGhpcy50aW1lb3V0O1xuICAgICAgICBjb25zdCBodHRwQWdlbnQgPSBvcHRpb25zLmh0dHBBZ2VudCA/PyB0aGlzLmh0dHBBZ2VudCA/PyBnZXREZWZhdWx0QWdlbnQodXJsKTtcbiAgICAgICAgY29uc3QgbWluQWdlbnRUaW1lb3V0ID0gdGltZW91dCArIDEwMDA7XG4gICAgICAgIGlmICh0eXBlb2YgaHR0cEFnZW50Py5vcHRpb25zPy50aW1lb3V0ID09PSAnbnVtYmVyJyAmJlxuICAgICAgICAgICAgbWluQWdlbnRUaW1lb3V0ID4gKGh0dHBBZ2VudC5vcHRpb25zLnRpbWVvdXQgPz8gMCkpIHtcbiAgICAgICAgICAgIC8vIEFsbG93IGFueSBnaXZlbiByZXF1ZXN0IHRvIGJ1bXAgb3VyIGFnZW50IGFjdGl2ZSBzb2NrZXQgdGltZW91dC5cbiAgICAgICAgICAgIC8vIFRoaXMgbWF5IHNlZW0gc3RyYW5nZSwgYnV0IGxlYWtpbmcgYWN0aXZlIHNvY2tldHMgc2hvdWxkIGJlIHJhcmUgYW5kIG5vdCBwYXJ0aWN1bGFybHkgcHJvYmxlbWF0aWMsXG4gICAgICAgICAgICAvLyBhbmQgd2l0aG91dCBtdXRhdGluZyBhZ2VudCB3ZSB3b3VsZCBuZWVkIHRvIGNyZWF0ZSBtb3JlIG9mIHRoZW0uXG4gICAgICAgICAgICAvLyBUaGlzIHRyYWRlb2ZmIG9wdGltaXplcyBmb3IgcGVyZm9ybWFuY2UuXG4gICAgICAgICAgICBodHRwQWdlbnQub3B0aW9ucy50aW1lb3V0ID0gbWluQWdlbnRUaW1lb3V0O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmlkZW1wb3RlbmN5SGVhZGVyICYmIG1ldGhvZCAhPT0gJ2dldCcpIHtcbiAgICAgICAgICAgIGlmICghb3B0aW9ucy5pZGVtcG90ZW5jeUtleSlcbiAgICAgICAgICAgICAgICBvcHRpb25zLmlkZW1wb3RlbmN5S2V5ID0gdGhpcy5kZWZhdWx0SWRlbXBvdGVuY3lLZXkoKTtcbiAgICAgICAgICAgIGhlYWRlcnNbdGhpcy5pZGVtcG90ZW5jeUhlYWRlcl0gPSBvcHRpb25zLmlkZW1wb3RlbmN5S2V5O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlcUhlYWRlcnMgPSB0aGlzLmJ1aWxkSGVhZGVycyh7IG9wdGlvbnMsIGhlYWRlcnMsIGNvbnRlbnRMZW5ndGggfSk7XG4gICAgICAgIGNvbnN0IHJlcSA9IHtcbiAgICAgICAgICAgIG1ldGhvZCxcbiAgICAgICAgICAgIC4uLihib2R5ICYmIHsgYm9keTogYm9keSB9KSxcbiAgICAgICAgICAgIGhlYWRlcnM6IHJlcUhlYWRlcnMsXG4gICAgICAgICAgICAuLi4oaHR0cEFnZW50ICYmIHsgYWdlbnQ6IGh0dHBBZ2VudCB9KSxcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUgbm9kZS1mZXRjaCB1c2VzIGEgY3VzdG9tIEFib3J0U2lnbmFsIHR5cGUgdGhhdCBpc1xuICAgICAgICAgICAgLy8gbm90IGNvbXBhdGlibGUgd2l0aCBzdGFuZGFyZCB3ZWIgdHlwZXNcbiAgICAgICAgICAgIHNpZ25hbDogb3B0aW9ucy5zaWduYWwgPz8gbnVsbCxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHsgcmVxLCB1cmwsIHRpbWVvdXQgfTtcbiAgICB9XG4gICAgYnVpbGRIZWFkZXJzKHsgb3B0aW9ucywgaGVhZGVycywgY29udGVudExlbmd0aCwgfSkge1xuICAgICAgICBjb25zdCByZXFIZWFkZXJzID0ge307XG4gICAgICAgIGlmIChjb250ZW50TGVuZ3RoKSB7XG4gICAgICAgICAgICByZXFIZWFkZXJzWydjb250ZW50LWxlbmd0aCddID0gY29udGVudExlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkZWZhdWx0SGVhZGVycyA9IHRoaXMuZGVmYXVsdEhlYWRlcnMob3B0aW9ucyk7XG4gICAgICAgIGFwcGx5SGVhZGVyc011dChyZXFIZWFkZXJzLCBkZWZhdWx0SGVhZGVycyk7XG4gICAgICAgIGFwcGx5SGVhZGVyc011dChyZXFIZWFkZXJzLCBoZWFkZXJzKTtcbiAgICAgICAgLy8gbGV0IGJ1aWx0aW4gZmV0Y2ggc2V0IHRoZSBDb250ZW50LVR5cGUgZm9yIG11bHRpcGFydCBib2RpZXNcbiAgICAgICAgaWYgKGlzTXVsdGlwYXJ0Qm9keShvcHRpb25zLmJvZHkpICYmIHNoaW1zS2luZCAhPT0gJ25vZGUnKSB7XG4gICAgICAgICAgICBkZWxldGUgcmVxSGVhZGVyc1snY29udGVudC10eXBlJ107XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy52YWxpZGF0ZUhlYWRlcnMocmVxSGVhZGVycywgaGVhZGVycyk7XG4gICAgICAgIHJldHVybiByZXFIZWFkZXJzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVc2VkIGFzIGEgY2FsbGJhY2sgZm9yIG11dGF0aW5nIHRoZSBnaXZlbiBgRmluYWxSZXF1ZXN0T3B0aW9uc2Agb2JqZWN0LlxuICAgICAqL1xuICAgIGFzeW5jIHByZXBhcmVPcHRpb25zKG9wdGlvbnMpIHsgfVxuICAgIC8qKlxuICAgICAqIFVzZWQgYXMgYSBjYWxsYmFjayBmb3IgbXV0YXRpbmcgdGhlIGdpdmVuIGBSZXF1ZXN0SW5pdGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogVGhpcyBpcyB1c2VmdWwgZm9yIGNhc2VzIHdoZXJlIHlvdSB3YW50IHRvIGFkZCBjZXJ0YWluIGhlYWRlcnMgYmFzZWQgb2ZmIG9mXG4gICAgICogdGhlIHJlcXVlc3QgcHJvcGVydGllcywgZS5nLiBgbWV0aG9kYCBvciBgdXJsYC5cbiAgICAgKi9cbiAgICBhc3luYyBwcmVwYXJlUmVxdWVzdChyZXF1ZXN0LCB7IHVybCwgb3B0aW9ucyB9KSB7IH1cbiAgICBwYXJzZUhlYWRlcnMoaGVhZGVycykge1xuICAgICAgICByZXR1cm4gKCFoZWFkZXJzID8ge31cbiAgICAgICAgICAgIDogU3ltYm9sLml0ZXJhdG9yIGluIGhlYWRlcnMgP1xuICAgICAgICAgICAgICAgIE9iamVjdC5mcm9tRW50cmllcyhBcnJheS5mcm9tKGhlYWRlcnMpLm1hcCgoaGVhZGVyKSA9PiBbLi4uaGVhZGVyXSkpXG4gICAgICAgICAgICAgICAgOiB7IC4uLmhlYWRlcnMgfSk7XG4gICAgfVxuICAgIG1ha2VTdGF0dXNFcnJvcihzdGF0dXMsIGVycm9yLCBtZXNzYWdlLCBoZWFkZXJzKSB7XG4gICAgICAgIHJldHVybiBBUElFcnJvci5nZW5lcmF0ZShzdGF0dXMsIGVycm9yLCBtZXNzYWdlLCBoZWFkZXJzKTtcbiAgICB9XG4gICAgcmVxdWVzdChvcHRpb25zLCByZW1haW5pbmdSZXRyaWVzID0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbmV3IEFQSVByb21pc2UodGhpcy5tYWtlUmVxdWVzdChvcHRpb25zLCByZW1haW5pbmdSZXRyaWVzKSk7XG4gICAgfVxuICAgIGFzeW5jIG1ha2VSZXF1ZXN0KG9wdGlvbnNJbnB1dCwgcmV0cmllc1JlbWFpbmluZykge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gYXdhaXQgb3B0aW9uc0lucHV0O1xuICAgICAgICBpZiAocmV0cmllc1JlbWFpbmluZyA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXRyaWVzUmVtYWluaW5nID0gb3B0aW9ucy5tYXhSZXRyaWVzID8/IHRoaXMubWF4UmV0cmllcztcbiAgICAgICAgfVxuICAgICAgICBhd2FpdCB0aGlzLnByZXBhcmVPcHRpb25zKG9wdGlvbnMpO1xuICAgICAgICBjb25zdCB7IHJlcSwgdXJsLCB0aW1lb3V0IH0gPSB0aGlzLmJ1aWxkUmVxdWVzdChvcHRpb25zKTtcbiAgICAgICAgYXdhaXQgdGhpcy5wcmVwYXJlUmVxdWVzdChyZXEsIHsgdXJsLCBvcHRpb25zIH0pO1xuICAgICAgICBkZWJ1ZygncmVxdWVzdCcsIHVybCwgb3B0aW9ucywgcmVxLmhlYWRlcnMpO1xuICAgICAgICBpZiAob3B0aW9ucy5zaWduYWw/LmFib3J0ZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBBUElVc2VyQWJvcnRFcnJvcigpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5mZXRjaFdpdGhUaW1lb3V0KHVybCwgcmVxLCB0aW1lb3V0LCBjb250cm9sbGVyKS5jYXRjaChjYXN0VG9FcnJvcik7XG4gICAgICAgIGlmIChyZXNwb25zZSBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5zaWduYWw/LmFib3J0ZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQVBJVXNlckFib3J0RXJyb3IoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyZXRyaWVzUmVtYWluaW5nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmV0cnlSZXF1ZXN0KG9wdGlvbnMsIHJldHJpZXNSZW1haW5pbmcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLm5hbWUgPT09ICdBYm9ydEVycm9yJykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBBUElDb25uZWN0aW9uVGltZW91dEVycm9yKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBuZXcgQVBJQ29ubmVjdGlvbkVycm9yKHsgY2F1c2U6IHJlc3BvbnNlIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlSGVhZGVycyA9IGNyZWF0ZVJlc3BvbnNlSGVhZGVycyhyZXNwb25zZS5oZWFkZXJzKTtcbiAgICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICAgICAgaWYgKHJldHJpZXNSZW1haW5pbmcgJiYgdGhpcy5zaG91bGRSZXRyeShyZXNwb25zZSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXRyeU1lc3NhZ2UgPSBgcmV0cnlpbmcsICR7cmV0cmllc1JlbWFpbmluZ30gYXR0ZW1wdHMgcmVtYWluaW5nYDtcbiAgICAgICAgICAgICAgICBkZWJ1ZyhgcmVzcG9uc2UgKGVycm9yOyAke3JldHJ5TWVzc2FnZX0pYCwgcmVzcG9uc2Uuc3RhdHVzLCB1cmwsIHJlc3BvbnNlSGVhZGVycyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmV0cnlSZXF1ZXN0KG9wdGlvbnMsIHJldHJpZXNSZW1haW5pbmcsIHJlc3BvbnNlSGVhZGVycyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBlcnJUZXh0ID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpLmNhdGNoKChlKSA9PiBjYXN0VG9FcnJvcihlKS5tZXNzYWdlKTtcbiAgICAgICAgICAgIGNvbnN0IGVyckpTT04gPSBzYWZlSlNPTihlcnJUZXh0KTtcbiAgICAgICAgICAgIGNvbnN0IGVyck1lc3NhZ2UgPSBlcnJKU09OID8gdW5kZWZpbmVkIDogZXJyVGV4dDtcbiAgICAgICAgICAgIGNvbnN0IHJldHJ5TWVzc2FnZSA9IHJldHJpZXNSZW1haW5pbmcgPyBgKGVycm9yOyBubyBtb3JlIHJldHJpZXMgbGVmdClgIDogYChlcnJvcjsgbm90IHJldHJ5YWJsZSlgO1xuICAgICAgICAgICAgZGVidWcoYHJlc3BvbnNlIChlcnJvcjsgJHtyZXRyeU1lc3NhZ2V9KWAsIHJlc3BvbnNlLnN0YXR1cywgdXJsLCByZXNwb25zZUhlYWRlcnMsIGVyck1lc3NhZ2UpO1xuICAgICAgICAgICAgY29uc3QgZXJyID0gdGhpcy5tYWtlU3RhdHVzRXJyb3IocmVzcG9uc2Uuc3RhdHVzLCBlcnJKU09OLCBlcnJNZXNzYWdlLCByZXNwb25zZUhlYWRlcnMpO1xuICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHJlc3BvbnNlLCBvcHRpb25zLCBjb250cm9sbGVyIH07XG4gICAgfVxuICAgIHJlcXVlc3RBUElMaXN0KFBhZ2UsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgcmVxdWVzdCA9IHRoaXMubWFrZVJlcXVlc3Qob3B0aW9ucywgbnVsbCk7XG4gICAgICAgIHJldHVybiBuZXcgUGFnZVByb21pc2UodGhpcywgcmVxdWVzdCwgUGFnZSk7XG4gICAgfVxuICAgIGJ1aWxkVVJMKHBhdGgsIHF1ZXJ5KSB7XG4gICAgICAgIGNvbnN0IHVybCA9IGlzQWJzb2x1dGVVUkwocGF0aCkgP1xuICAgICAgICAgICAgbmV3IFVSTChwYXRoKVxuICAgICAgICAgICAgOiBuZXcgVVJMKHRoaXMuYmFzZVVSTCArICh0aGlzLmJhc2VVUkwuZW5kc1dpdGgoJy8nKSAmJiBwYXRoLnN0YXJ0c1dpdGgoJy8nKSA/IHBhdGguc2xpY2UoMSkgOiBwYXRoKSk7XG4gICAgICAgIGNvbnN0IGRlZmF1bHRRdWVyeSA9IHRoaXMuZGVmYXVsdFF1ZXJ5KCk7XG4gICAgICAgIGlmICghaXNFbXB0eU9iaihkZWZhdWx0UXVlcnkpKSB7XG4gICAgICAgICAgICBxdWVyeSA9IHsgLi4uZGVmYXVsdFF1ZXJ5LCAuLi5xdWVyeSB9O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgcXVlcnkgPT09ICdvYmplY3QnICYmIHF1ZXJ5ICYmICFBcnJheS5pc0FycmF5KHF1ZXJ5KSkge1xuICAgICAgICAgICAgdXJsLnNlYXJjaCA9IHRoaXMuc3RyaW5naWZ5UXVlcnkocXVlcnkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1cmwudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgc3RyaW5naWZ5UXVlcnkocXVlcnkpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKHF1ZXJ5KVxuICAgICAgICAgICAgLmZpbHRlcigoW18sIHZhbHVlXSkgPT4gdHlwZW9mIHZhbHVlICE9PSAndW5kZWZpbmVkJylcbiAgICAgICAgICAgIC5tYXAoKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyB8fCB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBgJHtlbmNvZGVVUklDb21wb25lbnQoa2V5KX09JHtlbmNvZGVVUklDb21wb25lbnQodmFsdWUpfWA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYCR7ZW5jb2RlVVJJQ29tcG9uZW50KGtleSl9PWA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBuZXcgT3BlbkFJRXJyb3IoYENhbm5vdCBzdHJpbmdpZnkgdHlwZSAke3R5cGVvZiB2YWx1ZX07IEV4cGVjdGVkIHN0cmluZywgbnVtYmVyLCBib29sZWFuLCBvciBudWxsLiBJZiB5b3UgbmVlZCB0byBwYXNzIG5lc3RlZCBxdWVyeSBwYXJhbWV0ZXJzLCB5b3UgY2FuIG1hbnVhbGx5IGVuY29kZSB0aGVtLCBlLmcuIHsgcXVlcnk6IHsgJ2Zvb1trZXkxXSc6IHZhbHVlMSwgJ2Zvb1trZXkyXSc6IHZhbHVlMiB9IH0sIGFuZCBwbGVhc2Ugb3BlbiBhIEdpdEh1YiBpc3N1ZSByZXF1ZXN0aW5nIGJldHRlciBzdXBwb3J0IGZvciB5b3VyIHVzZSBjYXNlLmApO1xuICAgICAgICB9KVxuICAgICAgICAgICAgLmpvaW4oJyYnKTtcbiAgICB9XG4gICAgYXN5bmMgZmV0Y2hXaXRoVGltZW91dCh1cmwsIGluaXQsIG1zLCBjb250cm9sbGVyKSB7XG4gICAgICAgIGNvbnN0IHsgc2lnbmFsLCAuLi5vcHRpb25zIH0gPSBpbml0IHx8IHt9O1xuICAgICAgICBpZiAoc2lnbmFsKVxuICAgICAgICAgICAgc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgKCkgPT4gY29udHJvbGxlci5hYm9ydCgpKTtcbiAgICAgICAgY29uc3QgdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4gY29udHJvbGxlci5hYm9ydCgpLCBtcyk7XG4gICAgICAgIHJldHVybiAodGhpcy5nZXRSZXF1ZXN0Q2xpZW50KClcbiAgICAgICAgICAgIC8vIHVzZSB1bmRlZmluZWQgdGhpcyBiaW5kaW5nOyBmZXRjaCBlcnJvcnMgaWYgYm91bmQgdG8gc29tZXRoaW5nIGVsc2UgaW4gYnJvd3Nlci9jbG91ZGZsYXJlXG4gICAgICAgICAgICAuZmV0Y2guY2FsbCh1bmRlZmluZWQsIHVybCwgeyBzaWduYWw6IGNvbnRyb2xsZXIuc2lnbmFsLCAuLi5vcHRpb25zIH0pXG4gICAgICAgICAgICAuZmluYWxseSgoKSA9PiB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgZ2V0UmVxdWVzdENsaWVudCgpIHtcbiAgICAgICAgcmV0dXJuIHsgZmV0Y2g6IHRoaXMuZmV0Y2ggfTtcbiAgICB9XG4gICAgc2hvdWxkUmV0cnkocmVzcG9uc2UpIHtcbiAgICAgICAgLy8gTm90ZSB0aGlzIGlzIG5vdCBhIHN0YW5kYXJkIGhlYWRlci5cbiAgICAgICAgY29uc3Qgc2hvdWxkUmV0cnlIZWFkZXIgPSByZXNwb25zZS5oZWFkZXJzLmdldCgneC1zaG91bGQtcmV0cnknKTtcbiAgICAgICAgLy8gSWYgdGhlIHNlcnZlciBleHBsaWNpdGx5IHNheXMgd2hldGhlciBvciBub3QgdG8gcmV0cnksIG9iZXkuXG4gICAgICAgIGlmIChzaG91bGRSZXRyeUhlYWRlciA9PT0gJ3RydWUnKVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIGlmIChzaG91bGRSZXRyeUhlYWRlciA9PT0gJ2ZhbHNlJylcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgLy8gUmV0cnkgb24gcmVxdWVzdCB0aW1lb3V0cy5cbiAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gNDA4KVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIC8vIFJldHJ5IG9uIGxvY2sgdGltZW91dHMuXG4gICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDQwOSlcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAvLyBSZXRyeSBvbiByYXRlIGxpbWl0cy5cbiAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gNDI5KVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIC8vIFJldHJ5IGludGVybmFsIGVycm9ycy5cbiAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA+PSA1MDApXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBhc3luYyByZXRyeVJlcXVlc3Qob3B0aW9ucywgcmV0cmllc1JlbWFpbmluZywgcmVzcG9uc2VIZWFkZXJzKSB7XG4gICAgICAgIGxldCB0aW1lb3V0TWlsbGlzO1xuICAgICAgICAvLyBOb3RlIHRoZSBgcmV0cnktYWZ0ZXItbXNgIGhlYWRlciBtYXkgbm90IGJlIHN0YW5kYXJkLCBidXQgaXMgYSBnb29kIGlkZWEgYW5kIHdlJ2QgbGlrZSBwcm9hY3RpdmUgc3VwcG9ydCBmb3IgaXQuXG4gICAgICAgIGNvbnN0IHJldHJ5QWZ0ZXJNaWxsaXNIZWFkZXIgPSByZXNwb25zZUhlYWRlcnM/LlsncmV0cnktYWZ0ZXItbXMnXTtcbiAgICAgICAgaWYgKHJldHJ5QWZ0ZXJNaWxsaXNIZWFkZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IHRpbWVvdXRNcyA9IHBhcnNlRmxvYXQocmV0cnlBZnRlck1pbGxpc0hlYWRlcik7XG4gICAgICAgICAgICBpZiAoIU51bWJlci5pc05hTih0aW1lb3V0TXMpKSB7XG4gICAgICAgICAgICAgICAgdGltZW91dE1pbGxpcyA9IHRpbWVvdXRNcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBBYm91dCB0aGUgUmV0cnktQWZ0ZXIgaGVhZGVyOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVFRQL0hlYWRlcnMvUmV0cnktQWZ0ZXJcbiAgICAgICAgY29uc3QgcmV0cnlBZnRlckhlYWRlciA9IHJlc3BvbnNlSGVhZGVycz8uWydyZXRyeS1hZnRlciddO1xuICAgICAgICBpZiAocmV0cnlBZnRlckhlYWRlciAmJiAhdGltZW91dE1pbGxpcykge1xuICAgICAgICAgICAgY29uc3QgdGltZW91dFNlY29uZHMgPSBwYXJzZUZsb2F0KHJldHJ5QWZ0ZXJIZWFkZXIpO1xuICAgICAgICAgICAgaWYgKCFOdW1iZXIuaXNOYU4odGltZW91dFNlY29uZHMpKSB7XG4gICAgICAgICAgICAgICAgdGltZW91dE1pbGxpcyA9IHRpbWVvdXRTZWNvbmRzICogMTAwMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRpbWVvdXRNaWxsaXMgPSBEYXRlLnBhcnNlKHJldHJ5QWZ0ZXJIZWFkZXIpIC0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB0aGUgQVBJIGFza3MgdXMgdG8gd2FpdCBhIGNlcnRhaW4gYW1vdW50IG9mIHRpbWUgKGFuZCBpdCdzIGEgcmVhc29uYWJsZSBhbW91bnQpLFxuICAgICAgICAvLyBqdXN0IGRvIHdoYXQgaXQgc2F5cywgYnV0IG90aGVyd2lzZSBjYWxjdWxhdGUgYSBkZWZhdWx0XG4gICAgICAgIGlmICghKHRpbWVvdXRNaWxsaXMgJiYgMCA8PSB0aW1lb3V0TWlsbGlzICYmIHRpbWVvdXRNaWxsaXMgPCA2MCAqIDEwMDApKSB7XG4gICAgICAgICAgICBjb25zdCBtYXhSZXRyaWVzID0gb3B0aW9ucy5tYXhSZXRyaWVzID8/IHRoaXMubWF4UmV0cmllcztcbiAgICAgICAgICAgIHRpbWVvdXRNaWxsaXMgPSB0aGlzLmNhbGN1bGF0ZURlZmF1bHRSZXRyeVRpbWVvdXRNaWxsaXMocmV0cmllc1JlbWFpbmluZywgbWF4UmV0cmllcyk7XG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgc2xlZXAodGltZW91dE1pbGxpcyk7XG4gICAgICAgIHJldHVybiB0aGlzLm1ha2VSZXF1ZXN0KG9wdGlvbnMsIHJldHJpZXNSZW1haW5pbmcgLSAxKTtcbiAgICB9XG4gICAgY2FsY3VsYXRlRGVmYXVsdFJldHJ5VGltZW91dE1pbGxpcyhyZXRyaWVzUmVtYWluaW5nLCBtYXhSZXRyaWVzKSB7XG4gICAgICAgIGNvbnN0IGluaXRpYWxSZXRyeURlbGF5ID0gMC41O1xuICAgICAgICBjb25zdCBtYXhSZXRyeURlbGF5ID0gOC4wO1xuICAgICAgICBjb25zdCBudW1SZXRyaWVzID0gbWF4UmV0cmllcyAtIHJldHJpZXNSZW1haW5pbmc7XG4gICAgICAgIC8vIEFwcGx5IGV4cG9uZW50aWFsIGJhY2tvZmYsIGJ1dCBub3QgbW9yZSB0aGFuIHRoZSBtYXguXG4gICAgICAgIGNvbnN0IHNsZWVwU2Vjb25kcyA9IE1hdGgubWluKGluaXRpYWxSZXRyeURlbGF5ICogTWF0aC5wb3coMiwgbnVtUmV0cmllcyksIG1heFJldHJ5RGVsYXkpO1xuICAgICAgICAvLyBBcHBseSBzb21lIGppdHRlciwgdGFrZSB1cCB0byBhdCBtb3N0IDI1IHBlcmNlbnQgb2YgdGhlIHJldHJ5IHRpbWUuXG4gICAgICAgIGNvbnN0IGppdHRlciA9IDEgLSBNYXRoLnJhbmRvbSgpICogMC4yNTtcbiAgICAgICAgcmV0dXJuIHNsZWVwU2Vjb25kcyAqIGppdHRlciAqIDEwMDA7XG4gICAgfVxuICAgIGdldFVzZXJBZ2VudCgpIHtcbiAgICAgICAgcmV0dXJuIGAke3RoaXMuY29uc3RydWN0b3IubmFtZX0vSlMgJHtWRVJTSU9OfWA7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEFic3RyYWN0UGFnZSB7XG4gICAgY29uc3RydWN0b3IoY2xpZW50LCByZXNwb25zZSwgYm9keSwgb3B0aW9ucykge1xuICAgICAgICBfQWJzdHJhY3RQYWdlX2NsaWVudC5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfQWJzdHJhY3RQYWdlX2NsaWVudCwgY2xpZW50LCBcImZcIik7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgICAgICAgdGhpcy5ib2R5ID0gYm9keTtcbiAgICB9XG4gICAgaGFzTmV4dFBhZ2UoKSB7XG4gICAgICAgIGNvbnN0IGl0ZW1zID0gdGhpcy5nZXRQYWdpbmF0ZWRJdGVtcygpO1xuICAgICAgICBpZiAoIWl0ZW1zLmxlbmd0aClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHRoaXMubmV4dFBhZ2VJbmZvKCkgIT0gbnVsbDtcbiAgICB9XG4gICAgYXN5bmMgZ2V0TmV4dFBhZ2UoKSB7XG4gICAgICAgIGNvbnN0IG5leHRJbmZvID0gdGhpcy5uZXh0UGFnZUluZm8oKTtcbiAgICAgICAgaWYgKCFuZXh0SW5mbykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE9wZW5BSUVycm9yKCdObyBuZXh0IHBhZ2UgZXhwZWN0ZWQ7IHBsZWFzZSBjaGVjayBgLmhhc05leHRQYWdlKClgIGJlZm9yZSBjYWxsaW5nIGAuZ2V0TmV4dFBhZ2UoKWAuJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbmV4dE9wdGlvbnMgPSB7IC4uLnRoaXMub3B0aW9ucyB9O1xuICAgICAgICBpZiAoJ3BhcmFtcycgaW4gbmV4dEluZm8gJiYgdHlwZW9mIG5leHRPcHRpb25zLnF1ZXJ5ID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgbmV4dE9wdGlvbnMucXVlcnkgPSB7IC4uLm5leHRPcHRpb25zLnF1ZXJ5LCAuLi5uZXh0SW5mby5wYXJhbXMgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgndXJsJyBpbiBuZXh0SW5mbykge1xuICAgICAgICAgICAgY29uc3QgcGFyYW1zID0gWy4uLk9iamVjdC5lbnRyaWVzKG5leHRPcHRpb25zLnF1ZXJ5IHx8IHt9KSwgLi4ubmV4dEluZm8udXJsLnNlYXJjaFBhcmFtcy5lbnRyaWVzKCldO1xuICAgICAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgcGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgbmV4dEluZm8udXJsLnNlYXJjaFBhcmFtcy5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuZXh0T3B0aW9ucy5xdWVyeSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIG5leHRPcHRpb25zLnBhdGggPSBuZXh0SW5mby51cmwudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXdhaXQgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQWJzdHJhY3RQYWdlX2NsaWVudCwgXCJmXCIpLnJlcXVlc3RBUElMaXN0KHRoaXMuY29uc3RydWN0b3IsIG5leHRPcHRpb25zKTtcbiAgICB9XG4gICAgYXN5bmMgKml0ZXJQYWdlcygpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby10aGlzLWFsaWFzXG4gICAgICAgIGxldCBwYWdlID0gdGhpcztcbiAgICAgICAgeWllbGQgcGFnZTtcbiAgICAgICAgd2hpbGUgKHBhZ2UuaGFzTmV4dFBhZ2UoKSkge1xuICAgICAgICAgICAgcGFnZSA9IGF3YWl0IHBhZ2UuZ2V0TmV4dFBhZ2UoKTtcbiAgICAgICAgICAgIHlpZWxkIHBhZ2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgKlsoX0Fic3RyYWN0UGFnZV9jbGllbnQgPSBuZXcgV2Vha01hcCgpLCBTeW1ib2wuYXN5bmNJdGVyYXRvcildKCkge1xuICAgICAgICBmb3IgYXdhaXQgKGNvbnN0IHBhZ2Ugb2YgdGhpcy5pdGVyUGFnZXMoKSkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIHBhZ2UuZ2V0UGFnaW5hdGVkSXRlbXMoKSkge1xuICAgICAgICAgICAgICAgIHlpZWxkIGl0ZW07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIFRoaXMgc3ViY2xhc3Mgb2YgUHJvbWlzZSB3aWxsIHJlc29sdmUgdG8gYW4gaW5zdGFudGlhdGVkIFBhZ2Ugb25jZSB0aGUgcmVxdWVzdCBjb21wbGV0ZXMuXG4gKlxuICogSXQgYWxzbyBpbXBsZW1lbnRzIEFzeW5jSXRlcmFibGUgdG8gYWxsb3cgYXV0by1wYWdpbmF0aW5nIGl0ZXJhdGlvbiBvbiBhbiB1bmF3YWl0ZWQgbGlzdCBjYWxsLCBlZzpcbiAqXG4gKiAgICBmb3IgYXdhaXQgKGNvbnN0IGl0ZW0gb2YgY2xpZW50Lml0ZW1zLmxpc3QoKSkge1xuICogICAgICBjb25zb2xlLmxvZyhpdGVtKVxuICogICAgfVxuICovXG5leHBvcnQgY2xhc3MgUGFnZVByb21pc2UgZXh0ZW5kcyBBUElQcm9taXNlIHtcbiAgICBjb25zdHJ1Y3RvcihjbGllbnQsIHJlcXVlc3QsIFBhZ2UpIHtcbiAgICAgICAgc3VwZXIocmVxdWVzdCwgYXN5bmMgKHByb3BzKSA9PiBuZXcgUGFnZShjbGllbnQsIHByb3BzLnJlc3BvbnNlLCBhd2FpdCBkZWZhdWx0UGFyc2VSZXNwb25zZShwcm9wcyksIHByb3BzLm9wdGlvbnMpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWxsb3cgYXV0by1wYWdpbmF0aW5nIGl0ZXJhdGlvbiBvbiBhbiB1bmF3YWl0ZWQgbGlzdCBjYWxsLCBlZzpcbiAgICAgKlxuICAgICAqICAgIGZvciBhd2FpdCAoY29uc3QgaXRlbSBvZiBjbGllbnQuaXRlbXMubGlzdCgpKSB7XG4gICAgICogICAgICBjb25zb2xlLmxvZyhpdGVtKVxuICAgICAqICAgIH1cbiAgICAgKi9cbiAgICBhc3luYyAqW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICAgICAgY29uc3QgcGFnZSA9IGF3YWl0IHRoaXM7XG4gICAgICAgIGZvciBhd2FpdCAoY29uc3QgaXRlbSBvZiBwYWdlKSB7XG4gICAgICAgICAgICB5aWVsZCBpdGVtO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0IGNvbnN0IGNyZWF0ZVJlc3BvbnNlSGVhZGVycyA9IChoZWFkZXJzKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBQcm94eShPYmplY3QuZnJvbUVudHJpZXMoXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGhlYWRlcnMuZW50cmllcygpKSwge1xuICAgICAgICBnZXQodGFyZ2V0LCBuYW1lKSB7XG4gICAgICAgICAgICBjb25zdCBrZXkgPSBuYW1lLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0W2tleS50b0xvd2VyQ2FzZSgpXSB8fCB0YXJnZXRba2V5XTtcbiAgICAgICAgfSxcbiAgICB9KTtcbn07XG4vLyBUaGlzIGlzIHJlcXVpcmVkIHNvIHRoYXQgd2UgY2FuIGRldGVybWluZSBpZiBhIGdpdmVuIG9iamVjdCBtYXRjaGVzIHRoZSBSZXF1ZXN0T3B0aW9uc1xuLy8gdHlwZSBhdCBydW50aW1lLiBXaGlsZSB0aGlzIHJlcXVpcmVzIGR1cGxpY2F0aW9uLCBpdCBpcyBlbmZvcmNlZCBieSB0aGUgVHlwZVNjcmlwdFxuLy8gY29tcGlsZXIgc3VjaCB0aGF0IGFueSBtaXNzaW5nIC8gZXh0cmFuZW91cyBrZXlzIHdpbGwgY2F1c2UgYW4gZXJyb3IuXG5jb25zdCByZXF1ZXN0T3B0aW9uc0tleXMgPSB7XG4gICAgbWV0aG9kOiB0cnVlLFxuICAgIHBhdGg6IHRydWUsXG4gICAgcXVlcnk6IHRydWUsXG4gICAgYm9keTogdHJ1ZSxcbiAgICBoZWFkZXJzOiB0cnVlLFxuICAgIG1heFJldHJpZXM6IHRydWUsXG4gICAgc3RyZWFtOiB0cnVlLFxuICAgIHRpbWVvdXQ6IHRydWUsXG4gICAgaHR0cEFnZW50OiB0cnVlLFxuICAgIHNpZ25hbDogdHJ1ZSxcbiAgICBpZGVtcG90ZW5jeUtleTogdHJ1ZSxcbiAgICBfX2JpbmFyeVJlc3BvbnNlOiB0cnVlLFxuICAgIF9fc3RyZWFtQ2xhc3M6IHRydWUsXG59O1xuZXhwb3J0IGNvbnN0IGlzUmVxdWVzdE9wdGlvbnMgPSAob2JqKSA9PiB7XG4gICAgcmV0dXJuICh0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJlxuICAgICAgICBvYmogIT09IG51bGwgJiZcbiAgICAgICAgIWlzRW1wdHlPYmoob2JqKSAmJlxuICAgICAgICBPYmplY3Qua2V5cyhvYmopLmV2ZXJ5KChrKSA9PiBoYXNPd24ocmVxdWVzdE9wdGlvbnNLZXlzLCBrKSkpO1xufTtcbmNvbnN0IGdldFBsYXRmb3JtUHJvcGVydGllcyA9ICgpID0+IHtcbiAgICBpZiAodHlwZW9mIERlbm8gIT09ICd1bmRlZmluZWQnICYmIERlbm8uYnVpbGQgIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ1gtU3RhaW5sZXNzLUxhbmcnOiAnanMnLFxuICAgICAgICAgICAgJ1gtU3RhaW5sZXNzLVBhY2thZ2UtVmVyc2lvbic6IFZFUlNJT04sXG4gICAgICAgICAgICAnWC1TdGFpbmxlc3MtT1MnOiBub3JtYWxpemVQbGF0Zm9ybShEZW5vLmJ1aWxkLm9zKSxcbiAgICAgICAgICAgICdYLVN0YWlubGVzcy1BcmNoJzogbm9ybWFsaXplQXJjaChEZW5vLmJ1aWxkLmFyY2gpLFxuICAgICAgICAgICAgJ1gtU3RhaW5sZXNzLVJ1bnRpbWUnOiAnZGVubycsXG4gICAgICAgICAgICAnWC1TdGFpbmxlc3MtUnVudGltZS1WZXJzaW9uJzogRGVuby52ZXJzaW9uLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBpZiAodHlwZW9mIEVkZ2VSdW50aW1lICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ1gtU3RhaW5sZXNzLUxhbmcnOiAnanMnLFxuICAgICAgICAgICAgJ1gtU3RhaW5sZXNzLVBhY2thZ2UtVmVyc2lvbic6IFZFUlNJT04sXG4gICAgICAgICAgICAnWC1TdGFpbmxlc3MtT1MnOiAnVW5rbm93bicsXG4gICAgICAgICAgICAnWC1TdGFpbmxlc3MtQXJjaCc6IGBvdGhlcjoke0VkZ2VSdW50aW1lfWAsXG4gICAgICAgICAgICAnWC1TdGFpbmxlc3MtUnVudGltZSc6ICdlZGdlJyxcbiAgICAgICAgICAgICdYLVN0YWlubGVzcy1SdW50aW1lLVZlcnNpb24nOiBwcm9jZXNzLnZlcnNpb24sXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8vIENoZWNrIGlmIE5vZGUuanNcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyA/IHByb2Nlc3MgOiAwKSA9PT0gJ1tvYmplY3QgcHJvY2Vzc10nKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnWC1TdGFpbmxlc3MtTGFuZyc6ICdqcycsXG4gICAgICAgICAgICAnWC1TdGFpbmxlc3MtUGFja2FnZS1WZXJzaW9uJzogVkVSU0lPTixcbiAgICAgICAgICAgICdYLVN0YWlubGVzcy1PUyc6IG5vcm1hbGl6ZVBsYXRmb3JtKHByb2Nlc3MucGxhdGZvcm0pLFxuICAgICAgICAgICAgJ1gtU3RhaW5sZXNzLUFyY2gnOiBub3JtYWxpemVBcmNoKHByb2Nlc3MuYXJjaCksXG4gICAgICAgICAgICAnWC1TdGFpbmxlc3MtUnVudGltZSc6ICdub2RlJyxcbiAgICAgICAgICAgICdYLVN0YWlubGVzcy1SdW50aW1lLVZlcnNpb24nOiBwcm9jZXNzLnZlcnNpb24sXG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IGJyb3dzZXJJbmZvID0gZ2V0QnJvd3NlckluZm8oKTtcbiAgICBpZiAoYnJvd3NlckluZm8pIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdYLVN0YWlubGVzcy1MYW5nJzogJ2pzJyxcbiAgICAgICAgICAgICdYLVN0YWlubGVzcy1QYWNrYWdlLVZlcnNpb24nOiBWRVJTSU9OLFxuICAgICAgICAgICAgJ1gtU3RhaW5sZXNzLU9TJzogJ1Vua25vd24nLFxuICAgICAgICAgICAgJ1gtU3RhaW5sZXNzLUFyY2gnOiAndW5rbm93bicsXG4gICAgICAgICAgICAnWC1TdGFpbmxlc3MtUnVudGltZSc6IGBicm93c2VyOiR7YnJvd3NlckluZm8uYnJvd3Nlcn1gLFxuICAgICAgICAgICAgJ1gtU3RhaW5sZXNzLVJ1bnRpbWUtVmVyc2lvbic6IGJyb3dzZXJJbmZvLnZlcnNpb24sXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8vIFRPRE8gYWRkIHN1cHBvcnQgZm9yIENsb3VkZmxhcmUgd29ya2VycywgZXRjLlxuICAgIHJldHVybiB7XG4gICAgICAgICdYLVN0YWlubGVzcy1MYW5nJzogJ2pzJyxcbiAgICAgICAgJ1gtU3RhaW5sZXNzLVBhY2thZ2UtVmVyc2lvbic6IFZFUlNJT04sXG4gICAgICAgICdYLVN0YWlubGVzcy1PUyc6ICdVbmtub3duJyxcbiAgICAgICAgJ1gtU3RhaW5sZXNzLUFyY2gnOiAndW5rbm93bicsXG4gICAgICAgICdYLVN0YWlubGVzcy1SdW50aW1lJzogJ3Vua25vd24nLFxuICAgICAgICAnWC1TdGFpbmxlc3MtUnVudGltZS1WZXJzaW9uJzogJ3Vua25vd24nLFxuICAgIH07XG59O1xuLy8gTm90ZTogbW9kaWZpZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vSlMtRGV2VG9vbHMvaG9zdC1lbnZpcm9ubWVudC9ibG9iL2IxYWI3OWVjZGUzN2RiNWQ2ZTE2M2MwNTBlNTRmZTdkMjg3ZDdjOTIvc3JjL2lzb21vcnBoaWMuYnJvd3Nlci50c1xuZnVuY3Rpb24gZ2V0QnJvd3NlckluZm8oKSB7XG4gICAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgPT09ICd1bmRlZmluZWQnIHx8ICFuYXZpZ2F0b3IpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIC8vIE5PVEU6IFRoZSBvcmRlciBtYXR0ZXJzIGhlcmUhXG4gICAgY29uc3QgYnJvd3NlclBhdHRlcm5zID0gW1xuICAgICAgICB7IGtleTogJ2VkZ2UnLCBwYXR0ZXJuOiAvRWRnZSg/OlxcVysoXFxkKylcXC4oXFxkKykoPzpcXC4oXFxkKykpPyk/LyB9LFxuICAgICAgICB7IGtleTogJ2llJywgcGF0dGVybjogL01TSUUoPzpcXFcrKFxcZCspXFwuKFxcZCspKD86XFwuKFxcZCspKT8pPy8gfSxcbiAgICAgICAgeyBrZXk6ICdpZScsIHBhdHRlcm46IC9UcmlkZW50KD86LipydlxcOihcXGQrKVxcLihcXGQrKSg/OlxcLihcXGQrKSk/KT8vIH0sXG4gICAgICAgIHsga2V5OiAnY2hyb21lJywgcGF0dGVybjogL0Nocm9tZSg/OlxcVysoXFxkKylcXC4oXFxkKykoPzpcXC4oXFxkKykpPyk/LyB9LFxuICAgICAgICB7IGtleTogJ2ZpcmVmb3gnLCBwYXR0ZXJuOiAvRmlyZWZveCg/OlxcVysoXFxkKylcXC4oXFxkKykoPzpcXC4oXFxkKykpPyk/LyB9LFxuICAgICAgICB7IGtleTogJ3NhZmFyaScsIHBhdHRlcm46IC8oPzpWZXJzaW9uXFxXKyhcXGQrKVxcLihcXGQrKSg/OlxcLihcXGQrKSk/KT8oPzpcXFcrTW9iaWxlXFxTKik/XFxXK1NhZmFyaS8gfSxcbiAgICBdO1xuICAgIC8vIEZpbmQgdGhlIEZJUlNUIG1hdGNoaW5nIGJyb3dzZXJcbiAgICBmb3IgKGNvbnN0IHsga2V5LCBwYXR0ZXJuIH0gb2YgYnJvd3NlclBhdHRlcm5zKSB7XG4gICAgICAgIGNvbnN0IG1hdGNoID0gcGF0dGVybi5leGVjKG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgIGNvbnN0IG1ham9yID0gbWF0Y2hbMV0gfHwgMDtcbiAgICAgICAgICAgIGNvbnN0IG1pbm9yID0gbWF0Y2hbMl0gfHwgMDtcbiAgICAgICAgICAgIGNvbnN0IHBhdGNoID0gbWF0Y2hbM10gfHwgMDtcbiAgICAgICAgICAgIHJldHVybiB7IGJyb3dzZXI6IGtleSwgdmVyc2lvbjogYCR7bWFqb3J9LiR7bWlub3J9LiR7cGF0Y2h9YCB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuY29uc3Qgbm9ybWFsaXplQXJjaCA9IChhcmNoKSA9PiB7XG4gICAgLy8gTm9kZSBkb2NzOlxuICAgIC8vIC0gaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9wcm9jZXNzLmh0bWwjcHJvY2Vzc2FyY2hcbiAgICAvLyBEZW5vIGRvY3M6XG4gICAgLy8gLSBodHRwczovL2RvYy5kZW5vLmxhbmQvZGVuby9zdGFibGUvfi9EZW5vLmJ1aWxkXG4gICAgaWYgKGFyY2ggPT09ICd4MzInKVxuICAgICAgICByZXR1cm4gJ3gzMic7XG4gICAgaWYgKGFyY2ggPT09ICd4ODZfNjQnIHx8IGFyY2ggPT09ICd4NjQnKVxuICAgICAgICByZXR1cm4gJ3g2NCc7XG4gICAgaWYgKGFyY2ggPT09ICdhcm0nKVxuICAgICAgICByZXR1cm4gJ2FybSc7XG4gICAgaWYgKGFyY2ggPT09ICdhYXJjaDY0JyB8fCBhcmNoID09PSAnYXJtNjQnKVxuICAgICAgICByZXR1cm4gJ2FybTY0JztcbiAgICBpZiAoYXJjaClcbiAgICAgICAgcmV0dXJuIGBvdGhlcjoke2FyY2h9YDtcbiAgICByZXR1cm4gJ3Vua25vd24nO1xufTtcbmNvbnN0IG5vcm1hbGl6ZVBsYXRmb3JtID0gKHBsYXRmb3JtKSA9PiB7XG4gICAgLy8gTm9kZSBwbGF0Zm9ybXM6XG4gICAgLy8gLSBodHRwczovL25vZGVqcy5vcmcvYXBpL3Byb2Nlc3MuaHRtbCNwcm9jZXNzcGxhdGZvcm1cbiAgICAvLyBEZW5vIHBsYXRmb3JtczpcbiAgICAvLyAtIGh0dHBzOi8vZG9jLmRlbm8ubGFuZC9kZW5vL3N0YWJsZS9+L0Rlbm8uYnVpbGRcbiAgICAvLyAtIGh0dHBzOi8vZ2l0aHViLmNvbS9kZW5vbGFuZC9kZW5vL2lzc3Vlcy8xNDc5OVxuICAgIHBsYXRmb3JtID0gcGxhdGZvcm0udG9Mb3dlckNhc2UoKTtcbiAgICAvLyBOT1RFOiB0aGlzIGlPUyBjaGVjayBpcyB1bnRlc3RlZCBhbmQgbWF5IG5vdCB3b3JrXG4gICAgLy8gTm9kZSBkb2VzIG5vdCB3b3JrIG5hdGl2ZWx5IG9uIElPUywgdGhlcmUgaXMgYSBmb3JrIGF0XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy1tb2JpbGUvbm9kZWpzLW1vYmlsZVxuICAgIC8vIGhvd2V2ZXIgaXQgaXMgdW5rbm93biBhdCB0aGUgdGltZSBvZiB3cml0aW5nIGhvdyB0byBkZXRlY3QgaWYgaXQgaXMgcnVubmluZ1xuICAgIGlmIChwbGF0Zm9ybS5pbmNsdWRlcygnaW9zJykpXG4gICAgICAgIHJldHVybiAnaU9TJztcbiAgICBpZiAocGxhdGZvcm0gPT09ICdhbmRyb2lkJylcbiAgICAgICAgcmV0dXJuICdBbmRyb2lkJztcbiAgICBpZiAocGxhdGZvcm0gPT09ICdkYXJ3aW4nKVxuICAgICAgICByZXR1cm4gJ01hY09TJztcbiAgICBpZiAocGxhdGZvcm0gPT09ICd3aW4zMicpXG4gICAgICAgIHJldHVybiAnV2luZG93cyc7XG4gICAgaWYgKHBsYXRmb3JtID09PSAnZnJlZWJzZCcpXG4gICAgICAgIHJldHVybiAnRnJlZUJTRCc7XG4gICAgaWYgKHBsYXRmb3JtID09PSAnb3BlbmJzZCcpXG4gICAgICAgIHJldHVybiAnT3BlbkJTRCc7XG4gICAgaWYgKHBsYXRmb3JtID09PSAnbGludXgnKVxuICAgICAgICByZXR1cm4gJ0xpbnV4JztcbiAgICBpZiAocGxhdGZvcm0pXG4gICAgICAgIHJldHVybiBgT3RoZXI6JHtwbGF0Zm9ybX1gO1xuICAgIHJldHVybiAnVW5rbm93bic7XG59O1xubGV0IF9wbGF0Zm9ybUhlYWRlcnM7XG5jb25zdCBnZXRQbGF0Zm9ybUhlYWRlcnMgPSAoKSA9PiB7XG4gICAgcmV0dXJuIChfcGxhdGZvcm1IZWFkZXJzID8/IChfcGxhdGZvcm1IZWFkZXJzID0gZ2V0UGxhdGZvcm1Qcm9wZXJ0aWVzKCkpKTtcbn07XG5leHBvcnQgY29uc3Qgc2FmZUpTT04gPSAodGV4dCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKHRleHQpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxufTtcbi8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xOTcwOTg0NlxuY29uc3Qgc3RhcnRzV2l0aFNjaGVtZVJlZ2V4cCA9IG5ldyBSZWdFeHAoJ14oPzpbYS16XSs6KT8vLycsICdpJyk7XG5jb25zdCBpc0Fic29sdXRlVVJMID0gKHVybCkgPT4ge1xuICAgIHJldHVybiBzdGFydHNXaXRoU2NoZW1lUmVnZXhwLnRlc3QodXJsKTtcbn07XG5leHBvcnQgY29uc3Qgc2xlZXAgPSAobXMpID0+IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIG1zKSk7XG5jb25zdCB2YWxpZGF0ZVBvc2l0aXZlSW50ZWdlciA9IChuYW1lLCBuKSA9PiB7XG4gICAgaWYgKHR5cGVvZiBuICE9PSAnbnVtYmVyJyB8fCAhTnVtYmVyLmlzSW50ZWdlcihuKSkge1xuICAgICAgICB0aHJvdyBuZXcgT3BlbkFJRXJyb3IoYCR7bmFtZX0gbXVzdCBiZSBhbiBpbnRlZ2VyYCk7XG4gICAgfVxuICAgIGlmIChuIDwgMCkge1xuICAgICAgICB0aHJvdyBuZXcgT3BlbkFJRXJyb3IoYCR7bmFtZX0gbXVzdCBiZSBhIHBvc2l0aXZlIGludGVnZXJgKTtcbiAgICB9XG4gICAgcmV0dXJuIG47XG59O1xuZXhwb3J0IGNvbnN0IGNhc3RUb0Vycm9yID0gKGVycikgPT4ge1xuICAgIGlmIChlcnIgaW5zdGFuY2VvZiBFcnJvcilcbiAgICAgICAgcmV0dXJuIGVycjtcbiAgICByZXR1cm4gbmV3IEVycm9yKGVycik7XG59O1xuZXhwb3J0IGNvbnN0IGVuc3VyZVByZXNlbnQgPSAodmFsdWUpID0+IHtcbiAgICBpZiAodmFsdWUgPT0gbnVsbClcbiAgICAgICAgdGhyb3cgbmV3IE9wZW5BSUVycm9yKGBFeHBlY3RlZCBhIHZhbHVlIHRvIGJlIGdpdmVuIGJ1dCByZWNlaXZlZCAke3ZhbHVlfSBpbnN0ZWFkLmApO1xuICAgIHJldHVybiB2YWx1ZTtcbn07XG4vKipcbiAqIFJlYWQgYW4gZW52aXJvbm1lbnQgdmFyaWFibGUuXG4gKlxuICogVHJpbXMgYmVnaW5uaW5nIGFuZCB0cmFpbGluZyB3aGl0ZXNwYWNlLlxuICpcbiAqIFdpbGwgcmV0dXJuIHVuZGVmaW5lZCBpZiB0aGUgZW52aXJvbm1lbnQgdmFyaWFibGUgZG9lc24ndCBleGlzdCBvciBjYW5ub3QgYmUgYWNjZXNzZWQuXG4gKi9cbmV4cG9ydCBjb25zdCByZWFkRW52ID0gKGVudikgPT4ge1xuICAgIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIHByb2Nlc3MuZW52Py5bZW52XT8udHJpbSgpID8/IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBEZW5vICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gRGVuby5lbnY/LmdldD8uKGVudik/LnRyaW0oKTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn07XG5leHBvcnQgY29uc3QgY29lcmNlSW50ZWdlciA9ICh2YWx1ZSkgPT4ge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKVxuICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSk7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpXG4gICAgICAgIHJldHVybiBwYXJzZUludCh2YWx1ZSwgMTApO1xuICAgIHRocm93IG5ldyBPcGVuQUlFcnJvcihgQ291bGQgbm90IGNvZXJjZSAke3ZhbHVlfSAodHlwZTogJHt0eXBlb2YgdmFsdWV9KSBpbnRvIGEgbnVtYmVyYCk7XG59O1xuZXhwb3J0IGNvbnN0IGNvZXJjZUZsb2F0ID0gKHZhbHVlKSA9PiB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpXG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJylcbiAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQodmFsdWUpO1xuICAgIHRocm93IG5ldyBPcGVuQUlFcnJvcihgQ291bGQgbm90IGNvZXJjZSAke3ZhbHVlfSAodHlwZTogJHt0eXBlb2YgdmFsdWV9KSBpbnRvIGEgbnVtYmVyYCk7XG59O1xuZXhwb3J0IGNvbnN0IGNvZXJjZUJvb2xlYW4gPSAodmFsdWUpID0+IHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicpXG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJylcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSAndHJ1ZSc7XG4gICAgcmV0dXJuIEJvb2xlYW4odmFsdWUpO1xufTtcbmV4cG9ydCBjb25zdCBtYXliZUNvZXJjZUludGVnZXIgPSAodmFsdWUpID0+IHtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXR1cm4gY29lcmNlSW50ZWdlcih2YWx1ZSk7XG59O1xuZXhwb3J0IGNvbnN0IG1heWJlQ29lcmNlRmxvYXQgPSAodmFsdWUpID0+IHtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXR1cm4gY29lcmNlRmxvYXQodmFsdWUpO1xufTtcbmV4cG9ydCBjb25zdCBtYXliZUNvZXJjZUJvb2xlYW4gPSAodmFsdWUpID0+IHtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXR1cm4gY29lcmNlQm9vbGVhbih2YWx1ZSk7XG59O1xuLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzM0NDkxMjg3XG5leHBvcnQgZnVuY3Rpb24gaXNFbXB0eU9iaihvYmopIHtcbiAgICBpZiAoIW9iailcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgZm9yIChjb25zdCBfayBpbiBvYmopXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdHJ1ZTtcbn1cbi8vIGh0dHBzOi8vZXNsaW50Lm9yZy9kb2NzL2xhdGVzdC9ydWxlcy9uby1wcm90b3R5cGUtYnVpbHRpbnNcbmV4cG9ydCBmdW5jdGlvbiBoYXNPd24ob2JqLCBrZXkpIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KTtcbn1cbi8qKlxuICogQ29waWVzIGhlYWRlcnMgZnJvbSBcIm5ld0hlYWRlcnNcIiBvbnRvIFwidGFyZ2V0SGVhZGVyc1wiLFxuICogdXNpbmcgbG93ZXItY2FzZSBmb3IgYWxsIHByb3BlcnRpZXMsXG4gKiBpZ25vcmluZyBhbnkga2V5cyB3aXRoIHVuZGVmaW5lZCB2YWx1ZXMsXG4gKiBhbmQgZGVsZXRpbmcgYW55IGtleXMgd2l0aCBudWxsIHZhbHVlcy5cbiAqL1xuZnVuY3Rpb24gYXBwbHlIZWFkZXJzTXV0KHRhcmdldEhlYWRlcnMsIG5ld0hlYWRlcnMpIHtcbiAgICBmb3IgKGNvbnN0IGsgaW4gbmV3SGVhZGVycykge1xuICAgICAgICBpZiAoIWhhc093bihuZXdIZWFkZXJzLCBrKSlcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjb25zdCBsb3dlcktleSA9IGsudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKCFsb3dlcktleSlcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjb25zdCB2YWwgPSBuZXdIZWFkZXJzW2tdO1xuICAgICAgICBpZiAodmFsID09PSBudWxsKSB7XG4gICAgICAgICAgICBkZWxldGUgdGFyZ2V0SGVhZGVyc1tsb3dlcktleV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodmFsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRhcmdldEhlYWRlcnNbbG93ZXJLZXldID0gdmFsO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGRlYnVnKGFjdGlvbiwgLi4uYXJncykge1xuICAgIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgcHJvY2Vzcy5lbnZbJ0RFQlVHJ10gPT09ICd0cnVlJykge1xuICAgICAgICBjb25zb2xlLmxvZyhgT3BlbkFJOkRFQlVHOiR7YWN0aW9ufWAsIC4uLmFyZ3MpO1xuICAgIH1cbn1cbi8qKlxuICogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIxMTc1MjNcbiAqL1xuY29uc3QgdXVpZDQgPSAoKSA9PiB7XG4gICAgcmV0dXJuICd4eHh4eHh4eC14eHh4LTR4eHgteXh4eC14eHh4eHh4eHh4eHgnLnJlcGxhY2UoL1t4eV0vZywgKGMpID0+IHtcbiAgICAgICAgY29uc3QgciA9IChNYXRoLnJhbmRvbSgpICogMTYpIHwgMDtcbiAgICAgICAgY29uc3QgdiA9IGMgPT09ICd4JyA/IHIgOiAociAmIDB4MykgfCAweDg7XG4gICAgICAgIHJldHVybiB2LnRvU3RyaW5nKDE2KTtcbiAgICB9KTtcbn07XG5leHBvcnQgY29uc3QgaXNSdW5uaW5nSW5Ccm93c2VyID0gKCkgPT4ge1xuICAgIHJldHVybiAoXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgdHlwZW9mIHdpbmRvdy5kb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyk7XG59O1xuZXhwb3J0IGNvbnN0IGlzSGVhZGVyc1Byb3RvY29sID0gKGhlYWRlcnMpID0+IHtcbiAgICByZXR1cm4gdHlwZW9mIGhlYWRlcnM/LmdldCA9PT0gJ2Z1bmN0aW9uJztcbn07XG5leHBvcnQgY29uc3QgZ2V0UmVxdWlyZWRIZWFkZXIgPSAoaGVhZGVycywgaGVhZGVyKSA9PiB7XG4gICAgY29uc3QgbG93ZXJDYXNlZEhlYWRlciA9IGhlYWRlci50b0xvd2VyQ2FzZSgpO1xuICAgIGlmIChpc0hlYWRlcnNQcm90b2NvbChoZWFkZXJzKSkge1xuICAgICAgICAvLyB0byBkZWFsIHdpdGggdGhlIGNhc2Ugd2hlcmUgdGhlIGhlYWRlciBsb29rcyBsaWtlIFN0YWlubGVzcy1FdmVudC1JZFxuICAgICAgICBjb25zdCBpbnRlcmNhcHNIZWFkZXIgPSBoZWFkZXJbMF0/LnRvVXBwZXJDYXNlKCkgK1xuICAgICAgICAgICAgaGVhZGVyLnN1YnN0cmluZygxKS5yZXBsYWNlKC8oW15cXHddKShcXHcpL2csIChfbSwgZzEsIGcyKSA9PiBnMSArIGcyLnRvVXBwZXJDYXNlKCkpO1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBbaGVhZGVyLCBsb3dlckNhc2VkSGVhZGVyLCBoZWFkZXIudG9VcHBlckNhc2UoKSwgaW50ZXJjYXBzSGVhZGVyXSkge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBoZWFkZXJzLmdldChrZXkpO1xuICAgICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGhlYWRlcnMpKSB7XG4gICAgICAgIGlmIChrZXkudG9Mb3dlckNhc2UoKSA9PT0gbG93ZXJDYXNlZEhlYWRlcikge1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA8PSAxKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWVbMF07XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGBSZWNlaXZlZCAke3ZhbHVlLmxlbmd0aH0gZW50cmllcyBmb3IgdGhlICR7aGVhZGVyfSBoZWFkZXIsIHVzaW5nIHRoZSBmaXJzdCBlbnRyeS5gKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWVbMF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKGBDb3VsZCBub3QgZmluZCAke2hlYWRlcn0gaGVhZGVyYCk7XG59O1xuLyoqXG4gKiBFbmNvZGVzIGEgc3RyaW5nIHRvIEJhc2U2NCBmb3JtYXQuXG4gKi9cbmV4cG9ydCBjb25zdCB0b0Jhc2U2NCA9IChzdHIpID0+IHtcbiAgICBpZiAoIXN0cilcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIGlmICh0eXBlb2YgQnVmZmVyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gQnVmZmVyLmZyb20oc3RyKS50b1N0cmluZygnYmFzZTY0Jyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgYnRvYSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIGJ0b2Eoc3RyKTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IE9wZW5BSUVycm9yKCdDYW5ub3QgZ2VuZXJhdGUgYjY0IHN0cmluZzsgRXhwZWN0ZWQgYEJ1ZmZlcmAgb3IgYGJ0b2FgIHRvIGJlIGRlZmluZWQnKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gaXNPYmoob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAhPSBudWxsICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KG9iaik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb3JlLm1qcy5tYXAiXSwibmFtZXMiOlsiX19jbGFzc1ByaXZhdGVGaWVsZFNldCIsInJlY2VpdmVyIiwic3RhdGUiLCJ2YWx1ZSIsImtpbmQiLCJmIiwiVHlwZUVycm9yIiwiaGFzIiwiY2FsbCIsInNldCIsIl9fY2xhc3NQcml2YXRlRmllbGRHZXQiLCJnZXQiLCJfQWJzdHJhY3RQYWdlX2NsaWVudCIsIlZFUlNJT04iLCJTdHJlYW0iLCJPcGVuQUlFcnJvciIsIkFQSUVycm9yIiwiQVBJQ29ubmVjdGlvbkVycm9yIiwiQVBJQ29ubmVjdGlvblRpbWVvdXRFcnJvciIsIkFQSVVzZXJBYm9ydEVycm9yIiwic2hpbXNLaW5kIiwiZ2V0RGVmYXVsdEFnZW50IiwiZmV0Y2giLCJpc011bHRpcGFydEJvZHkiLCJtYXliZU11bHRpcGFydEZvcm1SZXF1ZXN0T3B0aW9ucyIsIm11bHRpcGFydEZvcm1SZXF1ZXN0T3B0aW9ucyIsImNyZWF0ZUZvcm0iLCJkZWZhdWx0UGFyc2VSZXNwb25zZSIsInByb3BzIiwicmVzcG9uc2UiLCJvcHRpb25zIiwic3RyZWFtIiwiZGVidWciLCJzdGF0dXMiLCJ1cmwiLCJoZWFkZXJzIiwiYm9keSIsIl9fc3RyZWFtQ2xhc3MiLCJmcm9tU1NFUmVzcG9uc2UiLCJjb250cm9sbGVyIiwiX19iaW5hcnlSZXNwb25zZSIsImNvbnRlbnRUeXBlIiwiaW5jbHVkZXMiLCJqc29uIiwidGV4dCIsIkFQSVByb21pc2UiLCJQcm9taXNlIiwiY29uc3RydWN0b3IiLCJyZXNwb25zZVByb21pc2UiLCJwYXJzZVJlc3BvbnNlIiwicmVzb2x2ZSIsIl90aGVuVW53cmFwIiwidHJhbnNmb3JtIiwiYXNSZXNwb25zZSIsInRoZW4iLCJwIiwid2l0aFJlc3BvbnNlIiwiZGF0YSIsImFsbCIsInBhcnNlIiwicGFyc2VkUHJvbWlzZSIsIm9uZnVsZmlsbGVkIiwib25yZWplY3RlZCIsImNhdGNoIiwiZmluYWxseSIsIm9uZmluYWxseSIsIkFQSUNsaWVudCIsImJhc2VVUkwiLCJtYXhSZXRyaWVzIiwidGltZW91dCIsImh0dHBBZ2VudCIsIm92ZXJyaWRlbkZldGNoIiwidmFsaWRhdGVQb3NpdGl2ZUludGVnZXIiLCJhdXRoSGVhZGVycyIsIm9wdHMiLCJkZWZhdWx0SGVhZGVycyIsIkFjY2VwdCIsImdldFVzZXJBZ2VudCIsImdldFBsYXRmb3JtSGVhZGVycyIsInZhbGlkYXRlSGVhZGVycyIsImN1c3RvbUhlYWRlcnMiLCJkZWZhdWx0SWRlbXBvdGVuY3lLZXkiLCJ1dWlkNCIsInBhdGgiLCJtZXRob2RSZXF1ZXN0IiwicG9zdCIsInBhdGNoIiwicHV0IiwiZGVsZXRlIiwibWV0aG9kIiwicmVxdWVzdCIsImdldEFQSUxpc3QiLCJQYWdlIiwicmVxdWVzdEFQSUxpc3QiLCJjYWxjdWxhdGVDb250ZW50TGVuZ3RoIiwiQnVmZmVyIiwiYnl0ZUxlbmd0aCIsInRvU3RyaW5nIiwiVGV4dEVuY29kZXIiLCJlbmNvZGVyIiwiZW5jb2RlZCIsImVuY29kZSIsImxlbmd0aCIsImJ1aWxkUmVxdWVzdCIsInF1ZXJ5IiwiSlNPTiIsInN0cmluZ2lmeSIsImNvbnRlbnRMZW5ndGgiLCJidWlsZFVSTCIsIm1pbkFnZW50VGltZW91dCIsImlkZW1wb3RlbmN5SGVhZGVyIiwiaWRlbXBvdGVuY3lLZXkiLCJyZXFIZWFkZXJzIiwiYnVpbGRIZWFkZXJzIiwicmVxIiwiYWdlbnQiLCJzaWduYWwiLCJhcHBseUhlYWRlcnNNdXQiLCJwcmVwYXJlT3B0aW9ucyIsInByZXBhcmVSZXF1ZXN0IiwicGFyc2VIZWFkZXJzIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJPYmplY3QiLCJmcm9tRW50cmllcyIsIkFycmF5IiwiZnJvbSIsIm1hcCIsImhlYWRlciIsIm1ha2VTdGF0dXNFcnJvciIsImVycm9yIiwibWVzc2FnZSIsImdlbmVyYXRlIiwicmVtYWluaW5nUmV0cmllcyIsIm1ha2VSZXF1ZXN0Iiwib3B0aW9uc0lucHV0IiwicmV0cmllc1JlbWFpbmluZyIsImFib3J0ZWQiLCJBYm9ydENvbnRyb2xsZXIiLCJmZXRjaFdpdGhUaW1lb3V0IiwiY2FzdFRvRXJyb3IiLCJFcnJvciIsInJldHJ5UmVxdWVzdCIsIm5hbWUiLCJjYXVzZSIsInJlc3BvbnNlSGVhZGVycyIsImNyZWF0ZVJlc3BvbnNlSGVhZGVycyIsIm9rIiwic2hvdWxkUmV0cnkiLCJyZXRyeU1lc3NhZ2UiLCJlcnJUZXh0IiwiZSIsImVyckpTT04iLCJzYWZlSlNPTiIsImVyck1lc3NhZ2UiLCJ1bmRlZmluZWQiLCJlcnIiLCJQYWdlUHJvbWlzZSIsImlzQWJzb2x1dGVVUkwiLCJVUkwiLCJlbmRzV2l0aCIsInN0YXJ0c1dpdGgiLCJzbGljZSIsImRlZmF1bHRRdWVyeSIsImlzRW1wdHlPYmoiLCJpc0FycmF5Iiwic2VhcmNoIiwic3RyaW5naWZ5UXVlcnkiLCJlbnRyaWVzIiwiZmlsdGVyIiwiXyIsImtleSIsImVuY29kZVVSSUNvbXBvbmVudCIsImpvaW4iLCJpbml0IiwibXMiLCJhZGRFdmVudExpc3RlbmVyIiwiYWJvcnQiLCJzZXRUaW1lb3V0IiwiZ2V0UmVxdWVzdENsaWVudCIsImNsZWFyVGltZW91dCIsInNob3VsZFJldHJ5SGVhZGVyIiwidGltZW91dE1pbGxpcyIsInJldHJ5QWZ0ZXJNaWxsaXNIZWFkZXIiLCJ0aW1lb3V0TXMiLCJwYXJzZUZsb2F0IiwiTnVtYmVyIiwiaXNOYU4iLCJyZXRyeUFmdGVySGVhZGVyIiwidGltZW91dFNlY29uZHMiLCJEYXRlIiwibm93IiwiY2FsY3VsYXRlRGVmYXVsdFJldHJ5VGltZW91dE1pbGxpcyIsInNsZWVwIiwiaW5pdGlhbFJldHJ5RGVsYXkiLCJtYXhSZXRyeURlbGF5IiwibnVtUmV0cmllcyIsInNsZWVwU2Vjb25kcyIsIk1hdGgiLCJtaW4iLCJwb3ciLCJqaXR0ZXIiLCJyYW5kb20iLCJBYnN0cmFjdFBhZ2UiLCJjbGllbnQiLCJoYXNOZXh0UGFnZSIsIml0ZW1zIiwiZ2V0UGFnaW5hdGVkSXRlbXMiLCJuZXh0UGFnZUluZm8iLCJnZXROZXh0UGFnZSIsIm5leHRJbmZvIiwibmV4dE9wdGlvbnMiLCJwYXJhbXMiLCJzZWFyY2hQYXJhbXMiLCJpdGVyUGFnZXMiLCJwYWdlIiwiV2Vha01hcCIsImFzeW5jSXRlcmF0b3IiLCJpdGVtIiwiUHJveHkiLCJ0YXJnZXQiLCJ0b0xvd2VyQ2FzZSIsInJlcXVlc3RPcHRpb25zS2V5cyIsImlzUmVxdWVzdE9wdGlvbnMiLCJvYmoiLCJrZXlzIiwiZXZlcnkiLCJrIiwiaGFzT3duIiwiZ2V0UGxhdGZvcm1Qcm9wZXJ0aWVzIiwiRGVubyIsImJ1aWxkIiwibm9ybWFsaXplUGxhdGZvcm0iLCJvcyIsIm5vcm1hbGl6ZUFyY2giLCJhcmNoIiwidmVyc2lvbiIsIkVkZ2VSdW50aW1lIiwicHJvY2VzcyIsInByb3RvdHlwZSIsInBsYXRmb3JtIiwiYnJvd3NlckluZm8iLCJnZXRCcm93c2VySW5mbyIsImJyb3dzZXIiLCJuYXZpZ2F0b3IiLCJicm93c2VyUGF0dGVybnMiLCJwYXR0ZXJuIiwibWF0Y2giLCJleGVjIiwidXNlckFnZW50IiwibWFqb3IiLCJtaW5vciIsIl9wbGF0Zm9ybUhlYWRlcnMiLCJzdGFydHNXaXRoU2NoZW1lUmVnZXhwIiwiUmVnRXhwIiwidGVzdCIsIm4iLCJpc0ludGVnZXIiLCJlbnN1cmVQcmVzZW50IiwicmVhZEVudiIsImVudiIsInRyaW0iLCJjb2VyY2VJbnRlZ2VyIiwicm91bmQiLCJwYXJzZUludCIsImNvZXJjZUZsb2F0IiwiY29lcmNlQm9vbGVhbiIsIkJvb2xlYW4iLCJtYXliZUNvZXJjZUludGVnZXIiLCJtYXliZUNvZXJjZUZsb2F0IiwibWF5YmVDb2VyY2VCb29sZWFuIiwiX2siLCJoYXNPd25Qcm9wZXJ0eSIsInRhcmdldEhlYWRlcnMiLCJuZXdIZWFkZXJzIiwibG93ZXJLZXkiLCJ2YWwiLCJhY3Rpb24iLCJhcmdzIiwiY29uc29sZSIsImxvZyIsInJlcGxhY2UiLCJjIiwiciIsInYiLCJpc1J1bm5pbmdJbkJyb3dzZXIiLCJ3aW5kb3ciLCJkb2N1bWVudCIsImlzSGVhZGVyc1Byb3RvY29sIiwiZ2V0UmVxdWlyZWRIZWFkZXIiLCJsb3dlckNhc2VkSGVhZGVyIiwiaW50ZXJjYXBzSGVhZGVyIiwidG9VcHBlckNhc2UiLCJzdWJzdHJpbmciLCJfbSIsImcxIiwiZzIiLCJ3YXJuIiwidG9CYXNlNjQiLCJzdHIiLCJidG9hIiwiaXNPYmoiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openai/core.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/openai/error.mjs":
/*!***************************************!*\
  !*** ./node_modules/openai/error.mjs ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APIConnectionError: () => (/* binding */ APIConnectionError),\n/* harmony export */   APIConnectionTimeoutError: () => (/* binding */ APIConnectionTimeoutError),\n/* harmony export */   APIError: () => (/* binding */ APIError),\n/* harmony export */   APIUserAbortError: () => (/* binding */ APIUserAbortError),\n/* harmony export */   AuthenticationError: () => (/* binding */ AuthenticationError),\n/* harmony export */   BadRequestError: () => (/* binding */ BadRequestError),\n/* harmony export */   ConflictError: () => (/* binding */ ConflictError),\n/* harmony export */   InternalServerError: () => (/* binding */ InternalServerError),\n/* harmony export */   NotFoundError: () => (/* binding */ NotFoundError),\n/* harmony export */   OpenAIError: () => (/* binding */ OpenAIError),\n/* harmony export */   PermissionDeniedError: () => (/* binding */ PermissionDeniedError),\n/* harmony export */   RateLimitError: () => (/* binding */ RateLimitError),\n/* harmony export */   UnprocessableEntityError: () => (/* binding */ UnprocessableEntityError)\n/* harmony export */ });\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core.mjs */ \"(ssr)/./node_modules/openai/core.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\nclass OpenAIError extends Error {\n}\nclass APIError extends OpenAIError {\n    constructor(status, error, message, headers){\n        super(`${APIError.makeMessage(status, error, message)}`);\n        this.status = status;\n        this.headers = headers;\n        const data = error;\n        this.error = data;\n        this.code = data?.[\"code\"];\n        this.param = data?.[\"param\"];\n        this.type = data?.[\"type\"];\n    }\n    static makeMessage(status, error, message) {\n        const msg = error?.message ? typeof error.message === \"string\" ? error.message : JSON.stringify(error.message) : error ? JSON.stringify(error) : message;\n        if (status && msg) {\n            return `${status} ${msg}`;\n        }\n        if (status) {\n            return `${status} status code (no body)`;\n        }\n        if (msg) {\n            return msg;\n        }\n        return \"(no status code or body)\";\n    }\n    static generate(status, errorResponse, message, headers) {\n        if (!status) {\n            return new APIConnectionError({\n                cause: (0,_core_mjs__WEBPACK_IMPORTED_MODULE_0__.castToError)(errorResponse)\n            });\n        }\n        const error = errorResponse?.[\"error\"];\n        if (status === 400) {\n            return new BadRequestError(status, error, message, headers);\n        }\n        if (status === 401) {\n            return new AuthenticationError(status, error, message, headers);\n        }\n        if (status === 403) {\n            return new PermissionDeniedError(status, error, message, headers);\n        }\n        if (status === 404) {\n            return new NotFoundError(status, error, message, headers);\n        }\n        if (status === 409) {\n            return new ConflictError(status, error, message, headers);\n        }\n        if (status === 422) {\n            return new UnprocessableEntityError(status, error, message, headers);\n        }\n        if (status === 429) {\n            return new RateLimitError(status, error, message, headers);\n        }\n        if (status >= 500) {\n            return new InternalServerError(status, error, message, headers);\n        }\n        return new APIError(status, error, message, headers);\n    }\n}\nclass APIUserAbortError extends APIError {\n    constructor({ message } = {}){\n        super(undefined, undefined, message || \"Request was aborted.\", undefined);\n        this.status = undefined;\n    }\n}\nclass APIConnectionError extends APIError {\n    constructor({ message, cause }){\n        super(undefined, undefined, message || \"Connection error.\", undefined);\n        this.status = undefined;\n        // in some environments the 'cause' property is already declared\n        // @ts-ignore\n        if (cause) this.cause = cause;\n    }\n}\nclass APIConnectionTimeoutError extends APIConnectionError {\n    constructor({ message } = {}){\n        super({\n            message: message ?? \"Request timed out.\"\n        });\n    }\n}\nclass BadRequestError extends APIError {\n    constructor(){\n        super(...arguments);\n        this.status = 400;\n    }\n}\nclass AuthenticationError extends APIError {\n    constructor(){\n        super(...arguments);\n        this.status = 401;\n    }\n}\nclass PermissionDeniedError extends APIError {\n    constructor(){\n        super(...arguments);\n        this.status = 403;\n    }\n}\nclass NotFoundError extends APIError {\n    constructor(){\n        super(...arguments);\n        this.status = 404;\n    }\n}\nclass ConflictError extends APIError {\n    constructor(){\n        super(...arguments);\n        this.status = 409;\n    }\n}\nclass UnprocessableEntityError extends APIError {\n    constructor(){\n        super(...arguments);\n        this.status = 422;\n    }\n}\nclass RateLimitError extends APIError {\n    constructor(){\n        super(...arguments);\n        this.status = 429;\n    }\n}\nclass InternalServerError extends APIError {\n} //# sourceMappingURL=error.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openai/error.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/openai/index.mjs":
/*!***************************************!*\
  !*** ./node_modules/openai/index.mjs ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APIConnectionError: () => (/* binding */ APIConnectionError),\n/* harmony export */   APIConnectionTimeoutError: () => (/* binding */ APIConnectionTimeoutError),\n/* harmony export */   APIError: () => (/* binding */ APIError),\n/* harmony export */   APIUserAbortError: () => (/* binding */ APIUserAbortError),\n/* harmony export */   AuthenticationError: () => (/* binding */ AuthenticationError),\n/* harmony export */   BadRequestError: () => (/* binding */ BadRequestError),\n/* harmony export */   ConflictError: () => (/* binding */ ConflictError),\n/* harmony export */   InternalServerError: () => (/* binding */ InternalServerError),\n/* harmony export */   NotFoundError: () => (/* binding */ NotFoundError),\n/* harmony export */   OpenAI: () => (/* binding */ OpenAI),\n/* harmony export */   OpenAIError: () => (/* binding */ OpenAIError),\n/* harmony export */   PermissionDeniedError: () => (/* binding */ PermissionDeniedError),\n/* harmony export */   RateLimitError: () => (/* binding */ RateLimitError),\n/* harmony export */   UnprocessableEntityError: () => (/* binding */ UnprocessableEntityError),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   fileFromPath: () => (/* binding */ fileFromPath),\n/* harmony export */   toFile: () => (/* binding */ toFile)\n/* harmony export */ });\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core.mjs */ \"(ssr)/./node_modules/openai/core.mjs\");\n/* harmony import */ var _pagination_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./pagination.mjs */ \"(ssr)/./node_modules/openai/pagination.mjs\");\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./error.mjs */ \"(ssr)/./node_modules/openai/error.mjs\");\n/* harmony import */ var _uploads_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./uploads.mjs */ \"(ssr)/./node_modules/openai/uploads.mjs\");\n/* harmony import */ var _uploads_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./uploads.mjs */ \"(ssr)/./node_modules/openai/_shims/index.mjs\");\n/* harmony import */ var openai_resources_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! openai/resources/index */ \"(ssr)/./node_modules/openai/resources/completions.mjs\");\n/* harmony import */ var openai_resources_index__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! openai/resources/index */ \"(ssr)/./node_modules/openai/resources/chat/chat.mjs\");\n/* harmony import */ var openai_resources_index__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! openai/resources/index */ \"(ssr)/./node_modules/openai/resources/embeddings.mjs\");\n/* harmony import */ var openai_resources_index__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! openai/resources/index */ \"(ssr)/./node_modules/openai/resources/files.mjs\");\n/* harmony import */ var openai_resources_index__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! openai/resources/index */ \"(ssr)/./node_modules/openai/resources/images.mjs\");\n/* harmony import */ var openai_resources_index__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! openai/resources/index */ \"(ssr)/./node_modules/openai/resources/audio/audio.mjs\");\n/* harmony import */ var openai_resources_index__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! openai/resources/index */ \"(ssr)/./node_modules/openai/resources/moderations.mjs\");\n/* harmony import */ var openai_resources_index__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! openai/resources/index */ \"(ssr)/./node_modules/openai/resources/models.mjs\");\n/* harmony import */ var openai_resources_index__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! openai/resources/index */ \"(ssr)/./node_modules/openai/resources/fine-tuning/fine-tuning.mjs\");\n/* harmony import */ var openai_resources_index__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! openai/resources/index */ \"(ssr)/./node_modules/openai/resources/beta/beta.mjs\");\n// File generated from our OpenAPI spec by Stainless.\nvar _a;\n\n\n\n\n\n/** API Client for interfacing with the OpenAI API. */ class OpenAI extends _core_mjs__WEBPACK_IMPORTED_MODULE_0__.APIClient {\n    /**\n     * API Client for interfacing with the OpenAI API.\n     *\n     * @param {string | undefined} [opts.apiKey=process.env['OPENAI_API_KEY'] ?? undefined]\n     * @param {string | null | undefined} [opts.organization=process.env['OPENAI_ORG_ID'] ?? null]\n     * @param {string} [opts.baseURL=process.env['OPENAI_BASE_URL'] ?? https://api.openai.com/v1] - Override the default base URL for the API.\n     * @param {number} [opts.timeout=10 minutes] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.\n     * @param {number} [opts.httpAgent] - An HTTP agent used to manage HTTP(s) connections.\n     * @param {Core.Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.\n     * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.\n     * @param {Core.Headers} opts.defaultHeaders - Default headers to include with every request to the API.\n     * @param {Core.DefaultQuery} opts.defaultQuery - Default query parameters to include with every request to the API.\n     * @param {boolean} [opts.dangerouslyAllowBrowser=false] - By default, client-side use of this library is not allowed, as it risks exposing your secret API credentials to attackers.\n     */ constructor({ baseURL = _core_mjs__WEBPACK_IMPORTED_MODULE_0__.readEnv(\"OPENAI_BASE_URL\"), apiKey = _core_mjs__WEBPACK_IMPORTED_MODULE_0__.readEnv(\"OPENAI_API_KEY\"), organization = _core_mjs__WEBPACK_IMPORTED_MODULE_0__.readEnv(\"OPENAI_ORG_ID\") ?? null, ...opts } = {}){\n        if (apiKey === undefined) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(\"The OPENAI_API_KEY environment variable is missing or empty; either provide it, or instantiate the OpenAI client with an apiKey option, like new OpenAI({ apiKey: 'My API Key' }).\");\n        }\n        const options = {\n            apiKey,\n            organization,\n            ...opts,\n            baseURL: baseURL || `https://api.openai.com/v1`\n        };\n        if (!options.dangerouslyAllowBrowser && _core_mjs__WEBPACK_IMPORTED_MODULE_0__.isRunningInBrowser()) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(\"It looks like you're running in a browser-like environment.\\n\\nThis is disabled by default, as it risks exposing your secret API credentials to attackers.\\nIf you understand the risks and have appropriate mitigations in place,\\nyou can set the `dangerouslyAllowBrowser` option to `true`, e.g.,\\n\\nnew OpenAI({ apiKey, dangerouslyAllowBrowser: true });\\n\\nhttps://help.openai.com/en/articles/5112595-best-practices-for-api-key-safety\\n\");\n        }\n        super({\n            baseURL: options.baseURL,\n            timeout: options.timeout ?? 600000 /* 10 minutes */ ,\n            httpAgent: options.httpAgent,\n            maxRetries: options.maxRetries,\n            fetch: options.fetch\n        });\n        this.completions = new openai_resources_index__WEBPACK_IMPORTED_MODULE_2__.Completions(this);\n        this.chat = new openai_resources_index__WEBPACK_IMPORTED_MODULE_3__.Chat(this);\n        this.embeddings = new openai_resources_index__WEBPACK_IMPORTED_MODULE_4__.Embeddings(this);\n        this.files = new openai_resources_index__WEBPACK_IMPORTED_MODULE_5__.Files(this);\n        this.images = new openai_resources_index__WEBPACK_IMPORTED_MODULE_6__.Images(this);\n        this.audio = new openai_resources_index__WEBPACK_IMPORTED_MODULE_7__.Audio(this);\n        this.moderations = new openai_resources_index__WEBPACK_IMPORTED_MODULE_8__.Moderations(this);\n        this.models = new openai_resources_index__WEBPACK_IMPORTED_MODULE_9__.Models(this);\n        this.fineTuning = new openai_resources_index__WEBPACK_IMPORTED_MODULE_10__.FineTuning(this);\n        this.beta = new openai_resources_index__WEBPACK_IMPORTED_MODULE_11__.Beta(this);\n        this._options = options;\n        this.apiKey = apiKey;\n        this.organization = organization;\n    }\n    defaultQuery() {\n        return this._options.defaultQuery;\n    }\n    defaultHeaders(opts) {\n        return {\n            ...super.defaultHeaders(opts),\n            \"OpenAI-Organization\": this.organization,\n            ...this._options.defaultHeaders\n        };\n    }\n    authHeaders(opts) {\n        return {\n            Authorization: `Bearer ${this.apiKey}`\n        };\n    }\n}\n_a = OpenAI;\nOpenAI.OpenAI = _a;\nOpenAI.OpenAIError = _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError;\nOpenAI.APIError = _error_mjs__WEBPACK_IMPORTED_MODULE_1__.APIError;\nOpenAI.APIConnectionError = _error_mjs__WEBPACK_IMPORTED_MODULE_1__.APIConnectionError;\nOpenAI.APIConnectionTimeoutError = _error_mjs__WEBPACK_IMPORTED_MODULE_1__.APIConnectionTimeoutError;\nOpenAI.APIUserAbortError = _error_mjs__WEBPACK_IMPORTED_MODULE_1__.APIUserAbortError;\nOpenAI.NotFoundError = _error_mjs__WEBPACK_IMPORTED_MODULE_1__.NotFoundError;\nOpenAI.ConflictError = _error_mjs__WEBPACK_IMPORTED_MODULE_1__.ConflictError;\nOpenAI.RateLimitError = _error_mjs__WEBPACK_IMPORTED_MODULE_1__.RateLimitError;\nOpenAI.BadRequestError = _error_mjs__WEBPACK_IMPORTED_MODULE_1__.BadRequestError;\nOpenAI.AuthenticationError = _error_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthenticationError;\nOpenAI.InternalServerError = _error_mjs__WEBPACK_IMPORTED_MODULE_1__.InternalServerError;\nOpenAI.PermissionDeniedError = _error_mjs__WEBPACK_IMPORTED_MODULE_1__.PermissionDeniedError;\nOpenAI.UnprocessableEntityError = _error_mjs__WEBPACK_IMPORTED_MODULE_1__.UnprocessableEntityError;\nconst { OpenAIError, APIError, APIConnectionError, APIConnectionTimeoutError, APIUserAbortError, NotFoundError, ConflictError, RateLimitError, BadRequestError, AuthenticationError, InternalServerError, PermissionDeniedError, UnprocessableEntityError } = _error_mjs__WEBPACK_IMPORTED_MODULE_1__;\nvar toFile = _uploads_mjs__WEBPACK_IMPORTED_MODULE_12__.toFile;\nvar fileFromPath = _uploads_mjs__WEBPACK_IMPORTED_MODULE_13__.fileFromPath;\n(function(OpenAI) {\n    // Helper functions\n    OpenAI.toFile = _uploads_mjs__WEBPACK_IMPORTED_MODULE_12__.toFile;\n    OpenAI.fileFromPath = _uploads_mjs__WEBPACK_IMPORTED_MODULE_13__.fileFromPath;\n    OpenAI.Page = _pagination_mjs__WEBPACK_IMPORTED_MODULE_14__.Page;\n    OpenAI.CursorPage = _pagination_mjs__WEBPACK_IMPORTED_MODULE_14__.CursorPage;\n    OpenAI.Completions = openai_resources_index__WEBPACK_IMPORTED_MODULE_2__.Completions;\n    OpenAI.Chat = openai_resources_index__WEBPACK_IMPORTED_MODULE_3__.Chat;\n    OpenAI.Embeddings = openai_resources_index__WEBPACK_IMPORTED_MODULE_4__.Embeddings;\n    OpenAI.Files = openai_resources_index__WEBPACK_IMPORTED_MODULE_5__.Files;\n    OpenAI.FileObjectsPage = openai_resources_index__WEBPACK_IMPORTED_MODULE_5__.FileObjectsPage;\n    OpenAI.Images = openai_resources_index__WEBPACK_IMPORTED_MODULE_6__.Images;\n    OpenAI.Audio = openai_resources_index__WEBPACK_IMPORTED_MODULE_7__.Audio;\n    OpenAI.Moderations = openai_resources_index__WEBPACK_IMPORTED_MODULE_8__.Moderations;\n    OpenAI.Models = openai_resources_index__WEBPACK_IMPORTED_MODULE_9__.Models;\n    OpenAI.ModelsPage = openai_resources_index__WEBPACK_IMPORTED_MODULE_9__.ModelsPage;\n    OpenAI.FineTuning = openai_resources_index__WEBPACK_IMPORTED_MODULE_10__.FineTuning;\n    OpenAI.Beta = openai_resources_index__WEBPACK_IMPORTED_MODULE_11__.Beta;\n})(OpenAI || (OpenAI = {}));\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (OpenAI); //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openai/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/openai/lib/AbstractChatCompletionRunner.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/openai/lib/AbstractChatCompletionRunner.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbstractChatCompletionRunner: () => (/* binding */ AbstractChatCompletionRunner)\n/* harmony export */ });\n/* harmony import */ var openai_error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/error */ \"(ssr)/./node_modules/openai/error.mjs\");\n/* harmony import */ var _RunnableFunction_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./RunnableFunction.mjs */ \"(ssr)/./node_modules/openai/lib/RunnableFunction.mjs\");\n/* harmony import */ var _chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chatCompletionUtils.mjs */ \"(ssr)/./node_modules/openai/lib/chatCompletionUtils.mjs\");\nvar __classPrivateFieldSet = undefined && undefined.__classPrivateFieldSet || function(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = undefined && undefined.__classPrivateFieldGet || function(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _AbstractChatCompletionRunner_instances, _AbstractChatCompletionRunner_connectedPromise, _AbstractChatCompletionRunner_resolveConnectedPromise, _AbstractChatCompletionRunner_rejectConnectedPromise, _AbstractChatCompletionRunner_endPromise, _AbstractChatCompletionRunner_resolveEndPromise, _AbstractChatCompletionRunner_rejectEndPromise, _AbstractChatCompletionRunner_listeners, _AbstractChatCompletionRunner_ended, _AbstractChatCompletionRunner_errored, _AbstractChatCompletionRunner_aborted, _AbstractChatCompletionRunner_catchingPromiseCreated, _AbstractChatCompletionRunner_getFinalContent, _AbstractChatCompletionRunner_getFinalMessage, _AbstractChatCompletionRunner_getFinalFunctionCall, _AbstractChatCompletionRunner_getFinalFunctionCallResult, _AbstractChatCompletionRunner_calculateTotalUsage, _AbstractChatCompletionRunner_handleError, _AbstractChatCompletionRunner_validateParams, _AbstractChatCompletionRunner_stringifyFunctionCallResult;\n\n\n\nconst DEFAULT_MAX_CHAT_COMPLETIONS = 10;\nclass AbstractChatCompletionRunner {\n    constructor(){\n        _AbstractChatCompletionRunner_instances.add(this);\n        this.controller = new AbortController();\n        _AbstractChatCompletionRunner_connectedPromise.set(this, void 0);\n        _AbstractChatCompletionRunner_resolveConnectedPromise.set(this, ()=>{});\n        _AbstractChatCompletionRunner_rejectConnectedPromise.set(this, ()=>{});\n        _AbstractChatCompletionRunner_endPromise.set(this, void 0);\n        _AbstractChatCompletionRunner_resolveEndPromise.set(this, ()=>{});\n        _AbstractChatCompletionRunner_rejectEndPromise.set(this, ()=>{});\n        _AbstractChatCompletionRunner_listeners.set(this, {});\n        this._chatCompletions = [];\n        this.messages = [];\n        _AbstractChatCompletionRunner_ended.set(this, false);\n        _AbstractChatCompletionRunner_errored.set(this, false);\n        _AbstractChatCompletionRunner_aborted.set(this, false);\n        _AbstractChatCompletionRunner_catchingPromiseCreated.set(this, false);\n        _AbstractChatCompletionRunner_handleError.set(this, (error)=>{\n            __classPrivateFieldSet(this, _AbstractChatCompletionRunner_errored, true, \"f\");\n            if (error instanceof Error && error.name === \"AbortError\") {\n                error = new openai_error__WEBPACK_IMPORTED_MODULE_0__.APIUserAbortError();\n            }\n            if (error instanceof openai_error__WEBPACK_IMPORTED_MODULE_0__.APIUserAbortError) {\n                __classPrivateFieldSet(this, _AbstractChatCompletionRunner_aborted, true, \"f\");\n                return this._emit(\"abort\", error);\n            }\n            if (error instanceof openai_error__WEBPACK_IMPORTED_MODULE_0__.OpenAIError) {\n                return this._emit(\"error\", error);\n            }\n            if (error instanceof Error) {\n                const openAIError = new openai_error__WEBPACK_IMPORTED_MODULE_0__.OpenAIError(error.message);\n                // @ts-ignore\n                openAIError.cause = error;\n                return this._emit(\"error\", openAIError);\n            }\n            return this._emit(\"error\", new openai_error__WEBPACK_IMPORTED_MODULE_0__.OpenAIError(String(error)));\n        });\n        __classPrivateFieldSet(this, _AbstractChatCompletionRunner_connectedPromise, new Promise((resolve, reject)=>{\n            __classPrivateFieldSet(this, _AbstractChatCompletionRunner_resolveConnectedPromise, resolve, \"f\");\n            __classPrivateFieldSet(this, _AbstractChatCompletionRunner_rejectConnectedPromise, reject, \"f\");\n        }), \"f\");\n        __classPrivateFieldSet(this, _AbstractChatCompletionRunner_endPromise, new Promise((resolve, reject)=>{\n            __classPrivateFieldSet(this, _AbstractChatCompletionRunner_resolveEndPromise, resolve, \"f\");\n            __classPrivateFieldSet(this, _AbstractChatCompletionRunner_rejectEndPromise, reject, \"f\");\n        }), \"f\");\n        // Don't let these promises cause unhandled rejection errors.\n        // we will manually cause an unhandled rejection error later\n        // if the user hasn't registered any error listener or called\n        // any promise-returning method.\n        __classPrivateFieldGet(this, _AbstractChatCompletionRunner_connectedPromise, \"f\").catch(()=>{});\n        __classPrivateFieldGet(this, _AbstractChatCompletionRunner_endPromise, \"f\").catch(()=>{});\n    }\n    _run(executor) {\n        // Unfortunately if we call `executor()` immediately we get runtime errors about\n        // references to `this` before the `super()` constructor call returns.\n        setTimeout(()=>{\n            executor().then(()=>{\n                this._emitFinal();\n                this._emit(\"end\");\n            }, __classPrivateFieldGet(this, _AbstractChatCompletionRunner_handleError, \"f\"));\n        }, 0);\n    }\n    _addChatCompletion(chatCompletion) {\n        this._chatCompletions.push(chatCompletion);\n        this._emit(\"chatCompletion\", chatCompletion);\n        const message = chatCompletion.choices[0]?.message;\n        if (message) this._addMessage(message);\n        return chatCompletion;\n    }\n    _addMessage(message, emit = true) {\n        if (!(\"content\" in message)) message.content = null;\n        this.messages.push(message);\n        if (emit) {\n            this._emit(\"message\", message);\n            if (((0,_chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.isFunctionMessage)(message) || (0,_chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.isToolMessage)(message)) && message.content) {\n                // Note, this assumes that {role: 'tool', content: …} is always the result of a call of tool of type=function.\n                this._emit(\"functionCallResult\", message.content);\n            } else if ((0,_chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.isAssistantMessage)(message) && message.function_call) {\n                this._emit(\"functionCall\", message.function_call);\n            } else if ((0,_chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.isAssistantMessage)(message) && message.tool_calls) {\n                for (const tool_call of message.tool_calls){\n                    if (tool_call.type === \"function\") {\n                        this._emit(\"functionCall\", tool_call.function);\n                    }\n                }\n            }\n        }\n    }\n    _connected() {\n        if (this.ended) return;\n        __classPrivateFieldGet(this, _AbstractChatCompletionRunner_resolveConnectedPromise, \"f\").call(this);\n        this._emit(\"connect\");\n    }\n    get ended() {\n        return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_ended, \"f\");\n    }\n    get errored() {\n        return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_errored, \"f\");\n    }\n    get aborted() {\n        return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_aborted, \"f\");\n    }\n    abort() {\n        this.controller.abort();\n    }\n    /**\n     * Adds the listener function to the end of the listeners array for the event.\n     * No checks are made to see if the listener has already been added. Multiple calls passing\n     * the same combination of event and listener will result in the listener being added, and\n     * called, multiple times.\n     * @returns this ChatCompletionStream, so that calls can be chained\n     */ on(event, listener) {\n        const listeners = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_listeners, \"f\")[event] || (__classPrivateFieldGet(this, _AbstractChatCompletionRunner_listeners, \"f\")[event] = []);\n        listeners.push({\n            listener\n        });\n        return this;\n    }\n    /**\n     * Removes the specified listener from the listener array for the event.\n     * off() will remove, at most, one instance of a listener from the listener array. If any single\n     * listener has been added multiple times to the listener array for the specified event, then\n     * off() must be called multiple times to remove each instance.\n     * @returns this ChatCompletionStream, so that calls can be chained\n     */ off(event, listener) {\n        const listeners = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_listeners, \"f\")[event];\n        if (!listeners) return this;\n        const index = listeners.findIndex((l)=>l.listener === listener);\n        if (index >= 0) listeners.splice(index, 1);\n        return this;\n    }\n    /**\n     * Adds a one-time listener function for the event. The next time the event is triggered,\n     * this listener is removed and then invoked.\n     * @returns this ChatCompletionStream, so that calls can be chained\n     */ once(event, listener) {\n        const listeners = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_listeners, \"f\")[event] || (__classPrivateFieldGet(this, _AbstractChatCompletionRunner_listeners, \"f\")[event] = []);\n        listeners.push({\n            listener,\n            once: true\n        });\n        return this;\n    }\n    /**\n     * This is similar to `.once()`, but returns a Promise that resolves the next time\n     * the event is triggered, instead of calling a listener callback.\n     * @returns a Promise that resolves the next time given event is triggered,\n     * or rejects if an error is emitted.  (If you request the 'error' event,\n     * returns a promise that resolves with the error).\n     *\n     * Example:\n     *\n     *   const message = await stream.emitted('message') // rejects if the stream errors\n     */ emitted(event) {\n        return new Promise((resolve, reject)=>{\n            __classPrivateFieldSet(this, _AbstractChatCompletionRunner_catchingPromiseCreated, true, \"f\");\n            if (event !== \"error\") this.once(\"error\", reject);\n            this.once(event, resolve);\n        });\n    }\n    async done() {\n        __classPrivateFieldSet(this, _AbstractChatCompletionRunner_catchingPromiseCreated, true, \"f\");\n        await __classPrivateFieldGet(this, _AbstractChatCompletionRunner_endPromise, \"f\");\n    }\n    /**\n     * @returns a promise that resolves with the final ChatCompletion, or rejects\n     * if an error occurred or the stream ended prematurely without producing a ChatCompletion.\n     */ async finalChatCompletion() {\n        await this.done();\n        const completion = this._chatCompletions[this._chatCompletions.length - 1];\n        if (!completion) throw new openai_error__WEBPACK_IMPORTED_MODULE_0__.OpenAIError(\"stream ended without producing a ChatCompletion\");\n        return completion;\n    }\n    /**\n     * @returns a promise that resolves with the content of the final ChatCompletionMessage, or rejects\n     * if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.\n     */ async finalContent() {\n        await this.done();\n        return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalContent).call(this);\n    }\n    /**\n     * @returns a promise that resolves with the the final assistant ChatCompletionMessage response,\n     * or rejects if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.\n     */ async finalMessage() {\n        await this.done();\n        return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalMessage).call(this);\n    }\n    /**\n     * @returns a promise that resolves with the content of the final FunctionCall, or rejects\n     * if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.\n     */ async finalFunctionCall() {\n        await this.done();\n        return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalFunctionCall).call(this);\n    }\n    async finalFunctionCallResult() {\n        await this.done();\n        return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalFunctionCallResult).call(this);\n    }\n    async totalUsage() {\n        await this.done();\n        return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_calculateTotalUsage).call(this);\n    }\n    allChatCompletions() {\n        return [\n            ...this._chatCompletions\n        ];\n    }\n    _emit(event, ...args) {\n        // make sure we don't emit any events after end\n        if (__classPrivateFieldGet(this, _AbstractChatCompletionRunner_ended, \"f\")) {\n            return;\n        }\n        if (event === \"end\") {\n            __classPrivateFieldSet(this, _AbstractChatCompletionRunner_ended, true, \"f\");\n            __classPrivateFieldGet(this, _AbstractChatCompletionRunner_resolveEndPromise, \"f\").call(this);\n        }\n        const listeners = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_listeners, \"f\")[event];\n        if (listeners) {\n            __classPrivateFieldGet(this, _AbstractChatCompletionRunner_listeners, \"f\")[event] = listeners.filter((l)=>!l.once);\n            listeners.forEach(({ listener })=>listener(...args));\n        }\n        if (event === \"abort\") {\n            const error = args[0];\n            if (!__classPrivateFieldGet(this, _AbstractChatCompletionRunner_catchingPromiseCreated, \"f\") && !listeners?.length) {\n                Promise.reject(error);\n            }\n            __classPrivateFieldGet(this, _AbstractChatCompletionRunner_rejectConnectedPromise, \"f\").call(this, error);\n            __classPrivateFieldGet(this, _AbstractChatCompletionRunner_rejectEndPromise, \"f\").call(this, error);\n            this._emit(\"end\");\n            return;\n        }\n        if (event === \"error\") {\n            // NOTE: _emit('error', error) should only be called from #handleError().\n            const error = args[0];\n            if (!__classPrivateFieldGet(this, _AbstractChatCompletionRunner_catchingPromiseCreated, \"f\") && !listeners?.length) {\n                // Trigger an unhandled rejection if the user hasn't registered any error handlers.\n                // If you are seeing stack traces here, make sure to handle errors via either:\n                // - runner.on('error', () => ...)\n                // - await runner.done()\n                // - await runner.finalChatCompletion()\n                // - etc.\n                Promise.reject(error);\n            }\n            __classPrivateFieldGet(this, _AbstractChatCompletionRunner_rejectConnectedPromise, \"f\").call(this, error);\n            __classPrivateFieldGet(this, _AbstractChatCompletionRunner_rejectEndPromise, \"f\").call(this, error);\n            this._emit(\"end\");\n        }\n    }\n    _emitFinal() {\n        const completion = this._chatCompletions[this._chatCompletions.length - 1];\n        if (completion) this._emit(\"finalChatCompletion\", completion);\n        const finalMessage = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalMessage).call(this);\n        if (finalMessage) this._emit(\"finalMessage\", finalMessage);\n        const finalContent = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalContent).call(this);\n        if (finalContent) this._emit(\"finalContent\", finalContent);\n        const finalFunctionCall = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalFunctionCall).call(this);\n        if (finalFunctionCall) this._emit(\"finalFunctionCall\", finalFunctionCall);\n        const finalFunctionCallResult = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalFunctionCallResult).call(this);\n        if (finalFunctionCallResult != null) this._emit(\"finalFunctionCallResult\", finalFunctionCallResult);\n        if (this._chatCompletions.some((c)=>c.usage)) {\n            this._emit(\"totalUsage\", __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_calculateTotalUsage).call(this));\n        }\n    }\n    async _createChatCompletion(completions, params, options) {\n        const signal = options?.signal;\n        if (signal) {\n            if (signal.aborted) this.controller.abort();\n            signal.addEventListener(\"abort\", ()=>this.controller.abort());\n        }\n        __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_validateParams).call(this, params);\n        const chatCompletion = await completions.create({\n            ...params,\n            stream: false\n        }, {\n            ...options,\n            signal: this.controller.signal\n        });\n        this._connected();\n        return this._addChatCompletion(chatCompletion);\n    }\n    async _runChatCompletion(completions, params, options) {\n        for (const message of params.messages){\n            this._addMessage(message, false);\n        }\n        return await this._createChatCompletion(completions, params, options);\n    }\n    async _runFunctions(completions, params, options) {\n        const role = \"function\";\n        const { function_call = \"auto\", stream, ...restParams } = params;\n        const singleFunctionToCall = typeof function_call !== \"string\" && function_call?.name;\n        const { maxChatCompletions = DEFAULT_MAX_CHAT_COMPLETIONS } = options || {};\n        const functionsByName = {};\n        for (const f of params.functions){\n            functionsByName[f.name || f.function.name] = f;\n        }\n        const functions = params.functions.map((f)=>({\n                name: f.name || f.function.name,\n                parameters: f.parameters,\n                description: f.description\n            }));\n        for (const message of params.messages){\n            this._addMessage(message, false);\n        }\n        for(let i = 0; i < maxChatCompletions; ++i){\n            const chatCompletion = await this._createChatCompletion(completions, {\n                ...restParams,\n                function_call,\n                functions,\n                messages: [\n                    ...this.messages\n                ]\n            }, options);\n            const message = chatCompletion.choices[0]?.message;\n            if (!message) {\n                throw new openai_error__WEBPACK_IMPORTED_MODULE_0__.OpenAIError(`missing message in ChatCompletion response`);\n            }\n            if (!message.function_call) return;\n            const { name, arguments: args } = message.function_call;\n            const fn = functionsByName[name];\n            if (!fn) {\n                const content = `Invalid function_call: ${JSON.stringify(name)}. Available options are: ${functions.map((f)=>JSON.stringify(f.name)).join(\", \")}. Please try again`;\n                this._addMessage({\n                    role,\n                    name,\n                    content\n                });\n                continue;\n            } else if (singleFunctionToCall && singleFunctionToCall !== name) {\n                const content = `Invalid function_call: ${JSON.stringify(name)}. ${JSON.stringify(singleFunctionToCall)} requested. Please try again`;\n                this._addMessage({\n                    role,\n                    name,\n                    content\n                });\n                continue;\n            }\n            let parsed;\n            try {\n                parsed = (0,_RunnableFunction_mjs__WEBPACK_IMPORTED_MODULE_2__.isRunnableFunctionWithParse)(fn) ? await fn.parse(args) : args;\n            } catch (error) {\n                this._addMessage({\n                    role,\n                    name,\n                    content: error instanceof Error ? error.message : String(error)\n                });\n                continue;\n            }\n            // @ts-expect-error it can't rule out `never` type.\n            const rawContent = await fn.function(parsed, this);\n            const content = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_stringifyFunctionCallResult).call(this, rawContent);\n            this._addMessage({\n                role,\n                name,\n                content\n            });\n            if (singleFunctionToCall) return;\n        }\n    }\n    async _runTools(completions, params, options) {\n        const role = \"tool\";\n        const { tool_choice = \"auto\", stream, ...restParams } = params;\n        const singleFunctionToCall = typeof tool_choice !== \"string\" && tool_choice?.function?.name;\n        const { maxChatCompletions = DEFAULT_MAX_CHAT_COMPLETIONS } = options || {};\n        const functionsByName = {};\n        for (const f of params.tools){\n            if (f.type === \"function\") {\n                functionsByName[f.function.name || f.function.function.name] = f.function;\n            }\n        }\n        const tools = \"tools\" in params ? params.tools.map((t)=>t.type === \"function\" ? {\n                type: \"function\",\n                function: {\n                    name: t.function.name || t.function.function.name,\n                    parameters: t.function.parameters,\n                    description: t.function.description\n                }\n            } : t) : undefined;\n        for (const message of params.messages){\n            this._addMessage(message, false);\n        }\n        for(let i = 0; i < maxChatCompletions; ++i){\n            const chatCompletion = await this._createChatCompletion(completions, {\n                ...restParams,\n                tool_choice,\n                tools,\n                messages: [\n                    ...this.messages\n                ]\n            }, options);\n            const message = chatCompletion.choices[0]?.message;\n            if (!message) {\n                throw new openai_error__WEBPACK_IMPORTED_MODULE_0__.OpenAIError(`missing message in ChatCompletion response`);\n            }\n            if (!message.tool_calls) {\n                return;\n            }\n            for (const tool_call of message.tool_calls){\n                if (tool_call.type !== \"function\") continue;\n                const tool_call_id = tool_call.id;\n                const { name, arguments: args } = tool_call.function;\n                const fn = functionsByName[name];\n                if (!fn) {\n                    const content = `Invalid tool_call: ${JSON.stringify(name)}. Available options are: ${tools.map((f)=>JSON.stringify(f.function.name)).join(\", \")}. Please try again`;\n                    this._addMessage({\n                        role,\n                        tool_call_id,\n                        content\n                    });\n                    continue;\n                } else if (singleFunctionToCall && singleFunctionToCall !== name) {\n                    const content = `Invalid tool_call: ${JSON.stringify(name)}. ${JSON.stringify(singleFunctionToCall)} requested. Please try again`;\n                    this._addMessage({\n                        role,\n                        tool_call_id,\n                        content\n                    });\n                    continue;\n                }\n                let parsed;\n                try {\n                    parsed = (0,_RunnableFunction_mjs__WEBPACK_IMPORTED_MODULE_2__.isRunnableFunctionWithParse)(fn) ? await fn.parse(args) : args;\n                } catch (error) {\n                    const content = error instanceof Error ? error.message : String(error);\n                    this._addMessage({\n                        role,\n                        tool_call_id,\n                        content\n                    });\n                    continue;\n                }\n                // @ts-expect-error it can't rule out `never` type.\n                const rawContent = await fn.function(parsed, this);\n                const content = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_stringifyFunctionCallResult).call(this, rawContent);\n                this._addMessage({\n                    role,\n                    tool_call_id,\n                    content\n                });\n                if (singleFunctionToCall) {\n                    return;\n                }\n            }\n        }\n        return;\n    }\n}\n_AbstractChatCompletionRunner_connectedPromise = new WeakMap(), _AbstractChatCompletionRunner_resolveConnectedPromise = new WeakMap(), _AbstractChatCompletionRunner_rejectConnectedPromise = new WeakMap(), _AbstractChatCompletionRunner_endPromise = new WeakMap(), _AbstractChatCompletionRunner_resolveEndPromise = new WeakMap(), _AbstractChatCompletionRunner_rejectEndPromise = new WeakMap(), _AbstractChatCompletionRunner_listeners = new WeakMap(), _AbstractChatCompletionRunner_ended = new WeakMap(), _AbstractChatCompletionRunner_errored = new WeakMap(), _AbstractChatCompletionRunner_aborted = new WeakMap(), _AbstractChatCompletionRunner_catchingPromiseCreated = new WeakMap(), _AbstractChatCompletionRunner_handleError = new WeakMap(), _AbstractChatCompletionRunner_instances = new WeakSet(), _AbstractChatCompletionRunner_getFinalContent = function _AbstractChatCompletionRunner_getFinalContent() {\n    return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalMessage).call(this).content ?? null;\n}, _AbstractChatCompletionRunner_getFinalMessage = function _AbstractChatCompletionRunner_getFinalMessage() {\n    let i = this.messages.length;\n    while(i-- > 0){\n        const message = this.messages[i];\n        if ((0,_chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.isAssistantMessage)(message)) {\n            return {\n                ...message,\n                content: message.content ?? null\n            };\n        }\n    }\n    throw new openai_error__WEBPACK_IMPORTED_MODULE_0__.OpenAIError(\"stream ended without producing a ChatCompletionMessage with role=assistant\");\n}, _AbstractChatCompletionRunner_getFinalFunctionCall = function _AbstractChatCompletionRunner_getFinalFunctionCall() {\n    for(let i = this.messages.length - 1; i >= 0; i--){\n        const message = this.messages[i];\n        if ((0,_chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.isAssistantMessage)(message) && message?.function_call) {\n            return message.function_call;\n        }\n        if ((0,_chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.isAssistantMessage)(message) && message?.tool_calls?.length) {\n            return message.tool_calls.at(-1)?.function;\n        }\n    }\n    return;\n}, _AbstractChatCompletionRunner_getFinalFunctionCallResult = function _AbstractChatCompletionRunner_getFinalFunctionCallResult() {\n    for(let i = this.messages.length - 1; i >= 0; i--){\n        const message = this.messages[i];\n        if ((0,_chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.isFunctionMessage)(message) && message.content != null) {\n            return message.content;\n        }\n        if ((0,_chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.isToolMessage)(message) && message.content != null && this.messages.some((x)=>x.role === \"assistant\" && x.tool_calls?.some((y)=>y.type === \"function\" && y.id === message.tool_call_id))) {\n            return message.content;\n        }\n    }\n    return;\n}, _AbstractChatCompletionRunner_calculateTotalUsage = function _AbstractChatCompletionRunner_calculateTotalUsage() {\n    const total = {\n        completion_tokens: 0,\n        prompt_tokens: 0,\n        total_tokens: 0\n    };\n    for (const { usage } of this._chatCompletions){\n        if (usage) {\n            total.completion_tokens += usage.completion_tokens;\n            total.prompt_tokens += usage.prompt_tokens;\n            total.total_tokens += usage.total_tokens;\n        }\n    }\n    return total;\n}, _AbstractChatCompletionRunner_validateParams = function _AbstractChatCompletionRunner_validateParams(params) {\n    if (params.n != null && params.n > 1) {\n        throw new openai_error__WEBPACK_IMPORTED_MODULE_0__.OpenAIError(\"ChatCompletion convenience helpers only support n=1 at this time. To use n>1, please use chat.completions.create() directly.\");\n    }\n}, _AbstractChatCompletionRunner_stringifyFunctionCallResult = function _AbstractChatCompletionRunner_stringifyFunctionCallResult(rawContent) {\n    return typeof rawContent === \"string\" ? rawContent : rawContent === undefined ? \"undefined\" : JSON.stringify(rawContent);\n}; //# sourceMappingURL=AbstractChatCompletionRunner.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openai/lib/AbstractChatCompletionRunner.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/openai/lib/ChatCompletionRunner.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/openai/lib/ChatCompletionRunner.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatCompletionRunner: () => (/* binding */ ChatCompletionRunner)\n/* harmony export */ });\n/* harmony import */ var _AbstractChatCompletionRunner_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AbstractChatCompletionRunner.mjs */ \"(ssr)/./node_modules/openai/lib/AbstractChatCompletionRunner.mjs\");\n/* harmony import */ var _chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chatCompletionUtils.mjs */ \"(ssr)/./node_modules/openai/lib/chatCompletionUtils.mjs\");\n\n\nclass ChatCompletionRunner extends _AbstractChatCompletionRunner_mjs__WEBPACK_IMPORTED_MODULE_0__.AbstractChatCompletionRunner {\n    /** @deprecated - please use `runTools` instead. */ static runFunctions(completions, params, options) {\n        const runner = new ChatCompletionRunner();\n        const opts = {\n            ...options,\n            headers: {\n                ...options?.headers,\n                \"X-Stainless-Helper-Method\": \"runFunctions\"\n            }\n        };\n        runner._run(()=>runner._runFunctions(completions, params, opts));\n        return runner;\n    }\n    static runTools(completions, params, options) {\n        const runner = new ChatCompletionRunner();\n        const opts = {\n            ...options,\n            headers: {\n                ...options?.headers,\n                \"X-Stainless-Helper-Method\": \"runTools\"\n            }\n        };\n        runner._run(()=>runner._runTools(completions, params, opts));\n        return runner;\n    }\n    _addMessage(message) {\n        super._addMessage(message);\n        if ((0,_chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.isAssistantMessage)(message) && message.content) {\n            this._emit(\"content\", message.content);\n        }\n    }\n} //# sourceMappingURL=ChatCompletionRunner.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2xpYi9DaGF0Q29tcGxldGlvblJ1bm5lci5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQW1GO0FBQ3BCO0FBQ3hELE1BQU1FLDZCQUE2QkYsMkZBQTRCQTtJQUNsRSxpREFBaUQsR0FDakQsT0FBT0csYUFBYUMsV0FBVyxFQUFFQyxNQUFNLEVBQUVDLE9BQU8sRUFBRTtRQUM5QyxNQUFNQyxTQUFTLElBQUlMO1FBQ25CLE1BQU1NLE9BQU87WUFDVCxHQUFHRixPQUFPO1lBQ1ZHLFNBQVM7Z0JBQUUsR0FBR0gsU0FBU0csT0FBTztnQkFBRSw2QkFBNkI7WUFBZTtRQUNoRjtRQUNBRixPQUFPRyxJQUFJLENBQUMsSUFBTUgsT0FBT0ksYUFBYSxDQUFDUCxhQUFhQyxRQUFRRztRQUM1RCxPQUFPRDtJQUNYO0lBQ0EsT0FBT0ssU0FBU1IsV0FBVyxFQUFFQyxNQUFNLEVBQUVDLE9BQU8sRUFBRTtRQUMxQyxNQUFNQyxTQUFTLElBQUlMO1FBQ25CLE1BQU1NLE9BQU87WUFDVCxHQUFHRixPQUFPO1lBQ1ZHLFNBQVM7Z0JBQUUsR0FBR0gsU0FBU0csT0FBTztnQkFBRSw2QkFBNkI7WUFBVztRQUM1RTtRQUNBRixPQUFPRyxJQUFJLENBQUMsSUFBTUgsT0FBT00sU0FBUyxDQUFDVCxhQUFhQyxRQUFRRztRQUN4RCxPQUFPRDtJQUNYO0lBQ0FPLFlBQVlDLE9BQU8sRUFBRTtRQUNqQixLQUFLLENBQUNELFlBQVlDO1FBQ2xCLElBQUlkLDRFQUFrQkEsQ0FBQ2MsWUFBWUEsUUFBUUMsT0FBTyxFQUFFO1lBQ2hELElBQUksQ0FBQ0MsS0FBSyxDQUFDLFdBQVdGLFFBQVFDLE9BQU87UUFDekM7SUFDSjtBQUNKLEVBQ0EsaURBQWlEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktYXBwLy4vbm9kZV9tb2R1bGVzL29wZW5haS9saWIvQ2hhdENvbXBsZXRpb25SdW5uZXIubWpzPzFlMGQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWJzdHJhY3RDaGF0Q29tcGxldGlvblJ1bm5lciwgfSBmcm9tIFwiLi9BYnN0cmFjdENoYXRDb21wbGV0aW9uUnVubmVyLm1qc1wiO1xuaW1wb3J0IHsgaXNBc3Npc3RhbnRNZXNzYWdlIH0gZnJvbSBcIi4vY2hhdENvbXBsZXRpb25VdGlscy5tanNcIjtcbmV4cG9ydCBjbGFzcyBDaGF0Q29tcGxldGlvblJ1bm5lciBleHRlbmRzIEFic3RyYWN0Q2hhdENvbXBsZXRpb25SdW5uZXIge1xuICAgIC8qKiBAZGVwcmVjYXRlZCAtIHBsZWFzZSB1c2UgYHJ1blRvb2xzYCBpbnN0ZWFkLiAqL1xuICAgIHN0YXRpYyBydW5GdW5jdGlvbnMoY29tcGxldGlvbnMsIHBhcmFtcywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBydW5uZXIgPSBuZXcgQ2hhdENvbXBsZXRpb25SdW5uZXIoKTtcbiAgICAgICAgY29uc3Qgb3B0cyA9IHtcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiB7IC4uLm9wdGlvbnM/LmhlYWRlcnMsICdYLVN0YWlubGVzcy1IZWxwZXItTWV0aG9kJzogJ3J1bkZ1bmN0aW9ucycgfSxcbiAgICAgICAgfTtcbiAgICAgICAgcnVubmVyLl9ydW4oKCkgPT4gcnVubmVyLl9ydW5GdW5jdGlvbnMoY29tcGxldGlvbnMsIHBhcmFtcywgb3B0cykpO1xuICAgICAgICByZXR1cm4gcnVubmVyO1xuICAgIH1cbiAgICBzdGF0aWMgcnVuVG9vbHMoY29tcGxldGlvbnMsIHBhcmFtcywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBydW5uZXIgPSBuZXcgQ2hhdENvbXBsZXRpb25SdW5uZXIoKTtcbiAgICAgICAgY29uc3Qgb3B0cyA9IHtcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiB7IC4uLm9wdGlvbnM/LmhlYWRlcnMsICdYLVN0YWlubGVzcy1IZWxwZXItTWV0aG9kJzogJ3J1blRvb2xzJyB9LFxuICAgICAgICB9O1xuICAgICAgICBydW5uZXIuX3J1bigoKSA9PiBydW5uZXIuX3J1blRvb2xzKGNvbXBsZXRpb25zLCBwYXJhbXMsIG9wdHMpKTtcbiAgICAgICAgcmV0dXJuIHJ1bm5lcjtcbiAgICB9XG4gICAgX2FkZE1lc3NhZ2UobWVzc2FnZSkge1xuICAgICAgICBzdXBlci5fYWRkTWVzc2FnZShtZXNzYWdlKTtcbiAgICAgICAgaWYgKGlzQXNzaXN0YW50TWVzc2FnZShtZXNzYWdlKSAmJiBtZXNzYWdlLmNvbnRlbnQpIHtcbiAgICAgICAgICAgIHRoaXMuX2VtaXQoJ2NvbnRlbnQnLCBtZXNzYWdlLmNvbnRlbnQpO1xuICAgICAgICB9XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q2hhdENvbXBsZXRpb25SdW5uZXIubWpzLm1hcCJdLCJuYW1lcyI6WyJBYnN0cmFjdENoYXRDb21wbGV0aW9uUnVubmVyIiwiaXNBc3Npc3RhbnRNZXNzYWdlIiwiQ2hhdENvbXBsZXRpb25SdW5uZXIiLCJydW5GdW5jdGlvbnMiLCJjb21wbGV0aW9ucyIsInBhcmFtcyIsIm9wdGlvbnMiLCJydW5uZXIiLCJvcHRzIiwiaGVhZGVycyIsIl9ydW4iLCJfcnVuRnVuY3Rpb25zIiwicnVuVG9vbHMiLCJfcnVuVG9vbHMiLCJfYWRkTWVzc2FnZSIsIm1lc3NhZ2UiLCJjb250ZW50IiwiX2VtaXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openai/lib/ChatCompletionRunner.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/openai/lib/ChatCompletionStream.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/openai/lib/ChatCompletionStream.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatCompletionStream: () => (/* binding */ ChatCompletionStream)\n/* harmony export */ });\n/* harmony import */ var openai_error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai/error */ \"(ssr)/./node_modules/openai/error.mjs\");\n/* harmony import */ var _AbstractChatCompletionRunner_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AbstractChatCompletionRunner.mjs */ \"(ssr)/./node_modules/openai/lib/AbstractChatCompletionRunner.mjs\");\n/* harmony import */ var openai_streaming__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! openai/streaming */ \"(ssr)/./node_modules/openai/streaming.mjs\");\nvar __classPrivateFieldGet = undefined && undefined.__classPrivateFieldGet || function(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = undefined && undefined.__classPrivateFieldSet || function(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar _ChatCompletionStream_instances, _ChatCompletionStream_currentChatCompletionSnapshot, _ChatCompletionStream_beginRequest, _ChatCompletionStream_addChunk, _ChatCompletionStream_endRequest, _ChatCompletionStream_accumulateChatCompletion;\n\n\n\nclass ChatCompletionStream extends _AbstractChatCompletionRunner_mjs__WEBPACK_IMPORTED_MODULE_0__.AbstractChatCompletionRunner {\n    constructor(){\n        super(...arguments);\n        _ChatCompletionStream_instances.add(this);\n        _ChatCompletionStream_currentChatCompletionSnapshot.set(this, void 0);\n    }\n    get currentChatCompletionSnapshot() {\n        return __classPrivateFieldGet(this, _ChatCompletionStream_currentChatCompletionSnapshot, \"f\");\n    }\n    /**\n     * Intended for use on the frontend, consuming a stream produced with\n     * `.toReadableStream()` on the backend.\n     *\n     * Note that messages sent to the model do not appear in `.on('message')`\n     * in this context.\n     */ static fromReadableStream(stream) {\n        const runner = new ChatCompletionStream();\n        runner._run(()=>runner._fromReadableStream(stream));\n        return runner;\n    }\n    static createChatCompletion(completions, params, options) {\n        const runner = new ChatCompletionStream();\n        runner._run(()=>runner._runChatCompletion(completions, {\n                ...params,\n                stream: true\n            }, {\n                ...options,\n                headers: {\n                    ...options?.headers,\n                    \"X-Stainless-Helper-Method\": \"stream\"\n                }\n            }));\n        return runner;\n    }\n    async _createChatCompletion(completions, params, options) {\n        const signal = options?.signal;\n        if (signal) {\n            if (signal.aborted) this.controller.abort();\n            signal.addEventListener(\"abort\", ()=>this.controller.abort());\n        }\n        __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_beginRequest).call(this);\n        const stream = await completions.create({\n            ...params,\n            stream: true\n        }, {\n            ...options,\n            signal: this.controller.signal\n        });\n        this._connected();\n        for await (const chunk of stream){\n            __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_addChunk).call(this, chunk);\n        }\n        if (stream.controller.signal?.aborted) {\n            throw new openai_error__WEBPACK_IMPORTED_MODULE_1__.APIUserAbortError();\n        }\n        return this._addChatCompletion(__classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_endRequest).call(this));\n    }\n    async _fromReadableStream(readableStream, options) {\n        const signal = options?.signal;\n        if (signal) {\n            if (signal.aborted) this.controller.abort();\n            signal.addEventListener(\"abort\", ()=>this.controller.abort());\n        }\n        __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_beginRequest).call(this);\n        this._connected();\n        const stream = openai_streaming__WEBPACK_IMPORTED_MODULE_2__.Stream.fromReadableStream(readableStream, this.controller);\n        let chatId;\n        for await (const chunk of stream){\n            if (chatId && chatId !== chunk.id) {\n                // A new request has been made.\n                this._addChatCompletion(__classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_endRequest).call(this));\n            }\n            __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_addChunk).call(this, chunk);\n            chatId = chunk.id;\n        }\n        if (stream.controller.signal?.aborted) {\n            throw new openai_error__WEBPACK_IMPORTED_MODULE_1__.APIUserAbortError();\n        }\n        return this._addChatCompletion(__classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_endRequest).call(this));\n    }\n    [(_ChatCompletionStream_currentChatCompletionSnapshot = new WeakMap(), _ChatCompletionStream_instances = new WeakSet(), _ChatCompletionStream_beginRequest = function _ChatCompletionStream_beginRequest() {\n        if (this.ended) return;\n        __classPrivateFieldSet(this, _ChatCompletionStream_currentChatCompletionSnapshot, undefined, \"f\");\n    }, _ChatCompletionStream_addChunk = function _ChatCompletionStream_addChunk(chunk) {\n        if (this.ended) return;\n        const completion = __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_accumulateChatCompletion).call(this, chunk);\n        this._emit(\"chunk\", chunk, completion);\n        const delta = chunk.choices[0]?.delta?.content;\n        const snapshot = completion.choices[0]?.message;\n        if (delta != null && snapshot?.role === \"assistant\" && snapshot?.content) {\n            this._emit(\"content\", delta, snapshot.content);\n        }\n    }, _ChatCompletionStream_endRequest = function _ChatCompletionStream_endRequest() {\n        if (this.ended) {\n            throw new openai_error__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`stream has ended, this shouldn't happen`);\n        }\n        const snapshot = __classPrivateFieldGet(this, _ChatCompletionStream_currentChatCompletionSnapshot, \"f\");\n        if (!snapshot) {\n            throw new openai_error__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`request ended without sending any chunks`);\n        }\n        __classPrivateFieldSet(this, _ChatCompletionStream_currentChatCompletionSnapshot, undefined, \"f\");\n        return finalizeChatCompletion(snapshot);\n    }, _ChatCompletionStream_accumulateChatCompletion = function _ChatCompletionStream_accumulateChatCompletion(chunk) {\n        var _a, _b, _c;\n        let snapshot = __classPrivateFieldGet(this, _ChatCompletionStream_currentChatCompletionSnapshot, \"f\");\n        const { choices, ...rest } = chunk;\n        if (!snapshot) {\n            snapshot = __classPrivateFieldSet(this, _ChatCompletionStream_currentChatCompletionSnapshot, {\n                ...rest,\n                choices: []\n            }, \"f\");\n        } else {\n            Object.assign(snapshot, rest);\n        }\n        for (const { delta, finish_reason, index, logprobs = null, ...other } of chunk.choices){\n            let choice = snapshot.choices[index];\n            if (!choice) {\n                choice = snapshot.choices[index] = {\n                    finish_reason,\n                    index,\n                    message: {},\n                    logprobs,\n                    ...other\n                };\n            }\n            if (logprobs) {\n                if (!choice.logprobs) {\n                    choice.logprobs = Object.assign({}, logprobs);\n                } else {\n                    const { content, ...rest } = logprobs;\n                    Object.assign(choice.logprobs, rest);\n                    if (content) {\n                        (_a = choice.logprobs).content ?? (_a.content = []);\n                        choice.logprobs.content.push(...content);\n                    }\n                }\n            }\n            if (finish_reason) choice.finish_reason = finish_reason;\n            Object.assign(choice, other);\n            if (!delta) continue; // Shouldn't happen; just in case.\n            const { content, function_call, role, tool_calls, ...rest } = delta;\n            Object.assign(choice.message, rest);\n            if (content) choice.message.content = (choice.message.content || \"\") + content;\n            if (role) choice.message.role = role;\n            if (function_call) {\n                if (!choice.message.function_call) {\n                    choice.message.function_call = function_call;\n                } else {\n                    if (function_call.name) choice.message.function_call.name = function_call.name;\n                    if (function_call.arguments) {\n                        (_b = choice.message.function_call).arguments ?? (_b.arguments = \"\");\n                        choice.message.function_call.arguments += function_call.arguments;\n                    }\n                }\n            }\n            if (tool_calls) {\n                if (!choice.message.tool_calls) choice.message.tool_calls = [];\n                for (const { index, id, type, function: fn, ...rest } of tool_calls){\n                    const tool_call = (_c = choice.message.tool_calls)[index] ?? (_c[index] = {});\n                    Object.assign(tool_call, rest);\n                    if (id) tool_call.id = id;\n                    if (type) tool_call.type = type;\n                    if (fn) tool_call.function ?? (tool_call.function = {\n                        arguments: \"\"\n                    });\n                    if (fn?.name) tool_call.function.name = fn.name;\n                    if (fn?.arguments) tool_call.function.arguments += fn.arguments;\n                }\n            }\n        }\n        return snapshot;\n    }, Symbol.asyncIterator)]() {\n        const pushQueue = [];\n        const readQueue = [];\n        let done = false;\n        this.on(\"chunk\", (chunk)=>{\n            const reader = readQueue.shift();\n            if (reader) {\n                reader(chunk);\n            } else {\n                pushQueue.push(chunk);\n            }\n        });\n        this.on(\"end\", ()=>{\n            done = true;\n            for (const reader of readQueue){\n                reader(undefined);\n            }\n            readQueue.length = 0;\n        });\n        return {\n            next: async ()=>{\n                if (!pushQueue.length) {\n                    if (done) {\n                        return {\n                            value: undefined,\n                            done: true\n                        };\n                    }\n                    return new Promise((resolve)=>readQueue.push(resolve)).then((chunk)=>chunk ? {\n                            value: chunk,\n                            done: false\n                        } : {\n                            value: undefined,\n                            done: true\n                        });\n                }\n                const chunk = pushQueue.shift();\n                return {\n                    value: chunk,\n                    done: false\n                };\n            }\n        };\n    }\n    toReadableStream() {\n        const stream = new openai_streaming__WEBPACK_IMPORTED_MODULE_2__.Stream(this[Symbol.asyncIterator].bind(this), this.controller);\n        return stream.toReadableStream();\n    }\n}\nfunction finalizeChatCompletion(snapshot) {\n    const { id, choices, created, model, system_fingerprint, ...rest } = snapshot;\n    return {\n        ...rest,\n        id,\n        choices: choices.map(({ message, finish_reason, index, logprobs, ...choiceRest })=>{\n            if (!finish_reason) throw new openai_error__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`missing finish_reason for choice ${index}`);\n            const { content = null, function_call, tool_calls, ...messageRest } = message;\n            const role = message.role; // this is what we expect; in theory it could be different which would make our types a slight lie but would be fine.\n            if (!role) throw new openai_error__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`missing role for choice ${index}`);\n            if (function_call) {\n                const { arguments: args, name } = function_call;\n                if (args == null) throw new openai_error__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`missing function_call.arguments for choice ${index}`);\n                if (!name) throw new openai_error__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`missing function_call.name for choice ${index}`);\n                return {\n                    ...choiceRest,\n                    message: {\n                        content,\n                        function_call: {\n                            arguments: args,\n                            name\n                        },\n                        role\n                    },\n                    finish_reason,\n                    index,\n                    logprobs\n                };\n            }\n            if (tool_calls) {\n                return {\n                    ...choiceRest,\n                    index,\n                    finish_reason,\n                    logprobs,\n                    message: {\n                        ...messageRest,\n                        role,\n                        content,\n                        tool_calls: tool_calls.map((tool_call, i)=>{\n                            const { function: fn, type, id, ...toolRest } = tool_call;\n                            const { arguments: args, name, ...fnRest } = fn || {};\n                            if (id == null) throw new openai_error__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`missing choices[${index}].tool_calls[${i}].id\\n${str(snapshot)}`);\n                            if (type == null) throw new openai_error__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`missing choices[${index}].tool_calls[${i}].type\\n${str(snapshot)}`);\n                            if (name == null) throw new openai_error__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`missing choices[${index}].tool_calls[${i}].function.name\\n${str(snapshot)}`);\n                            if (args == null) throw new openai_error__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`missing choices[${index}].tool_calls[${i}].function.arguments\\n${str(snapshot)}`);\n                            return {\n                                ...toolRest,\n                                id,\n                                type,\n                                function: {\n                                    ...fnRest,\n                                    name,\n                                    arguments: args\n                                }\n                            };\n                        })\n                    }\n                };\n            }\n            return {\n                ...choiceRest,\n                message: {\n                    ...messageRest,\n                    content,\n                    role\n                },\n                finish_reason,\n                index,\n                logprobs\n            };\n        }),\n        created,\n        model,\n        object: \"chat.completion\",\n        ...system_fingerprint ? {\n            system_fingerprint\n        } : {}\n    };\n}\nfunction str(x) {\n    return JSON.stringify(x);\n} //# sourceMappingURL=ChatCompletionStream.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openai/lib/ChatCompletionStream.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/openai/lib/ChatCompletionStreamingRunner.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/openai/lib/ChatCompletionStreamingRunner.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatCompletionStreamingRunner: () => (/* binding */ ChatCompletionStreamingRunner)\n/* harmony export */ });\n/* harmony import */ var _ChatCompletionStream_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ChatCompletionStream.mjs */ \"(ssr)/./node_modules/openai/lib/ChatCompletionStream.mjs\");\n\nclass ChatCompletionStreamingRunner extends _ChatCompletionStream_mjs__WEBPACK_IMPORTED_MODULE_0__.ChatCompletionStream {\n    static fromReadableStream(stream) {\n        const runner = new ChatCompletionStreamingRunner();\n        runner._run(()=>runner._fromReadableStream(stream));\n        return runner;\n    }\n    /** @deprecated - please use `runTools` instead. */ static runFunctions(completions, params, options) {\n        const runner = new ChatCompletionStreamingRunner();\n        const opts = {\n            ...options,\n            headers: {\n                ...options?.headers,\n                \"X-Stainless-Helper-Method\": \"runFunctions\"\n            }\n        };\n        runner._run(()=>runner._runFunctions(completions, params, opts));\n        return runner;\n    }\n    static runTools(completions, params, options) {\n        const runner = new ChatCompletionStreamingRunner();\n        const opts = {\n            ...options,\n            headers: {\n                ...options?.headers,\n                \"X-Stainless-Helper-Method\": \"runTools\"\n            }\n        };\n        runner._run(()=>runner._runTools(completions, params, opts));\n        return runner;\n    }\n} //# sourceMappingURL=ChatCompletionStreamingRunner.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2xpYi9DaGF0Q29tcGxldGlvblN0cmVhbWluZ1J1bm5lci5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBa0U7QUFDM0QsTUFBTUMsc0NBQXNDRCwyRUFBb0JBO0lBQ25FLE9BQU9FLG1CQUFtQkMsTUFBTSxFQUFFO1FBQzlCLE1BQU1DLFNBQVMsSUFBSUg7UUFDbkJHLE9BQU9DLElBQUksQ0FBQyxJQUFNRCxPQUFPRSxtQkFBbUIsQ0FBQ0g7UUFDN0MsT0FBT0M7SUFDWDtJQUNBLGlEQUFpRCxHQUNqRCxPQUFPRyxhQUFhQyxXQUFXLEVBQUVDLE1BQU0sRUFBRUMsT0FBTyxFQUFFO1FBQzlDLE1BQU1OLFNBQVMsSUFBSUg7UUFDbkIsTUFBTVUsT0FBTztZQUNULEdBQUdELE9BQU87WUFDVkUsU0FBUztnQkFBRSxHQUFHRixTQUFTRSxPQUFPO2dCQUFFLDZCQUE2QjtZQUFlO1FBQ2hGO1FBQ0FSLE9BQU9DLElBQUksQ0FBQyxJQUFNRCxPQUFPUyxhQUFhLENBQUNMLGFBQWFDLFFBQVFFO1FBQzVELE9BQU9QO0lBQ1g7SUFDQSxPQUFPVSxTQUFTTixXQUFXLEVBQUVDLE1BQU0sRUFBRUMsT0FBTyxFQUFFO1FBQzFDLE1BQU1OLFNBQVMsSUFBSUg7UUFDbkIsTUFBTVUsT0FBTztZQUNULEdBQUdELE9BQU87WUFDVkUsU0FBUztnQkFBRSxHQUFHRixTQUFTRSxPQUFPO2dCQUFFLDZCQUE2QjtZQUFXO1FBQzVFO1FBQ0FSLE9BQU9DLElBQUksQ0FBQyxJQUFNRCxPQUFPVyxTQUFTLENBQUNQLGFBQWFDLFFBQVFFO1FBQ3hELE9BQU9QO0lBQ1g7QUFDSixFQUNBLDBEQUEwRCIsInNvdXJjZXMiOlsid2VicGFjazovL215LWFwcC8uL25vZGVfbW9kdWxlcy9vcGVuYWkvbGliL0NoYXRDb21wbGV0aW9uU3RyZWFtaW5nUnVubmVyLm1qcz9iNGUyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYXRDb21wbGV0aW9uU3RyZWFtIH0gZnJvbSBcIi4vQ2hhdENvbXBsZXRpb25TdHJlYW0ubWpzXCI7XG5leHBvcnQgY2xhc3MgQ2hhdENvbXBsZXRpb25TdHJlYW1pbmdSdW5uZXIgZXh0ZW5kcyBDaGF0Q29tcGxldGlvblN0cmVhbSB7XG4gICAgc3RhdGljIGZyb21SZWFkYWJsZVN0cmVhbShzdHJlYW0pIHtcbiAgICAgICAgY29uc3QgcnVubmVyID0gbmV3IENoYXRDb21wbGV0aW9uU3RyZWFtaW5nUnVubmVyKCk7XG4gICAgICAgIHJ1bm5lci5fcnVuKCgpID0+IHJ1bm5lci5fZnJvbVJlYWRhYmxlU3RyZWFtKHN0cmVhbSkpO1xuICAgICAgICByZXR1cm4gcnVubmVyO1xuICAgIH1cbiAgICAvKiogQGRlcHJlY2F0ZWQgLSBwbGVhc2UgdXNlIGBydW5Ub29sc2AgaW5zdGVhZC4gKi9cbiAgICBzdGF0aWMgcnVuRnVuY3Rpb25zKGNvbXBsZXRpb25zLCBwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgcnVubmVyID0gbmV3IENoYXRDb21wbGV0aW9uU3RyZWFtaW5nUnVubmVyKCk7XG4gICAgICAgIGNvbnN0IG9wdHMgPSB7XG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgaGVhZGVyczogeyAuLi5vcHRpb25zPy5oZWFkZXJzLCAnWC1TdGFpbmxlc3MtSGVscGVyLU1ldGhvZCc6ICdydW5GdW5jdGlvbnMnIH0sXG4gICAgICAgIH07XG4gICAgICAgIHJ1bm5lci5fcnVuKCgpID0+IHJ1bm5lci5fcnVuRnVuY3Rpb25zKGNvbXBsZXRpb25zLCBwYXJhbXMsIG9wdHMpKTtcbiAgICAgICAgcmV0dXJuIHJ1bm5lcjtcbiAgICB9XG4gICAgc3RhdGljIHJ1blRvb2xzKGNvbXBsZXRpb25zLCBwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgcnVubmVyID0gbmV3IENoYXRDb21wbGV0aW9uU3RyZWFtaW5nUnVubmVyKCk7XG4gICAgICAgIGNvbnN0IG9wdHMgPSB7XG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgaGVhZGVyczogeyAuLi5vcHRpb25zPy5oZWFkZXJzLCAnWC1TdGFpbmxlc3MtSGVscGVyLU1ldGhvZCc6ICdydW5Ub29scycgfSxcbiAgICAgICAgfTtcbiAgICAgICAgcnVubmVyLl9ydW4oKCkgPT4gcnVubmVyLl9ydW5Ub29scyhjb21wbGV0aW9ucywgcGFyYW1zLCBvcHRzKSk7XG4gICAgICAgIHJldHVybiBydW5uZXI7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q2hhdENvbXBsZXRpb25TdHJlYW1pbmdSdW5uZXIubWpzLm1hcCJdLCJuYW1lcyI6WyJDaGF0Q29tcGxldGlvblN0cmVhbSIsIkNoYXRDb21wbGV0aW9uU3RyZWFtaW5nUnVubmVyIiwiZnJvbVJlYWRhYmxlU3RyZWFtIiwic3RyZWFtIiwicnVubmVyIiwiX3J1biIsIl9mcm9tUmVhZGFibGVTdHJlYW0iLCJydW5GdW5jdGlvbnMiLCJjb21wbGV0aW9ucyIsInBhcmFtcyIsIm9wdGlvbnMiLCJvcHRzIiwiaGVhZGVycyIsIl9ydW5GdW5jdGlvbnMiLCJydW5Ub29scyIsIl9ydW5Ub29scyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openai/lib/ChatCompletionStreamingRunner.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/openai/lib/RunnableFunction.mjs":
/*!******************************************************!*\
  !*** ./node_modules/openai/lib/RunnableFunction.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ParsingFunction: () => (/* binding */ ParsingFunction),\n/* harmony export */   ParsingToolFunction: () => (/* binding */ ParsingToolFunction),\n/* harmony export */   isRunnableFunctionWithParse: () => (/* binding */ isRunnableFunctionWithParse)\n/* harmony export */ });\nfunction isRunnableFunctionWithParse(fn) {\n    return typeof fn.parse === \"function\";\n}\n/**\n * This is helper class for passing a `function` and `parse` where the `function`\n * argument type matches the `parse` return type.\n *\n * @deprecated - please use ParsingToolFunction instead.\n */ class ParsingFunction {\n    constructor(input){\n        this.function = input.function;\n        this.parse = input.parse;\n        this.parameters = input.parameters;\n        this.description = input.description;\n        this.name = input.name;\n    }\n}\n/**\n * This is helper class for passing a `function` and `parse` where the `function`\n * argument type matches the `parse` return type.\n */ class ParsingToolFunction {\n    constructor(input){\n        this.type = \"function\";\n        this.function = input;\n    }\n} //# sourceMappingURL=RunnableFunction.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2xpYi9SdW5uYWJsZUZ1bmN0aW9uLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBTyxTQUFTQSw0QkFBNEJDLEVBQUU7SUFDMUMsT0FBTyxPQUFPQSxHQUFHQyxLQUFLLEtBQUs7QUFDL0I7QUFDQTs7Ozs7Q0FLQyxHQUNNLE1BQU1DO0lBQ1RDLFlBQVlDLEtBQUssQ0FBRTtRQUNmLElBQUksQ0FBQ0MsUUFBUSxHQUFHRCxNQUFNQyxRQUFRO1FBQzlCLElBQUksQ0FBQ0osS0FBSyxHQUFHRyxNQUFNSCxLQUFLO1FBQ3hCLElBQUksQ0FBQ0ssVUFBVSxHQUFHRixNQUFNRSxVQUFVO1FBQ2xDLElBQUksQ0FBQ0MsV0FBVyxHQUFHSCxNQUFNRyxXQUFXO1FBQ3BDLElBQUksQ0FBQ0MsSUFBSSxHQUFHSixNQUFNSSxJQUFJO0lBQzFCO0FBQ0o7QUFDQTs7O0NBR0MsR0FDTSxNQUFNQztJQUNUTixZQUFZQyxLQUFLLENBQUU7UUFDZixJQUFJLENBQUNNLElBQUksR0FBRztRQUNaLElBQUksQ0FBQ0wsUUFBUSxHQUFHRDtJQUNwQjtBQUNKLEVBQ0EsNkNBQTZDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktYXBwLy4vbm9kZV9tb2R1bGVzL29wZW5haS9saWIvUnVubmFibGVGdW5jdGlvbi5tanM/YTZiNCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gaXNSdW5uYWJsZUZ1bmN0aW9uV2l0aFBhcnNlKGZuKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBmbi5wYXJzZSA9PT0gJ2Z1bmN0aW9uJztcbn1cbi8qKlxuICogVGhpcyBpcyBoZWxwZXIgY2xhc3MgZm9yIHBhc3NpbmcgYSBgZnVuY3Rpb25gIGFuZCBgcGFyc2VgIHdoZXJlIHRoZSBgZnVuY3Rpb25gXG4gKiBhcmd1bWVudCB0eXBlIG1hdGNoZXMgdGhlIGBwYXJzZWAgcmV0dXJuIHR5cGUuXG4gKlxuICogQGRlcHJlY2F0ZWQgLSBwbGVhc2UgdXNlIFBhcnNpbmdUb29sRnVuY3Rpb24gaW5zdGVhZC5cbiAqL1xuZXhwb3J0IGNsYXNzIFBhcnNpbmdGdW5jdGlvbiB7XG4gICAgY29uc3RydWN0b3IoaW5wdXQpIHtcbiAgICAgICAgdGhpcy5mdW5jdGlvbiA9IGlucHV0LmZ1bmN0aW9uO1xuICAgICAgICB0aGlzLnBhcnNlID0gaW5wdXQucGFyc2U7XG4gICAgICAgIHRoaXMucGFyYW1ldGVycyA9IGlucHV0LnBhcmFtZXRlcnM7XG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb24gPSBpbnB1dC5kZXNjcmlwdGlvbjtcbiAgICAgICAgdGhpcy5uYW1lID0gaW5wdXQubmFtZTtcbiAgICB9XG59XG4vKipcbiAqIFRoaXMgaXMgaGVscGVyIGNsYXNzIGZvciBwYXNzaW5nIGEgYGZ1bmN0aW9uYCBhbmQgYHBhcnNlYCB3aGVyZSB0aGUgYGZ1bmN0aW9uYFxuICogYXJndW1lbnQgdHlwZSBtYXRjaGVzIHRoZSBgcGFyc2VgIHJldHVybiB0eXBlLlxuICovXG5leHBvcnQgY2xhc3MgUGFyc2luZ1Rvb2xGdW5jdGlvbiB7XG4gICAgY29uc3RydWN0b3IoaW5wdXQpIHtcbiAgICAgICAgdGhpcy50eXBlID0gJ2Z1bmN0aW9uJztcbiAgICAgICAgdGhpcy5mdW5jdGlvbiA9IGlucHV0O1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVJ1bm5hYmxlRnVuY3Rpb24ubWpzLm1hcCJdLCJuYW1lcyI6WyJpc1J1bm5hYmxlRnVuY3Rpb25XaXRoUGFyc2UiLCJmbiIsInBhcnNlIiwiUGFyc2luZ0Z1bmN0aW9uIiwiY29uc3RydWN0b3IiLCJpbnB1dCIsImZ1bmN0aW9uIiwicGFyYW1ldGVycyIsImRlc2NyaXB0aW9uIiwibmFtZSIsIlBhcnNpbmdUb29sRnVuY3Rpb24iLCJ0eXBlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openai/lib/RunnableFunction.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/openai/lib/chatCompletionUtils.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/openai/lib/chatCompletionUtils.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isAssistantMessage: () => (/* binding */ isAssistantMessage),\n/* harmony export */   isFunctionMessage: () => (/* binding */ isFunctionMessage),\n/* harmony export */   isPresent: () => (/* binding */ isPresent),\n/* harmony export */   isToolMessage: () => (/* binding */ isToolMessage)\n/* harmony export */ });\nconst isAssistantMessage = (message)=>{\n    return message?.role === \"assistant\";\n};\nconst isFunctionMessage = (message)=>{\n    return message?.role === \"function\";\n};\nconst isToolMessage = (message)=>{\n    return message?.role === \"tool\";\n};\nfunction isPresent(obj) {\n    return obj != null;\n} //# sourceMappingURL=chatCompletionUtils.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2xpYi9jaGF0Q29tcGxldGlvblV0aWxzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQU8sTUFBTUEscUJBQXFCLENBQUNDO0lBQy9CLE9BQU9BLFNBQVNDLFNBQVM7QUFDN0IsRUFBRTtBQUNLLE1BQU1DLG9CQUFvQixDQUFDRjtJQUM5QixPQUFPQSxTQUFTQyxTQUFTO0FBQzdCLEVBQUU7QUFDSyxNQUFNRSxnQkFBZ0IsQ0FBQ0g7SUFDMUIsT0FBT0EsU0FBU0MsU0FBUztBQUM3QixFQUFFO0FBQ0ssU0FBU0csVUFBVUMsR0FBRztJQUN6QixPQUFPQSxPQUFPO0FBQ2xCLEVBQ0EsZ0RBQWdEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktYXBwLy4vbm9kZV9tb2R1bGVzL29wZW5haS9saWIvY2hhdENvbXBsZXRpb25VdGlscy5tanM/NzJhNCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgaXNBc3Npc3RhbnRNZXNzYWdlID0gKG1lc3NhZ2UpID0+IHtcbiAgICByZXR1cm4gbWVzc2FnZT8ucm9sZSA9PT0gJ2Fzc2lzdGFudCc7XG59O1xuZXhwb3J0IGNvbnN0IGlzRnVuY3Rpb25NZXNzYWdlID0gKG1lc3NhZ2UpID0+IHtcbiAgICByZXR1cm4gbWVzc2FnZT8ucm9sZSA9PT0gJ2Z1bmN0aW9uJztcbn07XG5leHBvcnQgY29uc3QgaXNUb29sTWVzc2FnZSA9IChtZXNzYWdlKSA9PiB7XG4gICAgcmV0dXJuIG1lc3NhZ2U/LnJvbGUgPT09ICd0b29sJztcbn07XG5leHBvcnQgZnVuY3Rpb24gaXNQcmVzZW50KG9iaikge1xuICAgIHJldHVybiBvYmogIT0gbnVsbDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNoYXRDb21wbGV0aW9uVXRpbHMubWpzLm1hcCJdLCJuYW1lcyI6WyJpc0Fzc2lzdGFudE1lc3NhZ2UiLCJtZXNzYWdlIiwicm9sZSIsImlzRnVuY3Rpb25NZXNzYWdlIiwiaXNUb29sTWVzc2FnZSIsImlzUHJlc2VudCIsIm9iaiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openai/lib/chatCompletionUtils.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/openai/pagination.mjs":
/*!********************************************!*\
  !*** ./node_modules/openai/pagination.mjs ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CursorPage: () => (/* binding */ CursorPage),\n/* harmony export */   Page: () => (/* binding */ Page)\n/* harmony export */ });\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core.mjs */ \"(ssr)/./node_modules/openai/core.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\n/**\n * Note: no pagination actually occurs yet, this is for forwards-compatibility.\n */ class Page extends _core_mjs__WEBPACK_IMPORTED_MODULE_0__.AbstractPage {\n    constructor(client, response, body, options){\n        super(client, response, body, options);\n        this.data = body.data || [];\n        this.object = body.object;\n    }\n    getPaginatedItems() {\n        return this.data ?? [];\n    }\n    // @deprecated Please use `nextPageInfo()` instead\n    /**\n     * This page represents a response that isn't actually paginated at the API level\n     * so there will never be any next page params.\n     */ nextPageParams() {\n        return null;\n    }\n    nextPageInfo() {\n        return null;\n    }\n}\nclass CursorPage extends _core_mjs__WEBPACK_IMPORTED_MODULE_0__.AbstractPage {\n    constructor(client, response, body, options){\n        super(client, response, body, options);\n        this.data = body.data || [];\n    }\n    getPaginatedItems() {\n        return this.data ?? [];\n    }\n    // @deprecated Please use `nextPageInfo()` instead\n    nextPageParams() {\n        const info = this.nextPageInfo();\n        if (!info) return null;\n        if (\"params\" in info) return info.params;\n        const params = Object.fromEntries(info.url.searchParams);\n        if (!Object.keys(params).length) return null;\n        return params;\n    }\n    nextPageInfo() {\n        const data = this.getPaginatedItems();\n        if (!data.length) {\n            return null;\n        }\n        const id = data[data.length - 1]?.id;\n        if (!id) {\n            return null;\n        }\n        return {\n            params: {\n                after: id\n            }\n        };\n    }\n} //# sourceMappingURL=pagination.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3BhZ2luYXRpb24ubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLHFEQUFxRDtBQUNYO0FBQzFDOztDQUVDLEdBQ00sTUFBTUMsYUFBYUQsbURBQVlBO0lBQ2xDRSxZQUFZQyxNQUFNLEVBQUVDLFFBQVEsRUFBRUMsSUFBSSxFQUFFQyxPQUFPLENBQUU7UUFDekMsS0FBSyxDQUFDSCxRQUFRQyxVQUFVQyxNQUFNQztRQUM5QixJQUFJLENBQUNDLElBQUksR0FBR0YsS0FBS0UsSUFBSSxJQUFJLEVBQUU7UUFDM0IsSUFBSSxDQUFDQyxNQUFNLEdBQUdILEtBQUtHLE1BQU07SUFDN0I7SUFDQUMsb0JBQW9CO1FBQ2hCLE9BQU8sSUFBSSxDQUFDRixJQUFJLElBQUksRUFBRTtJQUMxQjtJQUNBLGtEQUFrRDtJQUNsRDs7O0tBR0MsR0FDREcsaUJBQWlCO1FBQ2IsT0FBTztJQUNYO0lBQ0FDLGVBQWU7UUFDWCxPQUFPO0lBQ1g7QUFDSjtBQUNPLE1BQU1DLG1CQUFtQlosbURBQVlBO0lBQ3hDRSxZQUFZQyxNQUFNLEVBQUVDLFFBQVEsRUFBRUMsSUFBSSxFQUFFQyxPQUFPLENBQUU7UUFDekMsS0FBSyxDQUFDSCxRQUFRQyxVQUFVQyxNQUFNQztRQUM5QixJQUFJLENBQUNDLElBQUksR0FBR0YsS0FBS0UsSUFBSSxJQUFJLEVBQUU7SUFDL0I7SUFDQUUsb0JBQW9CO1FBQ2hCLE9BQU8sSUFBSSxDQUFDRixJQUFJLElBQUksRUFBRTtJQUMxQjtJQUNBLGtEQUFrRDtJQUNsREcsaUJBQWlCO1FBQ2IsTUFBTUcsT0FBTyxJQUFJLENBQUNGLFlBQVk7UUFDOUIsSUFBSSxDQUFDRSxNQUNELE9BQU87UUFDWCxJQUFJLFlBQVlBLE1BQ1osT0FBT0EsS0FBS0MsTUFBTTtRQUN0QixNQUFNQSxTQUFTQyxPQUFPQyxXQUFXLENBQUNILEtBQUtJLEdBQUcsQ0FBQ0MsWUFBWTtRQUN2RCxJQUFJLENBQUNILE9BQU9JLElBQUksQ0FBQ0wsUUFBUU0sTUFBTSxFQUMzQixPQUFPO1FBQ1gsT0FBT047SUFDWDtJQUNBSCxlQUFlO1FBQ1gsTUFBTUosT0FBTyxJQUFJLENBQUNFLGlCQUFpQjtRQUNuQyxJQUFJLENBQUNGLEtBQUthLE1BQU0sRUFBRTtZQUNkLE9BQU87UUFDWDtRQUNBLE1BQU1DLEtBQUtkLElBQUksQ0FBQ0EsS0FBS2EsTUFBTSxHQUFHLEVBQUUsRUFBRUM7UUFDbEMsSUFBSSxDQUFDQSxJQUFJO1lBQ0wsT0FBTztRQUNYO1FBQ0EsT0FBTztZQUFFUCxRQUFRO2dCQUFFUSxPQUFPRDtZQUFHO1FBQUU7SUFDbkM7QUFDSixFQUNBLHVDQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWFwcC8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcGFnaW5hdGlvbi5tanM/MmM3ZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLlxuaW1wb3J0IHsgQWJzdHJhY3RQYWdlIH0gZnJvbSBcIi4vY29yZS5tanNcIjtcbi8qKlxuICogTm90ZTogbm8gcGFnaW5hdGlvbiBhY3R1YWxseSBvY2N1cnMgeWV0LCB0aGlzIGlzIGZvciBmb3J3YXJkcy1jb21wYXRpYmlsaXR5LlxuICovXG5leHBvcnQgY2xhc3MgUGFnZSBleHRlbmRzIEFic3RyYWN0UGFnZSB7XG4gICAgY29uc3RydWN0b3IoY2xpZW50LCByZXNwb25zZSwgYm9keSwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihjbGllbnQsIHJlc3BvbnNlLCBib2R5LCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5kYXRhID0gYm9keS5kYXRhIHx8IFtdO1xuICAgICAgICB0aGlzLm9iamVjdCA9IGJvZHkub2JqZWN0O1xuICAgIH1cbiAgICBnZXRQYWdpbmF0ZWRJdGVtcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YSA/PyBbXTtcbiAgICB9XG4gICAgLy8gQGRlcHJlY2F0ZWQgUGxlYXNlIHVzZSBgbmV4dFBhZ2VJbmZvKClgIGluc3RlYWRcbiAgICAvKipcbiAgICAgKiBUaGlzIHBhZ2UgcmVwcmVzZW50cyBhIHJlc3BvbnNlIHRoYXQgaXNuJ3QgYWN0dWFsbHkgcGFnaW5hdGVkIGF0IHRoZSBBUEkgbGV2ZWxcbiAgICAgKiBzbyB0aGVyZSB3aWxsIG5ldmVyIGJlIGFueSBuZXh0IHBhZ2UgcGFyYW1zLlxuICAgICAqL1xuICAgIG5leHRQYWdlUGFyYW1zKCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgbmV4dFBhZ2VJbmZvKCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgQ3Vyc29yUGFnZSBleHRlbmRzIEFic3RyYWN0UGFnZSB7XG4gICAgY29uc3RydWN0b3IoY2xpZW50LCByZXNwb25zZSwgYm9keSwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihjbGllbnQsIHJlc3BvbnNlLCBib2R5LCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5kYXRhID0gYm9keS5kYXRhIHx8IFtdO1xuICAgIH1cbiAgICBnZXRQYWdpbmF0ZWRJdGVtcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YSA/PyBbXTtcbiAgICB9XG4gICAgLy8gQGRlcHJlY2F0ZWQgUGxlYXNlIHVzZSBgbmV4dFBhZ2VJbmZvKClgIGluc3RlYWRcbiAgICBuZXh0UGFnZVBhcmFtcygpIHtcbiAgICAgICAgY29uc3QgaW5mbyA9IHRoaXMubmV4dFBhZ2VJbmZvKCk7XG4gICAgICAgIGlmICghaW5mbylcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICBpZiAoJ3BhcmFtcycgaW4gaW5mbylcbiAgICAgICAgICAgIHJldHVybiBpbmZvLnBhcmFtcztcbiAgICAgICAgY29uc3QgcGFyYW1zID0gT2JqZWN0LmZyb21FbnRyaWVzKGluZm8udXJsLnNlYXJjaFBhcmFtcyk7XG4gICAgICAgIGlmICghT2JqZWN0LmtleXMocGFyYW1zKS5sZW5ndGgpXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgcmV0dXJuIHBhcmFtcztcbiAgICB9XG4gICAgbmV4dFBhZ2VJbmZvKCkge1xuICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5nZXRQYWdpbmF0ZWRJdGVtcygpO1xuICAgICAgICBpZiAoIWRhdGEubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpZCA9IGRhdGFbZGF0YS5sZW5ndGggLSAxXT8uaWQ7XG4gICAgICAgIGlmICghaWQpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHBhcmFtczogeyBhZnRlcjogaWQgfSB9O1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhZ2luYXRpb24ubWpzLm1hcCJdLCJuYW1lcyI6WyJBYnN0cmFjdFBhZ2UiLCJQYWdlIiwiY29uc3RydWN0b3IiLCJjbGllbnQiLCJyZXNwb25zZSIsImJvZHkiLCJvcHRpb25zIiwiZGF0YSIsIm9iamVjdCIsImdldFBhZ2luYXRlZEl0ZW1zIiwibmV4dFBhZ2VQYXJhbXMiLCJuZXh0UGFnZUluZm8iLCJDdXJzb3JQYWdlIiwiaW5mbyIsInBhcmFtcyIsIk9iamVjdCIsImZyb21FbnRyaWVzIiwidXJsIiwic2VhcmNoUGFyYW1zIiwia2V5cyIsImxlbmd0aCIsImlkIiwiYWZ0ZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openai/pagination.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/openai/resource.mjs":
/*!******************************************!*\
  !*** ./node_modules/openai/resource.mjs ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APIResource: () => (/* binding */ APIResource)\n/* harmony export */ });\n// File generated from our OpenAPI spec by Stainless.\nclass APIResource {\n    constructor(client){\n        this._client = client;\n    }\n} //# sourceMappingURL=resource.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEscURBQXFEO0FBQzlDLE1BQU1BO0lBQ1RDLFlBQVlDLE1BQU0sQ0FBRTtRQUNoQixJQUFJLENBQUNDLE9BQU8sR0FBR0Q7SUFDbkI7QUFDSixFQUNBLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWFwcC8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2UubWpzP2UyYzgiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy5cbmV4cG9ydCBjbGFzcyBBUElSZXNvdXJjZSB7XG4gICAgY29uc3RydWN0b3IoY2xpZW50KSB7XG4gICAgICAgIHRoaXMuX2NsaWVudCA9IGNsaWVudDtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXNvdXJjZS5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiY29uc3RydWN0b3IiLCJjbGllbnQiLCJfY2xpZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openai/resource.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/openai/resources/audio/audio.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/openai/resources/audio/audio.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Audio: () => (/* binding */ Audio)\n/* harmony export */ });\n/* harmony import */ var openai_resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/resource */ \"(ssr)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var openai_resources_audio_speech__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! openai/resources/audio/speech */ \"(ssr)/./node_modules/openai/resources/audio/speech.mjs\");\n/* harmony import */ var openai_resources_audio_transcriptions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai/resources/audio/transcriptions */ \"(ssr)/./node_modules/openai/resources/audio/transcriptions.mjs\");\n/* harmony import */ var openai_resources_audio_translations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! openai/resources/audio/translations */ \"(ssr)/./node_modules/openai/resources/audio/translations.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\n\n\n\nclass Audio extends openai_resource__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    constructor(){\n        super(...arguments);\n        this.transcriptions = new openai_resources_audio_transcriptions__WEBPACK_IMPORTED_MODULE_1__.Transcriptions(this._client);\n        this.translations = new openai_resources_audio_translations__WEBPACK_IMPORTED_MODULE_2__.Translations(this._client);\n        this.speech = new openai_resources_audio_speech__WEBPACK_IMPORTED_MODULE_3__.Speech(this._client);\n    }\n}\n(function(Audio) {\n    Audio.Transcriptions = openai_resources_audio_transcriptions__WEBPACK_IMPORTED_MODULE_1__.Transcriptions;\n    Audio.Translations = openai_resources_audio_translations__WEBPACK_IMPORTED_MODULE_2__.Translations;\n    Audio.Speech = openai_resources_audio_speech__WEBPACK_IMPORTED_MODULE_3__.Speech;\n})(Audio || (Audio = {})); //# sourceMappingURL=audio.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9hdWRpby9hdWRpby5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxxREFBcUQ7QUFDUDtBQUNhO0FBQ2dCO0FBQ0o7QUFDaEUsTUFBTUksY0FBY0osd0RBQVdBO0lBQ2xDSyxhQUFjO1FBQ1YsS0FBSyxJQUFJQztRQUNULElBQUksQ0FBQ0MsY0FBYyxHQUFHLElBQUlMLGlGQUFnQyxDQUFDLElBQUksQ0FBQ08sT0FBTztRQUN2RSxJQUFJLENBQUNDLFlBQVksR0FBRyxJQUFJUCw2RUFBNEIsQ0FBQyxJQUFJLENBQUNNLE9BQU87UUFDakUsSUFBSSxDQUFDRyxNQUFNLEdBQUcsSUFBSVgsaUVBQWdCLENBQUMsSUFBSSxDQUFDUSxPQUFPO0lBQ25EO0FBQ0o7QUFDQyxVQUFVTCxLQUFLO0lBQ1pBLE1BQU1JLGNBQWMsR0FBR04saUZBQWdDO0lBQ3ZERSxNQUFNTyxZQUFZLEdBQUdSLDZFQUE0QjtJQUNqREMsTUFBTVMsTUFBTSxHQUFHWixpRUFBZ0I7QUFDbkMsR0FBR0csU0FBVUEsQ0FBQUEsUUFBUSxDQUFDLEtBQ3RCLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWFwcC8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2F1ZGlvL2F1ZGlvLm1qcz9kYTU1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gJ29wZW5haS9yZXNvdXJjZSc7XG5pbXBvcnQgKiBhcyBTcGVlY2hBUEkgZnJvbSAnb3BlbmFpL3Jlc291cmNlcy9hdWRpby9zcGVlY2gnO1xuaW1wb3J0ICogYXMgVHJhbnNjcmlwdGlvbnNBUEkgZnJvbSAnb3BlbmFpL3Jlc291cmNlcy9hdWRpby90cmFuc2NyaXB0aW9ucyc7XG5pbXBvcnQgKiBhcyBUcmFuc2xhdGlvbnNBUEkgZnJvbSAnb3BlbmFpL3Jlc291cmNlcy9hdWRpby90cmFuc2xhdGlvbnMnO1xuZXhwb3J0IGNsYXNzIEF1ZGlvIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLnRyYW5zY3JpcHRpb25zID0gbmV3IFRyYW5zY3JpcHRpb25zQVBJLlRyYW5zY3JpcHRpb25zKHRoaXMuX2NsaWVudCk7XG4gICAgICAgIHRoaXMudHJhbnNsYXRpb25zID0gbmV3IFRyYW5zbGF0aW9uc0FQSS5UcmFuc2xhdGlvbnModGhpcy5fY2xpZW50KTtcbiAgICAgICAgdGhpcy5zcGVlY2ggPSBuZXcgU3BlZWNoQVBJLlNwZWVjaCh0aGlzLl9jbGllbnQpO1xuICAgIH1cbn1cbihmdW5jdGlvbiAoQXVkaW8pIHtcbiAgICBBdWRpby5UcmFuc2NyaXB0aW9ucyA9IFRyYW5zY3JpcHRpb25zQVBJLlRyYW5zY3JpcHRpb25zO1xuICAgIEF1ZGlvLlRyYW5zbGF0aW9ucyA9IFRyYW5zbGF0aW9uc0FQSS5UcmFuc2xhdGlvbnM7XG4gICAgQXVkaW8uU3BlZWNoID0gU3BlZWNoQVBJLlNwZWVjaDtcbn0pKEF1ZGlvIHx8IChBdWRpbyA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hdWRpby5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiU3BlZWNoQVBJIiwiVHJhbnNjcmlwdGlvbnNBUEkiLCJUcmFuc2xhdGlvbnNBUEkiLCJBdWRpbyIsImNvbnN0cnVjdG9yIiwiYXJndW1lbnRzIiwidHJhbnNjcmlwdGlvbnMiLCJUcmFuc2NyaXB0aW9ucyIsIl9jbGllbnQiLCJ0cmFuc2xhdGlvbnMiLCJUcmFuc2xhdGlvbnMiLCJzcGVlY2giLCJTcGVlY2giXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openai/resources/audio/audio.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/openai/resources/audio/speech.mjs":
/*!********************************************************!*\
  !*** ./node_modules/openai/resources/audio/speech.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Speech: () => (/* binding */ Speech)\n/* harmony export */ });\n/* harmony import */ var openai_resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/resource */ \"(ssr)/./node_modules/openai/resource.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\nclass Speech extends openai_resource__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Generates audio from the input text.\n     */ create(body, options) {\n        return this._client.post(\"/audio/speech\", {\n            body,\n            ...options,\n            __binaryResponse: true\n        });\n    }\n}\n(function(Speech) {})(Speech || (Speech = {})); //# sourceMappingURL=speech.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9hdWRpby9zcGVlY2gubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEscURBQXFEO0FBQ1A7QUFDdkMsTUFBTUMsZUFBZUQsd0RBQVdBO0lBQ25DOztLQUVDLEdBQ0RFLE9BQU9DLElBQUksRUFBRUMsT0FBTyxFQUFFO1FBQ2xCLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNDLElBQUksQ0FBQyxpQkFBaUI7WUFBRUg7WUFBTSxHQUFHQyxPQUFPO1lBQUVHLGtCQUFrQjtRQUFLO0lBQ3pGO0FBQ0o7QUFDQyxVQUFVTixNQUFNLEdBQ2pCLEdBQUdBLFVBQVdBLENBQUFBLFNBQVMsQ0FBQyxLQUN4QixtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1hcHAvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9hdWRpby9zcGVlY2gubWpzPzljYjAiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSAnb3BlbmFpL3Jlc291cmNlJztcbmV4cG9ydCBjbGFzcyBTcGVlY2ggZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gICAgLyoqXG4gICAgICogR2VuZXJhdGVzIGF1ZGlvIGZyb20gdGhlIGlucHV0IHRleHQuXG4gICAgICovXG4gICAgY3JlYXRlKGJvZHksIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KCcvYXVkaW8vc3BlZWNoJywgeyBib2R5LCAuLi5vcHRpb25zLCBfX2JpbmFyeVJlc3BvbnNlOiB0cnVlIH0pO1xuICAgIH1cbn1cbihmdW5jdGlvbiAoU3BlZWNoKSB7XG59KShTcGVlY2ggfHwgKFNwZWVjaCA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zcGVlY2gubWpzLm1hcCJdLCJuYW1lcyI6WyJBUElSZXNvdXJjZSIsIlNwZWVjaCIsImNyZWF0ZSIsImJvZHkiLCJvcHRpb25zIiwiX2NsaWVudCIsInBvc3QiLCJfX2JpbmFyeVJlc3BvbnNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openai/resources/audio/speech.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/openai/resources/audio/transcriptions.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/openai/resources/audio/transcriptions.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Transcriptions: () => (/* binding */ Transcriptions)\n/* harmony export */ });\n/* harmony import */ var openai_resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/resource */ \"(ssr)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var openai_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai/core */ \"(ssr)/./node_modules/openai/uploads.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\n\nclass Transcriptions extends openai_resource__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Transcribes audio into the input language.\n     */ create(body, options) {\n        return this._client.post(\"/audio/transcriptions\", (0,openai_core__WEBPACK_IMPORTED_MODULE_1__.multipartFormRequestOptions)({\n            body,\n            ...options\n        }));\n    }\n}\n(function(Transcriptions) {})(Transcriptions || (Transcriptions = {})); //# sourceMappingURL=transcriptions.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9hdWRpby90cmFuc2NyaXB0aW9ucy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEscURBQXFEO0FBQ1A7QUFDWTtBQUNuRCxNQUFNRSx1QkFBdUJGLHdEQUFXQTtJQUMzQzs7S0FFQyxHQUNERyxPQUFPQyxJQUFJLEVBQUVDLE9BQU8sRUFBRTtRQUNsQixPQUFPLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxJQUFJLENBQUMseUJBQXlCTix3RUFBMkJBLENBQUM7WUFBRUc7WUFBTSxHQUFHQyxPQUFPO1FBQUM7SUFDckc7QUFDSjtBQUNDLFVBQVVILGNBQWMsR0FDekIsR0FBR0Esa0JBQW1CQSxDQUFBQSxpQkFBaUIsQ0FBQyxLQUN4QywyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1hcHAvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9hdWRpby90cmFuc2NyaXB0aW9ucy5tanM/NWZjOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tICdvcGVuYWkvcmVzb3VyY2UnO1xuaW1wb3J0IHsgbXVsdGlwYXJ0Rm9ybVJlcXVlc3RPcHRpb25zIH0gZnJvbSAnb3BlbmFpL2NvcmUnO1xuZXhwb3J0IGNsYXNzIFRyYW5zY3JpcHRpb25zIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAgIC8qKlxuICAgICAqIFRyYW5zY3JpYmVzIGF1ZGlvIGludG8gdGhlIGlucHV0IGxhbmd1YWdlLlxuICAgICAqL1xuICAgIGNyZWF0ZShib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdCgnL2F1ZGlvL3RyYW5zY3JpcHRpb25zJywgbXVsdGlwYXJ0Rm9ybVJlcXVlc3RPcHRpb25zKHsgYm9keSwgLi4ub3B0aW9ucyB9KSk7XG4gICAgfVxufVxuKGZ1bmN0aW9uIChUcmFuc2NyaXB0aW9ucykge1xufSkoVHJhbnNjcmlwdGlvbnMgfHwgKFRyYW5zY3JpcHRpb25zID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRyYW5zY3JpcHRpb25zLm1qcy5tYXAiXSwibmFtZXMiOlsiQVBJUmVzb3VyY2UiLCJtdWx0aXBhcnRGb3JtUmVxdWVzdE9wdGlvbnMiLCJUcmFuc2NyaXB0aW9ucyIsImNyZWF0ZSIsImJvZHkiLCJvcHRpb25zIiwiX2NsaWVudCIsInBvc3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openai/resources/audio/transcriptions.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/openai/resources/audio/translations.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/openai/resources/audio/translations.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Translations: () => (/* binding */ Translations)\n/* harmony export */ });\n/* harmony import */ var openai_resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/resource */ \"(ssr)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var openai_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai/core */ \"(ssr)/./node_modules/openai/uploads.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\n\nclass Translations extends openai_resource__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Translates audio into English.\n     */ create(body, options) {\n        return this._client.post(\"/audio/translations\", (0,openai_core__WEBPACK_IMPORTED_MODULE_1__.multipartFormRequestOptions)({\n            body,\n            ...options\n        }));\n    }\n}\n(function(Translations) {})(Translations || (Translations = {})); //# sourceMappingURL=translations.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9hdWRpby90cmFuc2xhdGlvbnMubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLHFEQUFxRDtBQUNQO0FBQ1k7QUFDbkQsTUFBTUUscUJBQXFCRix3REFBV0E7SUFDekM7O0tBRUMsR0FDREcsT0FBT0MsSUFBSSxFQUFFQyxPQUFPLEVBQUU7UUFDbEIsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDLHVCQUF1Qk4sd0VBQTJCQSxDQUFDO1lBQUVHO1lBQU0sR0FBR0MsT0FBTztRQUFDO0lBQ25HO0FBQ0o7QUFDQyxVQUFVSCxZQUFZLEdBQ3ZCLEdBQUdBLGdCQUFpQkEsQ0FBQUEsZUFBZSxDQUFDLEtBQ3BDLHlDQUF5QyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWFwcC8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2F1ZGlvL3RyYW5zbGF0aW9ucy5tanM/NGMxZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tICdvcGVuYWkvcmVzb3VyY2UnO1xuaW1wb3J0IHsgbXVsdGlwYXJ0Rm9ybVJlcXVlc3RPcHRpb25zIH0gZnJvbSAnb3BlbmFpL2NvcmUnO1xuZXhwb3J0IGNsYXNzIFRyYW5zbGF0aW9ucyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgICAvKipcbiAgICAgKiBUcmFuc2xhdGVzIGF1ZGlvIGludG8gRW5nbGlzaC5cbiAgICAgKi9cbiAgICBjcmVhdGUoYm9keSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoJy9hdWRpby90cmFuc2xhdGlvbnMnLCBtdWx0aXBhcnRGb3JtUmVxdWVzdE9wdGlvbnMoeyBib2R5LCAuLi5vcHRpb25zIH0pKTtcbiAgICB9XG59XG4oZnVuY3Rpb24gKFRyYW5zbGF0aW9ucykge1xufSkoVHJhbnNsYXRpb25zIHx8IChUcmFuc2xhdGlvbnMgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJhbnNsYXRpb25zLm1qcy5tYXAiXSwibmFtZXMiOlsiQVBJUmVzb3VyY2UiLCJtdWx0aXBhcnRGb3JtUmVxdWVzdE9wdGlvbnMiLCJUcmFuc2xhdGlvbnMiLCJjcmVhdGUiLCJib2R5Iiwib3B0aW9ucyIsIl9jbGllbnQiLCJwb3N0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openai/resources/audio/translations.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/openai/resources/beta/assistants/assistants.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/openai/resources/beta/assistants/assistants.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Assistants: () => (/* binding */ Assistants),\n/* harmony export */   AssistantsPage: () => (/* binding */ AssistantsPage)\n/* harmony export */ });\n/* harmony import */ var openai_resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/resource */ \"(ssr)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var openai_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! openai/core */ \"(ssr)/./node_modules/openai/core.mjs\");\n/* harmony import */ var openai_resources_beta_assistants_assistants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! openai/resources/beta/assistants/assistants */ \"(ssr)/./node_modules/openai/resources/beta/assistants/assistants.mjs\");\n/* harmony import */ var openai_resources_beta_assistants_files__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai/resources/beta/assistants/files */ \"(ssr)/./node_modules/openai/resources/beta/assistants/files.mjs\");\n/* harmony import */ var openai_pagination__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! openai/pagination */ \"(ssr)/./node_modules/openai/pagination.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\n\n\n\n\nclass Assistants extends openai_resource__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    constructor(){\n        super(...arguments);\n        this.files = new openai_resources_beta_assistants_files__WEBPACK_IMPORTED_MODULE_1__.Files(this._client);\n    }\n    /**\n     * Create an assistant with a model and instructions.\n     */ create(body, options) {\n        return this._client.post(\"/assistants\", {\n            body,\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v1\",\n                ...options?.headers\n            }\n        });\n    }\n    /**\n     * Retrieves an assistant.\n     */ retrieve(assistantId, options) {\n        return this._client.get(`/assistants/${assistantId}`, {\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v1\",\n                ...options?.headers\n            }\n        });\n    }\n    /**\n     * Modifies an assistant.\n     */ update(assistantId, body, options) {\n        return this._client.post(`/assistants/${assistantId}`, {\n            body,\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v1\",\n                ...options?.headers\n            }\n        });\n    }\n    list(query = {}, options) {\n        if ((0,openai_core__WEBPACK_IMPORTED_MODULE_2__.isRequestOptions)(query)) {\n            return this.list({}, query);\n        }\n        return this._client.getAPIList(\"/assistants\", AssistantsPage, {\n            query,\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v1\",\n                ...options?.headers\n            }\n        });\n    }\n    /**\n     * Delete an assistant.\n     */ del(assistantId, options) {\n        return this._client.delete(`/assistants/${assistantId}`, {\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v1\",\n                ...options?.headers\n            }\n        });\n    }\n}\nclass AssistantsPage extends openai_pagination__WEBPACK_IMPORTED_MODULE_3__.CursorPage {\n}\n(function(Assistants) {\n    Assistants.AssistantsPage = openai_resources_beta_assistants_assistants__WEBPACK_IMPORTED_MODULE_4__.AssistantsPage;\n    Assistants.Files = openai_resources_beta_assistants_files__WEBPACK_IMPORTED_MODULE_1__.Files;\n    Assistants.AssistantFilesPage = openai_resources_beta_assistants_files__WEBPACK_IMPORTED_MODULE_1__.AssistantFilesPage;\n})(Assistants || (Assistants = {})); //# sourceMappingURL=assistants.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9iZXRhL2Fzc2lzdGFudHMvYXNzaXN0YW50cy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLHFEQUFxRDtBQUNQO0FBQ0M7QUFDOEI7QUFDVjtBQUNwQjtBQUN4QyxNQUFNSyxtQkFBbUJMLHdEQUFXQTtJQUN2Q00sYUFBYztRQUNWLEtBQUssSUFBSUM7UUFDVCxJQUFJLENBQUNDLEtBQUssR0FBRyxJQUFJTCx5RUFBYyxDQUFDLElBQUksQ0FBQ08sT0FBTztJQUNoRDtJQUNBOztLQUVDLEdBQ0RDLE9BQU9DLElBQUksRUFBRUMsT0FBTyxFQUFFO1FBQ2xCLE9BQU8sSUFBSSxDQUFDSCxPQUFPLENBQUNJLElBQUksQ0FBQyxlQUFlO1lBQ3BDRjtZQUNBLEdBQUdDLE9BQU87WUFDVkUsU0FBUztnQkFBRSxlQUFlO2dCQUFpQixHQUFHRixTQUFTRSxPQUFPO1lBQUM7UUFDbkU7SUFDSjtJQUNBOztLQUVDLEdBQ0RDLFNBQVNDLFdBQVcsRUFBRUosT0FBTyxFQUFFO1FBQzNCLE9BQU8sSUFBSSxDQUFDSCxPQUFPLENBQUNRLEdBQUcsQ0FBQyxDQUFDLFlBQVksRUFBRUQsWUFBWSxDQUFDLEVBQUU7WUFDbEQsR0FBR0osT0FBTztZQUNWRSxTQUFTO2dCQUFFLGVBQWU7Z0JBQWlCLEdBQUdGLFNBQVNFLE9BQU87WUFBQztRQUNuRTtJQUNKO0lBQ0E7O0tBRUMsR0FDREksT0FBT0YsV0FBVyxFQUFFTCxJQUFJLEVBQUVDLE9BQU8sRUFBRTtRQUMvQixPQUFPLElBQUksQ0FBQ0gsT0FBTyxDQUFDSSxJQUFJLENBQUMsQ0FBQyxZQUFZLEVBQUVHLFlBQVksQ0FBQyxFQUFFO1lBQ25ETDtZQUNBLEdBQUdDLE9BQU87WUFDVkUsU0FBUztnQkFBRSxlQUFlO2dCQUFpQixHQUFHRixTQUFTRSxPQUFPO1lBQUM7UUFDbkU7SUFDSjtJQUNBSyxLQUFLQyxRQUFRLENBQUMsQ0FBQyxFQUFFUixPQUFPLEVBQUU7UUFDdEIsSUFBSVosNkRBQWdCQSxDQUFDb0IsUUFBUTtZQUN6QixPQUFPLElBQUksQ0FBQ0QsSUFBSSxDQUFDLENBQUMsR0FBR0M7UUFDekI7UUFDQSxPQUFPLElBQUksQ0FBQ1gsT0FBTyxDQUFDWSxVQUFVLENBQUMsZUFBZUMsZ0JBQWdCO1lBQzFERjtZQUNBLEdBQUdSLE9BQU87WUFDVkUsU0FBUztnQkFBRSxlQUFlO2dCQUFpQixHQUFHRixTQUFTRSxPQUFPO1lBQUM7UUFDbkU7SUFDSjtJQUNBOztLQUVDLEdBQ0RTLElBQUlQLFdBQVcsRUFBRUosT0FBTyxFQUFFO1FBQ3RCLE9BQU8sSUFBSSxDQUFDSCxPQUFPLENBQUNlLE1BQU0sQ0FBQyxDQUFDLFlBQVksRUFBRVIsWUFBWSxDQUFDLEVBQUU7WUFDckQsR0FBR0osT0FBTztZQUNWRSxTQUFTO2dCQUFFLGVBQWU7Z0JBQWlCLEdBQUdGLFNBQVNFLE9BQU87WUFBQztRQUNuRTtJQUNKO0FBQ0o7QUFDTyxNQUFNUSx1QkFBdUJuQix5REFBVUE7QUFDOUM7QUFDQyxVQUFVQyxVQUFVO0lBQ2pCQSxXQUFXa0IsY0FBYyxHQUFHckIsdUZBQTRCO0lBQ3hERyxXQUFXSSxLQUFLLEdBQUdOLHlFQUFjO0lBQ2pDRSxXQUFXcUIsa0JBQWtCLEdBQUd2QixzRkFBMkI7QUFDL0QsR0FBR0UsY0FBZUEsQ0FBQUEsYUFBYSxDQUFDLEtBQ2hDLHVDQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWFwcC8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2JldGEvYXNzaXN0YW50cy9hc3Npc3RhbnRzLm1qcz9kNjNlIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gJ29wZW5haS9yZXNvdXJjZSc7XG5pbXBvcnQgeyBpc1JlcXVlc3RPcHRpb25zIH0gZnJvbSAnb3BlbmFpL2NvcmUnO1xuaW1wb3J0ICogYXMgQXNzaXN0YW50c0FQSSBmcm9tICdvcGVuYWkvcmVzb3VyY2VzL2JldGEvYXNzaXN0YW50cy9hc3Npc3RhbnRzJztcbmltcG9ydCAqIGFzIEZpbGVzQVBJIGZyb20gJ29wZW5haS9yZXNvdXJjZXMvYmV0YS9hc3Npc3RhbnRzL2ZpbGVzJztcbmltcG9ydCB7IEN1cnNvclBhZ2UgfSBmcm9tICdvcGVuYWkvcGFnaW5hdGlvbic7XG5leHBvcnQgY2xhc3MgQXNzaXN0YW50cyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5maWxlcyA9IG5ldyBGaWxlc0FQSS5GaWxlcyh0aGlzLl9jbGllbnQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYW4gYXNzaXN0YW50IHdpdGggYSBtb2RlbCBhbmQgaW5zdHJ1Y3Rpb25zLlxuICAgICAqL1xuICAgIGNyZWF0ZShib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdCgnL2Fzc2lzdGFudHMnLCB7XG4gICAgICAgICAgICBib2R5LFxuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHsgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djEnLCAuLi5vcHRpb25zPy5oZWFkZXJzIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgYW4gYXNzaXN0YW50LlxuICAgICAqL1xuICAgIHJldHJpZXZlKGFzc2lzdGFudElkLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0KGAvYXNzaXN0YW50cy8ke2Fzc2lzdGFudElkfWAsIHtcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiB7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYxJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTW9kaWZpZXMgYW4gYXNzaXN0YW50LlxuICAgICAqL1xuICAgIHVwZGF0ZShhc3Npc3RhbnRJZCwgYm9keSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoYC9hc3Npc3RhbnRzLyR7YXNzaXN0YW50SWR9YCwge1xuICAgICAgICAgICAgYm9keSxcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiB7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYxJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgbGlzdChxdWVyeSA9IHt9LCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChpc1JlcXVlc3RPcHRpb25zKHF1ZXJ5KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubGlzdCh7fSwgcXVlcnkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0QVBJTGlzdCgnL2Fzc2lzdGFudHMnLCBBc3Npc3RhbnRzUGFnZSwge1xuICAgICAgICAgICAgcXVlcnksXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgaGVhZGVyczogeyAnT3BlbkFJLUJldGEnOiAnYXNzaXN0YW50cz12MScsIC4uLm9wdGlvbnM/LmhlYWRlcnMgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlbGV0ZSBhbiBhc3Npc3RhbnQuXG4gICAgICovXG4gICAgZGVsKGFzc2lzdGFudElkLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZGVsZXRlKGAvYXNzaXN0YW50cy8ke2Fzc2lzdGFudElkfWAsIHtcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiB7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYxJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9LFxuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgQXNzaXN0YW50c1BhZ2UgZXh0ZW5kcyBDdXJzb3JQYWdlIHtcbn1cbihmdW5jdGlvbiAoQXNzaXN0YW50cykge1xuICAgIEFzc2lzdGFudHMuQXNzaXN0YW50c1BhZ2UgPSBBc3Npc3RhbnRzQVBJLkFzc2lzdGFudHNQYWdlO1xuICAgIEFzc2lzdGFudHMuRmlsZXMgPSBGaWxlc0FQSS5GaWxlcztcbiAgICBBc3Npc3RhbnRzLkFzc2lzdGFudEZpbGVzUGFnZSA9IEZpbGVzQVBJLkFzc2lzdGFudEZpbGVzUGFnZTtcbn0pKEFzc2lzdGFudHMgfHwgKEFzc2lzdGFudHMgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXNzaXN0YW50cy5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiaXNSZXF1ZXN0T3B0aW9ucyIsIkFzc2lzdGFudHNBUEkiLCJGaWxlc0FQSSIsIkN1cnNvclBhZ2UiLCJBc3Npc3RhbnRzIiwiY29uc3RydWN0b3IiLCJhcmd1bWVudHMiLCJmaWxlcyIsIkZpbGVzIiwiX2NsaWVudCIsImNyZWF0ZSIsImJvZHkiLCJvcHRpb25zIiwicG9zdCIsImhlYWRlcnMiLCJyZXRyaWV2ZSIsImFzc2lzdGFudElkIiwiZ2V0IiwidXBkYXRlIiwibGlzdCIsInF1ZXJ5IiwiZ2V0QVBJTGlzdCIsIkFzc2lzdGFudHNQYWdlIiwiZGVsIiwiZGVsZXRlIiwiQXNzaXN0YW50RmlsZXNQYWdlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openai/resources/beta/assistants/assistants.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/openai/resources/beta/assistants/files.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/openai/resources/beta/assistants/files.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AssistantFilesPage: () => (/* binding */ AssistantFilesPage),\n/* harmony export */   Files: () => (/* binding */ Files)\n/* harmony export */ });\n/* harmony import */ var openai_resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/resource */ \"(ssr)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var openai_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai/core */ \"(ssr)/./node_modules/openai/core.mjs\");\n/* harmony import */ var openai_resources_beta_assistants_files__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! openai/resources/beta/assistants/files */ \"(ssr)/./node_modules/openai/resources/beta/assistants/files.mjs\");\n/* harmony import */ var openai_pagination__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! openai/pagination */ \"(ssr)/./node_modules/openai/pagination.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\n\n\n\nclass Files extends openai_resource__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Create an assistant file by attaching a\n     * [File](https://platform.openai.com/docs/api-reference/files) to an\n     * [assistant](https://platform.openai.com/docs/api-reference/assistants).\n     */ create(assistantId, body, options) {\n        return this._client.post(`/assistants/${assistantId}/files`, {\n            body,\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v1\",\n                ...options?.headers\n            }\n        });\n    }\n    /**\n     * Retrieves an AssistantFile.\n     */ retrieve(assistantId, fileId, options) {\n        return this._client.get(`/assistants/${assistantId}/files/${fileId}`, {\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v1\",\n                ...options?.headers\n            }\n        });\n    }\n    list(assistantId, query = {}, options) {\n        if ((0,openai_core__WEBPACK_IMPORTED_MODULE_1__.isRequestOptions)(query)) {\n            return this.list(assistantId, {}, query);\n        }\n        return this._client.getAPIList(`/assistants/${assistantId}/files`, AssistantFilesPage, {\n            query,\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v1\",\n                ...options?.headers\n            }\n        });\n    }\n    /**\n     * Delete an assistant file.\n     */ del(assistantId, fileId, options) {\n        return this._client.delete(`/assistants/${assistantId}/files/${fileId}`, {\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v1\",\n                ...options?.headers\n            }\n        });\n    }\n}\nclass AssistantFilesPage extends openai_pagination__WEBPACK_IMPORTED_MODULE_2__.CursorPage {\n}\n(function(Files) {\n    Files.AssistantFilesPage = openai_resources_beta_assistants_files__WEBPACK_IMPORTED_MODULE_3__.AssistantFilesPage;\n})(Files || (Files = {})); //# sourceMappingURL=files.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9iZXRhL2Fzc2lzdGFudHMvZmlsZXMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLHFEQUFxRDtBQUNQO0FBQ0M7QUFDb0I7QUFDcEI7QUFDeEMsTUFBTUksY0FBY0osd0RBQVdBO0lBQ2xDOzs7O0tBSUMsR0FDREssT0FBT0MsV0FBVyxFQUFFQyxJQUFJLEVBQUVDLE9BQU8sRUFBRTtRQUMvQixPQUFPLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxJQUFJLENBQUMsQ0FBQyxZQUFZLEVBQUVKLFlBQVksTUFBTSxDQUFDLEVBQUU7WUFDekRDO1lBQ0EsR0FBR0MsT0FBTztZQUNWRyxTQUFTO2dCQUFFLGVBQWU7Z0JBQWlCLEdBQUdILFNBQVNHLE9BQU87WUFBQztRQUNuRTtJQUNKO0lBQ0E7O0tBRUMsR0FDREMsU0FBU04sV0FBVyxFQUFFTyxNQUFNLEVBQUVMLE9BQU8sRUFBRTtRQUNuQyxPQUFPLElBQUksQ0FBQ0MsT0FBTyxDQUFDSyxHQUFHLENBQUMsQ0FBQyxZQUFZLEVBQUVSLFlBQVksT0FBTyxFQUFFTyxPQUFPLENBQUMsRUFBRTtZQUNsRSxHQUFHTCxPQUFPO1lBQ1ZHLFNBQVM7Z0JBQUUsZUFBZTtnQkFBaUIsR0FBR0gsU0FBU0csT0FBTztZQUFDO1FBQ25FO0lBQ0o7SUFDQUksS0FBS1QsV0FBVyxFQUFFVSxRQUFRLENBQUMsQ0FBQyxFQUFFUixPQUFPLEVBQUU7UUFDbkMsSUFBSVAsNkRBQWdCQSxDQUFDZSxRQUFRO1lBQ3pCLE9BQU8sSUFBSSxDQUFDRCxJQUFJLENBQUNULGFBQWEsQ0FBQyxHQUFHVTtRQUN0QztRQUNBLE9BQU8sSUFBSSxDQUFDUCxPQUFPLENBQUNRLFVBQVUsQ0FBQyxDQUFDLFlBQVksRUFBRVgsWUFBWSxNQUFNLENBQUMsRUFBRVksb0JBQW9CO1lBQ25GRjtZQUNBLEdBQUdSLE9BQU87WUFDVkcsU0FBUztnQkFBRSxlQUFlO2dCQUFpQixHQUFHSCxTQUFTRyxPQUFPO1lBQUM7UUFDbkU7SUFDSjtJQUNBOztLQUVDLEdBQ0RRLElBQUliLFdBQVcsRUFBRU8sTUFBTSxFQUFFTCxPQUFPLEVBQUU7UUFDOUIsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ1csTUFBTSxDQUFDLENBQUMsWUFBWSxFQUFFZCxZQUFZLE9BQU8sRUFBRU8sT0FBTyxDQUFDLEVBQUU7WUFDckUsR0FBR0wsT0FBTztZQUNWRyxTQUFTO2dCQUFFLGVBQWU7Z0JBQWlCLEdBQUdILFNBQVNHLE9BQU87WUFBQztRQUNuRTtJQUNKO0FBQ0o7QUFDTyxNQUFNTywyQkFBMkJmLHlEQUFVQTtBQUNsRDtBQUNDLFVBQVVDLEtBQUs7SUFDWkEsTUFBTWMsa0JBQWtCLEdBQUdoQixzRkFBMkI7QUFDMUQsR0FBR0UsU0FBVUEsQ0FBQUEsUUFBUSxDQUFDLEtBQ3RCLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWFwcC8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2JldGEvYXNzaXN0YW50cy9maWxlcy5tanM/ODJmMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tICdvcGVuYWkvcmVzb3VyY2UnO1xuaW1wb3J0IHsgaXNSZXF1ZXN0T3B0aW9ucyB9IGZyb20gJ29wZW5haS9jb3JlJztcbmltcG9ydCAqIGFzIEZpbGVzQVBJIGZyb20gJ29wZW5haS9yZXNvdXJjZXMvYmV0YS9hc3Npc3RhbnRzL2ZpbGVzJztcbmltcG9ydCB7IEN1cnNvclBhZ2UgfSBmcm9tICdvcGVuYWkvcGFnaW5hdGlvbic7XG5leHBvcnQgY2xhc3MgRmlsZXMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGFuIGFzc2lzdGFudCBmaWxlIGJ5IGF0dGFjaGluZyBhXG4gICAgICogW0ZpbGVdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvZmlsZXMpIHRvIGFuXG4gICAgICogW2Fzc2lzdGFudF0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9hc3Npc3RhbnRzKS5cbiAgICAgKi9cbiAgICBjcmVhdGUoYXNzaXN0YW50SWQsIGJvZHksIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KGAvYXNzaXN0YW50cy8ke2Fzc2lzdGFudElkfS9maWxlc2AsIHtcbiAgICAgICAgICAgIGJvZHksXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgaGVhZGVyczogeyAnT3BlbkFJLUJldGEnOiAnYXNzaXN0YW50cz12MScsIC4uLm9wdGlvbnM/LmhlYWRlcnMgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHJpZXZlcyBhbiBBc3Npc3RhbnRGaWxlLlxuICAgICAqL1xuICAgIHJldHJpZXZlKGFzc2lzdGFudElkLCBmaWxlSWQsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXQoYC9hc3Npc3RhbnRzLyR7YXNzaXN0YW50SWR9L2ZpbGVzLyR7ZmlsZUlkfWAsIHtcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiB7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYxJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgbGlzdChhc3Npc3RhbnRJZCwgcXVlcnkgPSB7fSwgb3B0aW9ucykge1xuICAgICAgICBpZiAoaXNSZXF1ZXN0T3B0aW9ucyhxdWVyeSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxpc3QoYXNzaXN0YW50SWQsIHt9LCBxdWVyeSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXRBUElMaXN0KGAvYXNzaXN0YW50cy8ke2Fzc2lzdGFudElkfS9maWxlc2AsIEFzc2lzdGFudEZpbGVzUGFnZSwge1xuICAgICAgICAgICAgcXVlcnksXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgaGVhZGVyczogeyAnT3BlbkFJLUJldGEnOiAnYXNzaXN0YW50cz12MScsIC4uLm9wdGlvbnM/LmhlYWRlcnMgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlbGV0ZSBhbiBhc3Npc3RhbnQgZmlsZS5cbiAgICAgKi9cbiAgICBkZWwoYXNzaXN0YW50SWQsIGZpbGVJZCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmRlbGV0ZShgL2Fzc2lzdGFudHMvJHthc3Npc3RhbnRJZH0vZmlsZXMvJHtmaWxlSWR9YCwge1xuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHsgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djEnLCAuLi5vcHRpb25zPy5oZWFkZXJzIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBBc3Npc3RhbnRGaWxlc1BhZ2UgZXh0ZW5kcyBDdXJzb3JQYWdlIHtcbn1cbihmdW5jdGlvbiAoRmlsZXMpIHtcbiAgICBGaWxlcy5Bc3Npc3RhbnRGaWxlc1BhZ2UgPSBGaWxlc0FQSS5Bc3Npc3RhbnRGaWxlc1BhZ2U7XG59KShGaWxlcyB8fCAoRmlsZXMgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmlsZXMubWpzLm1hcCJdLCJuYW1lcyI6WyJBUElSZXNvdXJjZSIsImlzUmVxdWVzdE9wdGlvbnMiLCJGaWxlc0FQSSIsIkN1cnNvclBhZ2UiLCJGaWxlcyIsImNyZWF0ZSIsImFzc2lzdGFudElkIiwiYm9keSIsIm9wdGlvbnMiLCJfY2xpZW50IiwicG9zdCIsImhlYWRlcnMiLCJyZXRyaWV2ZSIsImZpbGVJZCIsImdldCIsImxpc3QiLCJxdWVyeSIsImdldEFQSUxpc3QiLCJBc3Npc3RhbnRGaWxlc1BhZ2UiLCJkZWwiLCJkZWxldGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openai/resources/beta/assistants/files.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/openai/resources/beta/beta.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/openai/resources/beta/beta.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Beta: () => (/* binding */ Beta)\n/* harmony export */ });\n/* harmony import */ var openai_resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/resource */ \"(ssr)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var openai_resources_beta_assistants_assistants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! openai/resources/beta/assistants/assistants */ \"(ssr)/./node_modules/openai/resources/beta/assistants/assistants.mjs\");\n/* harmony import */ var openai_resources_beta_chat_chat__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai/resources/beta/chat/chat */ \"(ssr)/./node_modules/openai/resources/beta/chat/chat.mjs\");\n/* harmony import */ var openai_resources_beta_threads_threads__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! openai/resources/beta/threads/threads */ \"(ssr)/./node_modules/openai/resources/beta/threads/threads.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\n\n\n\nclass Beta extends openai_resource__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    constructor(){\n        super(...arguments);\n        this.chat = new openai_resources_beta_chat_chat__WEBPACK_IMPORTED_MODULE_1__.Chat(this._client);\n        this.assistants = new openai_resources_beta_assistants_assistants__WEBPACK_IMPORTED_MODULE_2__.Assistants(this._client);\n        this.threads = new openai_resources_beta_threads_threads__WEBPACK_IMPORTED_MODULE_3__.Threads(this._client);\n    }\n}\n(function(Beta) {\n    Beta.Chat = openai_resources_beta_chat_chat__WEBPACK_IMPORTED_MODULE_1__.Chat;\n    Beta.Assistants = openai_resources_beta_assistants_assistants__WEBPACK_IMPORTED_MODULE_2__.Assistants;\n    Beta.AssistantsPage = openai_resources_beta_assistants_assistants__WEBPACK_IMPORTED_MODULE_2__.AssistantsPage;\n    Beta.Threads = openai_resources_beta_threads_threads__WEBPACK_IMPORTED_MODULE_3__.Threads;\n})(Beta || (Beta = {})); //# sourceMappingURL=beta.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9iZXRhL2JldGEubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEscURBQXFEO0FBQ1A7QUFDK0I7QUFDbEI7QUFDUztBQUM3RCxNQUFNSSxhQUFhSix3REFBV0E7SUFDakNLLGFBQWM7UUFDVixLQUFLLElBQUlDO1FBQ1QsSUFBSSxDQUFDQyxJQUFJLEdBQUcsSUFBSUwsaUVBQVksQ0FBQyxJQUFJLENBQUNPLE9BQU87UUFDekMsSUFBSSxDQUFDQyxVQUFVLEdBQUcsSUFBSVQsbUZBQXdCLENBQUMsSUFBSSxDQUFDUSxPQUFPO1FBQzNELElBQUksQ0FBQ0csT0FBTyxHQUFHLElBQUlULDBFQUFrQixDQUFDLElBQUksQ0FBQ00sT0FBTztJQUN0RDtBQUNKO0FBQ0MsVUFBVUwsSUFBSTtJQUNYQSxLQUFLSSxJQUFJLEdBQUdOLGlFQUFZO0lBQ3hCRSxLQUFLTyxVQUFVLEdBQUdWLG1GQUF3QjtJQUMxQ0csS0FBS1UsY0FBYyxHQUFHYix1RkFBNEI7SUFDbERHLEtBQUtTLE9BQU8sR0FBR1YsMEVBQWtCO0FBQ3JDLEdBQUdDLFFBQVNBLENBQUFBLE9BQU8sQ0FBQyxLQUNwQixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1hcHAvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9iZXRhL2JldGEubWpzP2Y5MjUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSAnb3BlbmFpL3Jlc291cmNlJztcbmltcG9ydCAqIGFzIEFzc2lzdGFudHNBUEkgZnJvbSAnb3BlbmFpL3Jlc291cmNlcy9iZXRhL2Fzc2lzdGFudHMvYXNzaXN0YW50cyc7XG5pbXBvcnQgKiBhcyBDaGF0QVBJIGZyb20gJ29wZW5haS9yZXNvdXJjZXMvYmV0YS9jaGF0L2NoYXQnO1xuaW1wb3J0ICogYXMgVGhyZWFkc0FQSSBmcm9tICdvcGVuYWkvcmVzb3VyY2VzL2JldGEvdGhyZWFkcy90aHJlYWRzJztcbmV4cG9ydCBjbGFzcyBCZXRhIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmNoYXQgPSBuZXcgQ2hhdEFQSS5DaGF0KHRoaXMuX2NsaWVudCk7XG4gICAgICAgIHRoaXMuYXNzaXN0YW50cyA9IG5ldyBBc3Npc3RhbnRzQVBJLkFzc2lzdGFudHModGhpcy5fY2xpZW50KTtcbiAgICAgICAgdGhpcy50aHJlYWRzID0gbmV3IFRocmVhZHNBUEkuVGhyZWFkcyh0aGlzLl9jbGllbnQpO1xuICAgIH1cbn1cbihmdW5jdGlvbiAoQmV0YSkge1xuICAgIEJldGEuQ2hhdCA9IENoYXRBUEkuQ2hhdDtcbiAgICBCZXRhLkFzc2lzdGFudHMgPSBBc3Npc3RhbnRzQVBJLkFzc2lzdGFudHM7XG4gICAgQmV0YS5Bc3Npc3RhbnRzUGFnZSA9IEFzc2lzdGFudHNBUEkuQXNzaXN0YW50c1BhZ2U7XG4gICAgQmV0YS5UaHJlYWRzID0gVGhyZWFkc0FQSS5UaHJlYWRzO1xufSkoQmV0YSB8fCAoQmV0YSA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iZXRhLm1qcy5tYXAiXSwibmFtZXMiOlsiQVBJUmVzb3VyY2UiLCJBc3Npc3RhbnRzQVBJIiwiQ2hhdEFQSSIsIlRocmVhZHNBUEkiLCJCZXRhIiwiY29uc3RydWN0b3IiLCJhcmd1bWVudHMiLCJjaGF0IiwiQ2hhdCIsIl9jbGllbnQiLCJhc3Npc3RhbnRzIiwiQXNzaXN0YW50cyIsInRocmVhZHMiLCJUaHJlYWRzIiwiQXNzaXN0YW50c1BhZ2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openai/resources/beta/beta.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/openai/resources/beta/chat/chat.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/openai/resources/beta/chat/chat.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Chat: () => (/* binding */ Chat)\n/* harmony export */ });\n/* harmony import */ var openai_resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/resource */ \"(ssr)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var openai_resources_beta_chat_completions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai/resources/beta/chat/completions */ \"(ssr)/./node_modules/openai/resources/beta/chat/completions.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\n\nclass Chat extends openai_resource__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    constructor(){\n        super(...arguments);\n        this.completions = new openai_resources_beta_chat_completions__WEBPACK_IMPORTED_MODULE_1__.Completions(this._client);\n    }\n}\n(function(Chat) {\n    Chat.Completions = openai_resources_beta_chat_completions__WEBPACK_IMPORTED_MODULE_1__.Completions;\n})(Chat || (Chat = {})); //# sourceMappingURL=chat.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9iZXRhL2NoYXQvY2hhdC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEscURBQXFEO0FBQ1A7QUFDMkI7QUFDbEUsTUFBTUUsYUFBYUYsd0RBQVdBO0lBQ2pDRyxhQUFjO1FBQ1YsS0FBSyxJQUFJQztRQUNULElBQUksQ0FBQ0MsV0FBVyxHQUFHLElBQUlKLCtFQUEwQixDQUFDLElBQUksQ0FBQ00sT0FBTztJQUNsRTtBQUNKO0FBQ0MsVUFBVUwsSUFBSTtJQUNYQSxLQUFLSSxXQUFXLEdBQUdMLCtFQUEwQjtBQUNqRCxHQUFHQyxRQUFTQSxDQUFBQSxPQUFPLENBQUMsS0FDcEIsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktYXBwLy4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZXMvYmV0YS9jaGF0L2NoYXQubWpzPzZmODciXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSAnb3BlbmFpL3Jlc291cmNlJztcbmltcG9ydCAqIGFzIENvbXBsZXRpb25zQVBJIGZyb20gJ29wZW5haS9yZXNvdXJjZXMvYmV0YS9jaGF0L2NvbXBsZXRpb25zJztcbmV4cG9ydCBjbGFzcyBDaGF0IGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmNvbXBsZXRpb25zID0gbmV3IENvbXBsZXRpb25zQVBJLkNvbXBsZXRpb25zKHRoaXMuX2NsaWVudCk7XG4gICAgfVxufVxuKGZ1bmN0aW9uIChDaGF0KSB7XG4gICAgQ2hhdC5Db21wbGV0aW9ucyA9IENvbXBsZXRpb25zQVBJLkNvbXBsZXRpb25zO1xufSkoQ2hhdCB8fCAoQ2hhdCA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaGF0Lm1qcy5tYXAiXSwibmFtZXMiOlsiQVBJUmVzb3VyY2UiLCJDb21wbGV0aW9uc0FQSSIsIkNoYXQiLCJjb25zdHJ1Y3RvciIsImFyZ3VtZW50cyIsImNvbXBsZXRpb25zIiwiQ29tcGxldGlvbnMiLCJfY2xpZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openai/resources/beta/chat/chat.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/openai/resources/beta/chat/completions.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/openai/resources/beta/chat/completions.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatCompletionRunner: () => (/* reexport safe */ openai_lib_ChatCompletionRunner__WEBPACK_IMPORTED_MODULE_0__.ChatCompletionRunner),\n/* harmony export */   ChatCompletionStream: () => (/* reexport safe */ openai_lib_ChatCompletionStream__WEBPACK_IMPORTED_MODULE_3__.ChatCompletionStream),\n/* harmony export */   ChatCompletionStreamingRunner: () => (/* reexport safe */ openai_lib_ChatCompletionStreamingRunner__WEBPACK_IMPORTED_MODULE_1__.ChatCompletionStreamingRunner),\n/* harmony export */   Completions: () => (/* binding */ Completions),\n/* harmony export */   ParsingFunction: () => (/* reexport safe */ openai_lib_RunnableFunction__WEBPACK_IMPORTED_MODULE_2__.ParsingFunction),\n/* harmony export */   ParsingToolFunction: () => (/* reexport safe */ openai_lib_RunnableFunction__WEBPACK_IMPORTED_MODULE_2__.ParsingToolFunction)\n/* harmony export */ });\n/* harmony import */ var openai_resource__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! openai/resource */ \"(ssr)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var openai_lib_ChatCompletionRunner__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/lib/ChatCompletionRunner */ \"(ssr)/./node_modules/openai/lib/ChatCompletionRunner.mjs\");\n/* harmony import */ var openai_lib_ChatCompletionStreamingRunner__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai/lib/ChatCompletionStreamingRunner */ \"(ssr)/./node_modules/openai/lib/ChatCompletionStreamingRunner.mjs\");\n/* harmony import */ var openai_lib_RunnableFunction__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! openai/lib/RunnableFunction */ \"(ssr)/./node_modules/openai/lib/RunnableFunction.mjs\");\n/* harmony import */ var openai_lib_ChatCompletionStream__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! openai/lib/ChatCompletionStream */ \"(ssr)/./node_modules/openai/lib/ChatCompletionStream.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\n\n\n\n\n\n\n\nclass Completions extends openai_resource__WEBPACK_IMPORTED_MODULE_4__.APIResource {\n    runFunctions(body, options) {\n        if (body.stream) {\n            return openai_lib_ChatCompletionStreamingRunner__WEBPACK_IMPORTED_MODULE_1__.ChatCompletionStreamingRunner.runFunctions(this._client.chat.completions, body, options);\n        }\n        return openai_lib_ChatCompletionRunner__WEBPACK_IMPORTED_MODULE_0__.ChatCompletionRunner.runFunctions(this._client.chat.completions, body, options);\n    }\n    runTools(body, options) {\n        if (body.stream) {\n            return openai_lib_ChatCompletionStreamingRunner__WEBPACK_IMPORTED_MODULE_1__.ChatCompletionStreamingRunner.runTools(this._client.chat.completions, body, options);\n        }\n        return openai_lib_ChatCompletionRunner__WEBPACK_IMPORTED_MODULE_0__.ChatCompletionRunner.runTools(this._client.chat.completions, body, options);\n    }\n    /**\n     * Creates a chat completion stream\n     */ stream(body, options) {\n        return openai_lib_ChatCompletionStream__WEBPACK_IMPORTED_MODULE_3__.ChatCompletionStream.createChatCompletion(this._client.chat.completions, body, options);\n    }\n} //# sourceMappingURL=completions.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9iZXRhL2NoYXQvY29tcGxldGlvbnMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQUEscURBQXFEO0FBQ1A7QUFDeUI7QUFDQTtBQUNtQjtBQUNBO0FBQ047QUFDYjtBQUNBO0FBQ2hFLE1BQU1NLG9CQUFvQk4sd0RBQVdBO0lBQ3hDTyxhQUFhQyxJQUFJLEVBQUVDLE9BQU8sRUFBRTtRQUN4QixJQUFJRCxLQUFLRSxNQUFNLEVBQUU7WUFDYixPQUFPUixtR0FBNkJBLENBQUNLLFlBQVksQ0FBQyxJQUFJLENBQUNJLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDQyxXQUFXLEVBQUVMLE1BQU1DO1FBQzNGO1FBQ0EsT0FBT1IsaUZBQW9CQSxDQUFDTSxZQUFZLENBQUMsSUFBSSxDQUFDSSxPQUFPLENBQUNDLElBQUksQ0FBQ0MsV0FBVyxFQUFFTCxNQUFNQztJQUNsRjtJQUNBSyxTQUFTTixJQUFJLEVBQUVDLE9BQU8sRUFBRTtRQUNwQixJQUFJRCxLQUFLRSxNQUFNLEVBQUU7WUFDYixPQUFPUixtR0FBNkJBLENBQUNZLFFBQVEsQ0FBQyxJQUFJLENBQUNILE9BQU8sQ0FBQ0MsSUFBSSxDQUFDQyxXQUFXLEVBQUVMLE1BQU1DO1FBQ3ZGO1FBQ0EsT0FBT1IsaUZBQW9CQSxDQUFDYSxRQUFRLENBQUMsSUFBSSxDQUFDSCxPQUFPLENBQUNDLElBQUksQ0FBQ0MsV0FBVyxFQUFFTCxNQUFNQztJQUM5RTtJQUNBOztLQUVDLEdBQ0RDLE9BQU9GLElBQUksRUFBRUMsT0FBTyxFQUFFO1FBQ2xCLE9BQU9KLGlGQUFvQkEsQ0FBQ1Usb0JBQW9CLENBQUMsSUFBSSxDQUFDSixPQUFPLENBQUNDLElBQUksQ0FBQ0MsV0FBVyxFQUFFTCxNQUFNQztJQUMxRjtBQUNKLEVBQ0Esd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktYXBwLy4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZXMvYmV0YS9jaGF0L2NvbXBsZXRpb25zLm1qcz8wMGNhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gJ29wZW5haS9yZXNvdXJjZSc7XG5pbXBvcnQgeyBDaGF0Q29tcGxldGlvblJ1bm5lciB9IGZyb20gJ29wZW5haS9saWIvQ2hhdENvbXBsZXRpb25SdW5uZXInO1xuZXhwb3J0IHsgQ2hhdENvbXBsZXRpb25SdW5uZXIgfSBmcm9tICdvcGVuYWkvbGliL0NoYXRDb21wbGV0aW9uUnVubmVyJztcbmltcG9ydCB7IENoYXRDb21wbGV0aW9uU3RyZWFtaW5nUnVubmVyLCB9IGZyb20gJ29wZW5haS9saWIvQ2hhdENvbXBsZXRpb25TdHJlYW1pbmdSdW5uZXInO1xuZXhwb3J0IHsgQ2hhdENvbXBsZXRpb25TdHJlYW1pbmdSdW5uZXIsIH0gZnJvbSAnb3BlbmFpL2xpYi9DaGF0Q29tcGxldGlvblN0cmVhbWluZ1J1bm5lcic7XG5leHBvcnQgeyBQYXJzaW5nRnVuY3Rpb24sIFBhcnNpbmdUb29sRnVuY3Rpb24sIH0gZnJvbSAnb3BlbmFpL2xpYi9SdW5uYWJsZUZ1bmN0aW9uJztcbmltcG9ydCB7IENoYXRDb21wbGV0aW9uU3RyZWFtIH0gZnJvbSAnb3BlbmFpL2xpYi9DaGF0Q29tcGxldGlvblN0cmVhbSc7XG5leHBvcnQgeyBDaGF0Q29tcGxldGlvblN0cmVhbSB9IGZyb20gJ29wZW5haS9saWIvQ2hhdENvbXBsZXRpb25TdHJlYW0nO1xuZXhwb3J0IGNsYXNzIENvbXBsZXRpb25zIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAgIHJ1bkZ1bmN0aW9ucyhib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChib2R5LnN0cmVhbSkge1xuICAgICAgICAgICAgcmV0dXJuIENoYXRDb21wbGV0aW9uU3RyZWFtaW5nUnVubmVyLnJ1bkZ1bmN0aW9ucyh0aGlzLl9jbGllbnQuY2hhdC5jb21wbGV0aW9ucywgYm9keSwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIENoYXRDb21wbGV0aW9uUnVubmVyLnJ1bkZ1bmN0aW9ucyh0aGlzLl9jbGllbnQuY2hhdC5jb21wbGV0aW9ucywgYm9keSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIHJ1blRvb2xzKGJvZHksIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKGJvZHkuc3RyZWFtKSB7XG4gICAgICAgICAgICByZXR1cm4gQ2hhdENvbXBsZXRpb25TdHJlYW1pbmdSdW5uZXIucnVuVG9vbHModGhpcy5fY2xpZW50LmNoYXQuY29tcGxldGlvbnMsIGJvZHksIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBDaGF0Q29tcGxldGlvblJ1bm5lci5ydW5Ub29scyh0aGlzLl9jbGllbnQuY2hhdC5jb21wbGV0aW9ucywgYm9keSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjaGF0IGNvbXBsZXRpb24gc3RyZWFtXG4gICAgICovXG4gICAgc3RyZWFtKGJvZHksIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIENoYXRDb21wbGV0aW9uU3RyZWFtLmNyZWF0ZUNoYXRDb21wbGV0aW9uKHRoaXMuX2NsaWVudC5jaGF0LmNvbXBsZXRpb25zLCBib2R5LCBvcHRpb25zKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21wbGV0aW9ucy5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiQ2hhdENvbXBsZXRpb25SdW5uZXIiLCJDaGF0Q29tcGxldGlvblN0cmVhbWluZ1J1bm5lciIsIlBhcnNpbmdGdW5jdGlvbiIsIlBhcnNpbmdUb29sRnVuY3Rpb24iLCJDaGF0Q29tcGxldGlvblN0cmVhbSIsIkNvbXBsZXRpb25zIiwicnVuRnVuY3Rpb25zIiwiYm9keSIsIm9wdGlvbnMiLCJzdHJlYW0iLCJfY2xpZW50IiwiY2hhdCIsImNvbXBsZXRpb25zIiwicnVuVG9vbHMiLCJjcmVhdGVDaGF0Q29tcGxldGlvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openai/resources/beta/chat/completions.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/openai/resources/beta/threads/messages/files.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/openai/resources/beta/threads/messages/files.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Files: () => (/* binding */ Files),\n/* harmony export */   MessageFilesPage: () => (/* binding */ MessageFilesPage)\n/* harmony export */ });\n/* harmony import */ var openai_resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/resource */ \"(ssr)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var openai_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai/core */ \"(ssr)/./node_modules/openai/core.mjs\");\n/* harmony import */ var openai_resources_beta_threads_messages_files__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! openai/resources/beta/threads/messages/files */ \"(ssr)/./node_modules/openai/resources/beta/threads/messages/files.mjs\");\n/* harmony import */ var openai_pagination__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! openai/pagination */ \"(ssr)/./node_modules/openai/pagination.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\n\n\n\nclass Files extends openai_resource__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Retrieves a message file.\n     */ retrieve(threadId, messageId, fileId, options) {\n        return this._client.get(`/threads/${threadId}/messages/${messageId}/files/${fileId}`, {\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v1\",\n                ...options?.headers\n            }\n        });\n    }\n    list(threadId, messageId, query = {}, options) {\n        if ((0,openai_core__WEBPACK_IMPORTED_MODULE_1__.isRequestOptions)(query)) {\n            return this.list(threadId, messageId, {}, query);\n        }\n        return this._client.getAPIList(`/threads/${threadId}/messages/${messageId}/files`, MessageFilesPage, {\n            query,\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v1\",\n                ...options?.headers\n            }\n        });\n    }\n}\nclass MessageFilesPage extends openai_pagination__WEBPACK_IMPORTED_MODULE_2__.CursorPage {\n}\n(function(Files) {\n    Files.MessageFilesPage = openai_resources_beta_threads_messages_files__WEBPACK_IMPORTED_MODULE_3__.MessageFilesPage;\n})(Files || (Files = {})); //# sourceMappingURL=files.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9iZXRhL3RocmVhZHMvbWVzc2FnZXMvZmlsZXMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLHFEQUFxRDtBQUNQO0FBQ0M7QUFDMEI7QUFDMUI7QUFDeEMsTUFBTUksY0FBY0osd0RBQVdBO0lBQ2xDOztLQUVDLEdBQ0RLLFNBQVNDLFFBQVEsRUFBRUMsU0FBUyxFQUFFQyxNQUFNLEVBQUVDLE9BQU8sRUFBRTtRQUMzQyxPQUFPLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxHQUFHLENBQUMsQ0FBQyxTQUFTLEVBQUVMLFNBQVMsVUFBVSxFQUFFQyxVQUFVLE9BQU8sRUFBRUMsT0FBTyxDQUFDLEVBQUU7WUFDbEYsR0FBR0MsT0FBTztZQUNWRyxTQUFTO2dCQUFFLGVBQWU7Z0JBQWlCLEdBQUdILFNBQVNHLE9BQU87WUFBQztRQUNuRTtJQUNKO0lBQ0FDLEtBQUtQLFFBQVEsRUFBRUMsU0FBUyxFQUFFTyxRQUFRLENBQUMsQ0FBQyxFQUFFTCxPQUFPLEVBQUU7UUFDM0MsSUFBSVIsNkRBQWdCQSxDQUFDYSxRQUFRO1lBQ3pCLE9BQU8sSUFBSSxDQUFDRCxJQUFJLENBQUNQLFVBQVVDLFdBQVcsQ0FBQyxHQUFHTztRQUM5QztRQUNBLE9BQU8sSUFBSSxDQUFDSixPQUFPLENBQUNLLFVBQVUsQ0FBQyxDQUFDLFNBQVMsRUFBRVQsU0FBUyxVQUFVLEVBQUVDLFVBQVUsTUFBTSxDQUFDLEVBQUVTLGtCQUFrQjtZQUNqR0Y7WUFDQSxHQUFHTCxPQUFPO1lBQ1ZHLFNBQVM7Z0JBQUUsZUFBZTtnQkFBaUIsR0FBR0gsU0FBU0csT0FBTztZQUFDO1FBQ25FO0lBQ0o7QUFDSjtBQUNPLE1BQU1JLHlCQUF5QmIseURBQVVBO0FBQ2hEO0FBQ0MsVUFBVUMsS0FBSztJQUNaQSxNQUFNWSxnQkFBZ0IsR0FBR2QsMEZBQXlCO0FBQ3RELEdBQUdFLFNBQVVBLENBQUFBLFFBQVEsQ0FBQyxLQUN0QixrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1hcHAvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9iZXRhL3RocmVhZHMvbWVzc2FnZXMvZmlsZXMubWpzPzA4YTMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSAnb3BlbmFpL3Jlc291cmNlJztcbmltcG9ydCB7IGlzUmVxdWVzdE9wdGlvbnMgfSBmcm9tICdvcGVuYWkvY29yZSc7XG5pbXBvcnQgKiBhcyBGaWxlc0FQSSBmcm9tICdvcGVuYWkvcmVzb3VyY2VzL2JldGEvdGhyZWFkcy9tZXNzYWdlcy9maWxlcyc7XG5pbXBvcnQgeyBDdXJzb3JQYWdlIH0gZnJvbSAnb3BlbmFpL3BhZ2luYXRpb24nO1xuZXhwb3J0IGNsYXNzIEZpbGVzIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAgIC8qKlxuICAgICAqIFJldHJpZXZlcyBhIG1lc3NhZ2UgZmlsZS5cbiAgICAgKi9cbiAgICByZXRyaWV2ZSh0aHJlYWRJZCwgbWVzc2FnZUlkLCBmaWxlSWQsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXQoYC90aHJlYWRzLyR7dGhyZWFkSWR9L21lc3NhZ2VzLyR7bWVzc2FnZUlkfS9maWxlcy8ke2ZpbGVJZH1gLCB7XG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgaGVhZGVyczogeyAnT3BlbkFJLUJldGEnOiAnYXNzaXN0YW50cz12MScsIC4uLm9wdGlvbnM/LmhlYWRlcnMgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGxpc3QodGhyZWFkSWQsIG1lc3NhZ2VJZCwgcXVlcnkgPSB7fSwgb3B0aW9ucykge1xuICAgICAgICBpZiAoaXNSZXF1ZXN0T3B0aW9ucyhxdWVyeSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxpc3QodGhyZWFkSWQsIG1lc3NhZ2VJZCwge30sIHF1ZXJ5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldEFQSUxpc3QoYC90aHJlYWRzLyR7dGhyZWFkSWR9L21lc3NhZ2VzLyR7bWVzc2FnZUlkfS9maWxlc2AsIE1lc3NhZ2VGaWxlc1BhZ2UsIHtcbiAgICAgICAgICAgIHF1ZXJ5LFxuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHsgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djEnLCAuLi5vcHRpb25zPy5oZWFkZXJzIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBNZXNzYWdlRmlsZXNQYWdlIGV4dGVuZHMgQ3Vyc29yUGFnZSB7XG59XG4oZnVuY3Rpb24gKEZpbGVzKSB7XG4gICAgRmlsZXMuTWVzc2FnZUZpbGVzUGFnZSA9IEZpbGVzQVBJLk1lc3NhZ2VGaWxlc1BhZ2U7XG59KShGaWxlcyB8fCAoRmlsZXMgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmlsZXMubWpzLm1hcCJdLCJuYW1lcyI6WyJBUElSZXNvdXJjZSIsImlzUmVxdWVzdE9wdGlvbnMiLCJGaWxlc0FQSSIsIkN1cnNvclBhZ2UiLCJGaWxlcyIsInJldHJpZXZlIiwidGhyZWFkSWQiLCJtZXNzYWdlSWQiLCJmaWxlSWQiLCJvcHRpb25zIiwiX2NsaWVudCIsImdldCIsImhlYWRlcnMiLCJsaXN0IiwicXVlcnkiLCJnZXRBUElMaXN0IiwiTWVzc2FnZUZpbGVzUGFnZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openai/resources/beta/threads/messages/files.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/openai/resources/beta/threads/messages/messages.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/openai/resources/beta/threads/messages/messages.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Messages: () => (/* binding */ Messages),\n/* harmony export */   ThreadMessagesPage: () => (/* binding */ ThreadMessagesPage)\n/* harmony export */ });\n/* harmony import */ var openai_resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/resource */ \"(ssr)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var openai_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! openai/core */ \"(ssr)/./node_modules/openai/core.mjs\");\n/* harmony import */ var openai_resources_beta_threads_messages_messages__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! openai/resources/beta/threads/messages/messages */ \"(ssr)/./node_modules/openai/resources/beta/threads/messages/messages.mjs\");\n/* harmony import */ var openai_resources_beta_threads_messages_files__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai/resources/beta/threads/messages/files */ \"(ssr)/./node_modules/openai/resources/beta/threads/messages/files.mjs\");\n/* harmony import */ var openai_pagination__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! openai/pagination */ \"(ssr)/./node_modules/openai/pagination.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\n\n\n\n\nclass Messages extends openai_resource__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    constructor(){\n        super(...arguments);\n        this.files = new openai_resources_beta_threads_messages_files__WEBPACK_IMPORTED_MODULE_1__.Files(this._client);\n    }\n    /**\n     * Create a message.\n     */ create(threadId, body, options) {\n        return this._client.post(`/threads/${threadId}/messages`, {\n            body,\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v1\",\n                ...options?.headers\n            }\n        });\n    }\n    /**\n     * Retrieve a message.\n     */ retrieve(threadId, messageId, options) {\n        return this._client.get(`/threads/${threadId}/messages/${messageId}`, {\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v1\",\n                ...options?.headers\n            }\n        });\n    }\n    /**\n     * Modifies a message.\n     */ update(threadId, messageId, body, options) {\n        return this._client.post(`/threads/${threadId}/messages/${messageId}`, {\n            body,\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v1\",\n                ...options?.headers\n            }\n        });\n    }\n    list(threadId, query = {}, options) {\n        if ((0,openai_core__WEBPACK_IMPORTED_MODULE_2__.isRequestOptions)(query)) {\n            return this.list(threadId, {}, query);\n        }\n        return this._client.getAPIList(`/threads/${threadId}/messages`, ThreadMessagesPage, {\n            query,\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v1\",\n                ...options?.headers\n            }\n        });\n    }\n}\nclass ThreadMessagesPage extends openai_pagination__WEBPACK_IMPORTED_MODULE_3__.CursorPage {\n}\n(function(Messages) {\n    Messages.ThreadMessagesPage = openai_resources_beta_threads_messages_messages__WEBPACK_IMPORTED_MODULE_4__.ThreadMessagesPage;\n    Messages.Files = openai_resources_beta_threads_messages_files__WEBPACK_IMPORTED_MODULE_1__.Files;\n    Messages.MessageFilesPage = openai_resources_beta_threads_messages_files__WEBPACK_IMPORTED_MODULE_1__.MessageFilesPage;\n})(Messages || (Messages = {})); //# sourceMappingURL=messages.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9iZXRhL3RocmVhZHMvbWVzc2FnZXMvbWVzc2FnZXMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSxxREFBcUQ7QUFDUDtBQUNDO0FBQ2dDO0FBQ047QUFDMUI7QUFDeEMsTUFBTUssaUJBQWlCTCx3REFBV0E7SUFDckNNLGFBQWM7UUFDVixLQUFLLElBQUlDO1FBQ1QsSUFBSSxDQUFDQyxLQUFLLEdBQUcsSUFBSUwsK0VBQWMsQ0FBQyxJQUFJLENBQUNPLE9BQU87SUFDaEQ7SUFDQTs7S0FFQyxHQUNEQyxPQUFPQyxRQUFRLEVBQUVDLElBQUksRUFBRUMsT0FBTyxFQUFFO1FBQzVCLE9BQU8sSUFBSSxDQUFDSixPQUFPLENBQUNLLElBQUksQ0FBQyxDQUFDLFNBQVMsRUFBRUgsU0FBUyxTQUFTLENBQUMsRUFBRTtZQUN0REM7WUFDQSxHQUFHQyxPQUFPO1lBQ1ZFLFNBQVM7Z0JBQUUsZUFBZTtnQkFBaUIsR0FBR0YsU0FBU0UsT0FBTztZQUFDO1FBQ25FO0lBQ0o7SUFDQTs7S0FFQyxHQUNEQyxTQUFTTCxRQUFRLEVBQUVNLFNBQVMsRUFBRUosT0FBTyxFQUFFO1FBQ25DLE9BQU8sSUFBSSxDQUFDSixPQUFPLENBQUNTLEdBQUcsQ0FBQyxDQUFDLFNBQVMsRUFBRVAsU0FBUyxVQUFVLEVBQUVNLFVBQVUsQ0FBQyxFQUFFO1lBQ2xFLEdBQUdKLE9BQU87WUFDVkUsU0FBUztnQkFBRSxlQUFlO2dCQUFpQixHQUFHRixTQUFTRSxPQUFPO1lBQUM7UUFDbkU7SUFDSjtJQUNBOztLQUVDLEdBQ0RJLE9BQU9SLFFBQVEsRUFBRU0sU0FBUyxFQUFFTCxJQUFJLEVBQUVDLE9BQU8sRUFBRTtRQUN2QyxPQUFPLElBQUksQ0FBQ0osT0FBTyxDQUFDSyxJQUFJLENBQUMsQ0FBQyxTQUFTLEVBQUVILFNBQVMsVUFBVSxFQUFFTSxVQUFVLENBQUMsRUFBRTtZQUNuRUw7WUFDQSxHQUFHQyxPQUFPO1lBQ1ZFLFNBQVM7Z0JBQUUsZUFBZTtnQkFBaUIsR0FBR0YsU0FBU0UsT0FBTztZQUFDO1FBQ25FO0lBQ0o7SUFDQUssS0FBS1QsUUFBUSxFQUFFVSxRQUFRLENBQUMsQ0FBQyxFQUFFUixPQUFPLEVBQUU7UUFDaEMsSUFBSWIsNkRBQWdCQSxDQUFDcUIsUUFBUTtZQUN6QixPQUFPLElBQUksQ0FBQ0QsSUFBSSxDQUFDVCxVQUFVLENBQUMsR0FBR1U7UUFDbkM7UUFDQSxPQUFPLElBQUksQ0FBQ1osT0FBTyxDQUFDYSxVQUFVLENBQUMsQ0FBQyxTQUFTLEVBQUVYLFNBQVMsU0FBUyxDQUFDLEVBQUVZLG9CQUFvQjtZQUNoRkY7WUFDQSxHQUFHUixPQUFPO1lBQ1ZFLFNBQVM7Z0JBQUUsZUFBZTtnQkFBaUIsR0FBR0YsU0FBU0UsT0FBTztZQUFDO1FBQ25FO0lBQ0o7QUFDSjtBQUNPLE1BQU1RLDJCQUEyQnBCLHlEQUFVQTtBQUNsRDtBQUNDLFVBQVVDLFFBQVE7SUFDZkEsU0FBU21CLGtCQUFrQixHQUFHdEIsK0ZBQThCO0lBQzVERyxTQUFTSSxLQUFLLEdBQUdOLCtFQUFjO0lBQy9CRSxTQUFTb0IsZ0JBQWdCLEdBQUd0QiwwRkFBeUI7QUFDekQsR0FBR0UsWUFBYUEsQ0FBQUEsV0FBVyxDQUFDLEtBQzVCLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWFwcC8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2JldGEvdGhyZWFkcy9tZXNzYWdlcy9tZXNzYWdlcy5tanM/NzAwNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tICdvcGVuYWkvcmVzb3VyY2UnO1xuaW1wb3J0IHsgaXNSZXF1ZXN0T3B0aW9ucyB9IGZyb20gJ29wZW5haS9jb3JlJztcbmltcG9ydCAqIGFzIE1lc3NhZ2VzQVBJIGZyb20gJ29wZW5haS9yZXNvdXJjZXMvYmV0YS90aHJlYWRzL21lc3NhZ2VzL21lc3NhZ2VzJztcbmltcG9ydCAqIGFzIEZpbGVzQVBJIGZyb20gJ29wZW5haS9yZXNvdXJjZXMvYmV0YS90aHJlYWRzL21lc3NhZ2VzL2ZpbGVzJztcbmltcG9ydCB7IEN1cnNvclBhZ2UgfSBmcm9tICdvcGVuYWkvcGFnaW5hdGlvbic7XG5leHBvcnQgY2xhc3MgTWVzc2FnZXMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuZmlsZXMgPSBuZXcgRmlsZXNBUEkuRmlsZXModGhpcy5fY2xpZW50KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbWVzc2FnZS5cbiAgICAgKi9cbiAgICBjcmVhdGUodGhyZWFkSWQsIGJvZHksIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KGAvdGhyZWFkcy8ke3RocmVhZElkfS9tZXNzYWdlc2AsIHtcbiAgICAgICAgICAgIGJvZHksXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgaGVhZGVyczogeyAnT3BlbkFJLUJldGEnOiAnYXNzaXN0YW50cz12MScsIC4uLm9wdGlvbnM/LmhlYWRlcnMgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHJpZXZlIGEgbWVzc2FnZS5cbiAgICAgKi9cbiAgICByZXRyaWV2ZSh0aHJlYWRJZCwgbWVzc2FnZUlkLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0KGAvdGhyZWFkcy8ke3RocmVhZElkfS9tZXNzYWdlcy8ke21lc3NhZ2VJZH1gLCB7XG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgaGVhZGVyczogeyAnT3BlbkFJLUJldGEnOiAnYXNzaXN0YW50cz12MScsIC4uLm9wdGlvbnM/LmhlYWRlcnMgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1vZGlmaWVzIGEgbWVzc2FnZS5cbiAgICAgKi9cbiAgICB1cGRhdGUodGhyZWFkSWQsIG1lc3NhZ2VJZCwgYm9keSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoYC90aHJlYWRzLyR7dGhyZWFkSWR9L21lc3NhZ2VzLyR7bWVzc2FnZUlkfWAsIHtcbiAgICAgICAgICAgIGJvZHksXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgaGVhZGVyczogeyAnT3BlbkFJLUJldGEnOiAnYXNzaXN0YW50cz12MScsIC4uLm9wdGlvbnM/LmhlYWRlcnMgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGxpc3QodGhyZWFkSWQsIHF1ZXJ5ID0ge30sIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKGlzUmVxdWVzdE9wdGlvbnMocXVlcnkpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5saXN0KHRocmVhZElkLCB7fSwgcXVlcnkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0QVBJTGlzdChgL3RocmVhZHMvJHt0aHJlYWRJZH0vbWVzc2FnZXNgLCBUaHJlYWRNZXNzYWdlc1BhZ2UsIHtcbiAgICAgICAgICAgIHF1ZXJ5LFxuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHsgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djEnLCAuLi5vcHRpb25zPy5oZWFkZXJzIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBUaHJlYWRNZXNzYWdlc1BhZ2UgZXh0ZW5kcyBDdXJzb3JQYWdlIHtcbn1cbihmdW5jdGlvbiAoTWVzc2FnZXMpIHtcbiAgICBNZXNzYWdlcy5UaHJlYWRNZXNzYWdlc1BhZ2UgPSBNZXNzYWdlc0FQSS5UaHJlYWRNZXNzYWdlc1BhZ2U7XG4gICAgTWVzc2FnZXMuRmlsZXMgPSBGaWxlc0FQSS5GaWxlcztcbiAgICBNZXNzYWdlcy5NZXNzYWdlRmlsZXNQYWdlID0gRmlsZXNBUEkuTWVzc2FnZUZpbGVzUGFnZTtcbn0pKE1lc3NhZ2VzIHx8IChNZXNzYWdlcyA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXNzYWdlcy5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiaXNSZXF1ZXN0T3B0aW9ucyIsIk1lc3NhZ2VzQVBJIiwiRmlsZXNBUEkiLCJDdXJzb3JQYWdlIiwiTWVzc2FnZXMiLCJjb25zdHJ1Y3RvciIsImFyZ3VtZW50cyIsImZpbGVzIiwiRmlsZXMiLCJfY2xpZW50IiwiY3JlYXRlIiwidGhyZWFkSWQiLCJib2R5Iiwib3B0aW9ucyIsInBvc3QiLCJoZWFkZXJzIiwicmV0cmlldmUiLCJtZXNzYWdlSWQiLCJnZXQiLCJ1cGRhdGUiLCJsaXN0IiwicXVlcnkiLCJnZXRBUElMaXN0IiwiVGhyZWFkTWVzc2FnZXNQYWdlIiwiTWVzc2FnZUZpbGVzUGFnZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openai/resources/beta/threads/messages/messages.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/openai/resources/beta/threads/runs/runs.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/openai/resources/beta/threads/runs/runs.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Runs: () => (/* binding */ Runs),\n/* harmony export */   RunsPage: () => (/* binding */ RunsPage)\n/* harmony export */ });\n/* harmony import */ var openai_resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/resource */ \"(ssr)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var openai_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! openai/core */ \"(ssr)/./node_modules/openai/core.mjs\");\n/* harmony import */ var openai_resources_beta_threads_runs_runs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! openai/resources/beta/threads/runs/runs */ \"(ssr)/./node_modules/openai/resources/beta/threads/runs/runs.mjs\");\n/* harmony import */ var openai_resources_beta_threads_runs_steps__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai/resources/beta/threads/runs/steps */ \"(ssr)/./node_modules/openai/resources/beta/threads/runs/steps.mjs\");\n/* harmony import */ var openai_pagination__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! openai/pagination */ \"(ssr)/./node_modules/openai/pagination.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\n\n\n\n\nclass Runs extends openai_resource__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    constructor(){\n        super(...arguments);\n        this.steps = new openai_resources_beta_threads_runs_steps__WEBPACK_IMPORTED_MODULE_1__.Steps(this._client);\n    }\n    /**\n     * Create a run.\n     */ create(threadId, body, options) {\n        return this._client.post(`/threads/${threadId}/runs`, {\n            body,\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v1\",\n                ...options?.headers\n            }\n        });\n    }\n    /**\n     * Retrieves a run.\n     */ retrieve(threadId, runId, options) {\n        return this._client.get(`/threads/${threadId}/runs/${runId}`, {\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v1\",\n                ...options?.headers\n            }\n        });\n    }\n    /**\n     * Modifies a run.\n     */ update(threadId, runId, body, options) {\n        return this._client.post(`/threads/${threadId}/runs/${runId}`, {\n            body,\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v1\",\n                ...options?.headers\n            }\n        });\n    }\n    list(threadId, query = {}, options) {\n        if ((0,openai_core__WEBPACK_IMPORTED_MODULE_2__.isRequestOptions)(query)) {\n            return this.list(threadId, {}, query);\n        }\n        return this._client.getAPIList(`/threads/${threadId}/runs`, RunsPage, {\n            query,\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v1\",\n                ...options?.headers\n            }\n        });\n    }\n    /**\n     * Cancels a run that is `in_progress`.\n     */ cancel(threadId, runId, options) {\n        return this._client.post(`/threads/${threadId}/runs/${runId}/cancel`, {\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v1\",\n                ...options?.headers\n            }\n        });\n    }\n    /**\n     * When a run has the `status: \"requires_action\"` and `required_action.type` is\n     * `submit_tool_outputs`, this endpoint can be used to submit the outputs from the\n     * tool calls once they're all completed. All outputs must be submitted in a single\n     * request.\n     */ submitToolOutputs(threadId, runId, body, options) {\n        return this._client.post(`/threads/${threadId}/runs/${runId}/submit_tool_outputs`, {\n            body,\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v1\",\n                ...options?.headers\n            }\n        });\n    }\n}\nclass RunsPage extends openai_pagination__WEBPACK_IMPORTED_MODULE_3__.CursorPage {\n}\n(function(Runs) {\n    Runs.RunsPage = openai_resources_beta_threads_runs_runs__WEBPACK_IMPORTED_MODULE_4__.RunsPage;\n    Runs.Steps = openai_resources_beta_threads_runs_steps__WEBPACK_IMPORTED_MODULE_1__.Steps;\n    Runs.RunStepsPage = openai_resources_beta_threads_runs_steps__WEBPACK_IMPORTED_MODULE_1__.RunStepsPage;\n})(Runs || (Runs = {})); //# sourceMappingURL=runs.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9iZXRhL3RocmVhZHMvcnVucy9ydW5zLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEscURBQXFEO0FBQ1A7QUFDQztBQUNvQjtBQUNFO0FBQ3RCO0FBQ3hDLE1BQU1LLGFBQWFMLHdEQUFXQTtJQUNqQ00sYUFBYztRQUNWLEtBQUssSUFBSUM7UUFDVCxJQUFJLENBQUNDLEtBQUssR0FBRyxJQUFJTCwyRUFBYyxDQUFDLElBQUksQ0FBQ08sT0FBTztJQUNoRDtJQUNBOztLQUVDLEdBQ0RDLE9BQU9DLFFBQVEsRUFBRUMsSUFBSSxFQUFFQyxPQUFPLEVBQUU7UUFDNUIsT0FBTyxJQUFJLENBQUNKLE9BQU8sQ0FBQ0ssSUFBSSxDQUFDLENBQUMsU0FBUyxFQUFFSCxTQUFTLEtBQUssQ0FBQyxFQUFFO1lBQ2xEQztZQUNBLEdBQUdDLE9BQU87WUFDVkUsU0FBUztnQkFBRSxlQUFlO2dCQUFpQixHQUFHRixTQUFTRSxPQUFPO1lBQUM7UUFDbkU7SUFDSjtJQUNBOztLQUVDLEdBQ0RDLFNBQVNMLFFBQVEsRUFBRU0sS0FBSyxFQUFFSixPQUFPLEVBQUU7UUFDL0IsT0FBTyxJQUFJLENBQUNKLE9BQU8sQ0FBQ1MsR0FBRyxDQUFDLENBQUMsU0FBUyxFQUFFUCxTQUFTLE1BQU0sRUFBRU0sTUFBTSxDQUFDLEVBQUU7WUFDMUQsR0FBR0osT0FBTztZQUNWRSxTQUFTO2dCQUFFLGVBQWU7Z0JBQWlCLEdBQUdGLFNBQVNFLE9BQU87WUFBQztRQUNuRTtJQUNKO0lBQ0E7O0tBRUMsR0FDREksT0FBT1IsUUFBUSxFQUFFTSxLQUFLLEVBQUVMLElBQUksRUFBRUMsT0FBTyxFQUFFO1FBQ25DLE9BQU8sSUFBSSxDQUFDSixPQUFPLENBQUNLLElBQUksQ0FBQyxDQUFDLFNBQVMsRUFBRUgsU0FBUyxNQUFNLEVBQUVNLE1BQU0sQ0FBQyxFQUFFO1lBQzNETDtZQUNBLEdBQUdDLE9BQU87WUFDVkUsU0FBUztnQkFBRSxlQUFlO2dCQUFpQixHQUFHRixTQUFTRSxPQUFPO1lBQUM7UUFDbkU7SUFDSjtJQUNBSyxLQUFLVCxRQUFRLEVBQUVVLFFBQVEsQ0FBQyxDQUFDLEVBQUVSLE9BQU8sRUFBRTtRQUNoQyxJQUFJYiw2REFBZ0JBLENBQUNxQixRQUFRO1lBQ3pCLE9BQU8sSUFBSSxDQUFDRCxJQUFJLENBQUNULFVBQVUsQ0FBQyxHQUFHVTtRQUNuQztRQUNBLE9BQU8sSUFBSSxDQUFDWixPQUFPLENBQUNhLFVBQVUsQ0FBQyxDQUFDLFNBQVMsRUFBRVgsU0FBUyxLQUFLLENBQUMsRUFBRVksVUFBVTtZQUNsRUY7WUFDQSxHQUFHUixPQUFPO1lBQ1ZFLFNBQVM7Z0JBQUUsZUFBZTtnQkFBaUIsR0FBR0YsU0FBU0UsT0FBTztZQUFDO1FBQ25FO0lBQ0o7SUFDQTs7S0FFQyxHQUNEUyxPQUFPYixRQUFRLEVBQUVNLEtBQUssRUFBRUosT0FBTyxFQUFFO1FBQzdCLE9BQU8sSUFBSSxDQUFDSixPQUFPLENBQUNLLElBQUksQ0FBQyxDQUFDLFNBQVMsRUFBRUgsU0FBUyxNQUFNLEVBQUVNLE1BQU0sT0FBTyxDQUFDLEVBQUU7WUFDbEUsR0FBR0osT0FBTztZQUNWRSxTQUFTO2dCQUFFLGVBQWU7Z0JBQWlCLEdBQUdGLFNBQVNFLE9BQU87WUFBQztRQUNuRTtJQUNKO0lBQ0E7Ozs7O0tBS0MsR0FDRFUsa0JBQWtCZCxRQUFRLEVBQUVNLEtBQUssRUFBRUwsSUFBSSxFQUFFQyxPQUFPLEVBQUU7UUFDOUMsT0FBTyxJQUFJLENBQUNKLE9BQU8sQ0FBQ0ssSUFBSSxDQUFDLENBQUMsU0FBUyxFQUFFSCxTQUFTLE1BQU0sRUFBRU0sTUFBTSxvQkFBb0IsQ0FBQyxFQUFFO1lBQy9FTDtZQUNBLEdBQUdDLE9BQU87WUFDVkUsU0FBUztnQkFBRSxlQUFlO2dCQUFpQixHQUFHRixTQUFTRSxPQUFPO1lBQUM7UUFDbkU7SUFDSjtBQUNKO0FBQ08sTUFBTVEsaUJBQWlCcEIseURBQVVBO0FBQ3hDO0FBQ0MsVUFBVUMsSUFBSTtJQUNYQSxLQUFLbUIsUUFBUSxHQUFHdEIsNkVBQWdCO0lBQ2hDRyxLQUFLSSxLQUFLLEdBQUdOLDJFQUFjO0lBQzNCRSxLQUFLc0IsWUFBWSxHQUFHeEIsa0ZBQXFCO0FBQzdDLEdBQUdFLFFBQVNBLENBQUFBLE9BQU8sQ0FBQyxLQUNwQixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1hcHAvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9iZXRhL3RocmVhZHMvcnVucy9ydW5zLm1qcz83OWVkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gJ29wZW5haS9yZXNvdXJjZSc7XG5pbXBvcnQgeyBpc1JlcXVlc3RPcHRpb25zIH0gZnJvbSAnb3BlbmFpL2NvcmUnO1xuaW1wb3J0ICogYXMgUnVuc0FQSSBmcm9tICdvcGVuYWkvcmVzb3VyY2VzL2JldGEvdGhyZWFkcy9ydW5zL3J1bnMnO1xuaW1wb3J0ICogYXMgU3RlcHNBUEkgZnJvbSAnb3BlbmFpL3Jlc291cmNlcy9iZXRhL3RocmVhZHMvcnVucy9zdGVwcyc7XG5pbXBvcnQgeyBDdXJzb3JQYWdlIH0gZnJvbSAnb3BlbmFpL3BhZ2luYXRpb24nO1xuZXhwb3J0IGNsYXNzIFJ1bnMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuc3RlcHMgPSBuZXcgU3RlcHNBUEkuU3RlcHModGhpcy5fY2xpZW50KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgcnVuLlxuICAgICAqL1xuICAgIGNyZWF0ZSh0aHJlYWRJZCwgYm9keSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoYC90aHJlYWRzLyR7dGhyZWFkSWR9L3J1bnNgLCB7XG4gICAgICAgICAgICBib2R5LFxuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHsgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djEnLCAuLi5vcHRpb25zPy5oZWFkZXJzIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgYSBydW4uXG4gICAgICovXG4gICAgcmV0cmlldmUodGhyZWFkSWQsIHJ1bklkLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0KGAvdGhyZWFkcy8ke3RocmVhZElkfS9ydW5zLyR7cnVuSWR9YCwge1xuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHsgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djEnLCAuLi5vcHRpb25zPy5oZWFkZXJzIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNb2RpZmllcyBhIHJ1bi5cbiAgICAgKi9cbiAgICB1cGRhdGUodGhyZWFkSWQsIHJ1bklkLCBib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdChgL3RocmVhZHMvJHt0aHJlYWRJZH0vcnVucy8ke3J1bklkfWAsIHtcbiAgICAgICAgICAgIGJvZHksXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgaGVhZGVyczogeyAnT3BlbkFJLUJldGEnOiAnYXNzaXN0YW50cz12MScsIC4uLm9wdGlvbnM/LmhlYWRlcnMgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGxpc3QodGhyZWFkSWQsIHF1ZXJ5ID0ge30sIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKGlzUmVxdWVzdE9wdGlvbnMocXVlcnkpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5saXN0KHRocmVhZElkLCB7fSwgcXVlcnkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0QVBJTGlzdChgL3RocmVhZHMvJHt0aHJlYWRJZH0vcnVuc2AsIFJ1bnNQYWdlLCB7XG4gICAgICAgICAgICBxdWVyeSxcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiB7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYxJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FuY2VscyBhIHJ1biB0aGF0IGlzIGBpbl9wcm9ncmVzc2AuXG4gICAgICovXG4gICAgY2FuY2VsKHRocmVhZElkLCBydW5JZCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoYC90aHJlYWRzLyR7dGhyZWFkSWR9L3J1bnMvJHtydW5JZH0vY2FuY2VsYCwge1xuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHsgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djEnLCAuLi5vcHRpb25zPy5oZWFkZXJzIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXaGVuIGEgcnVuIGhhcyB0aGUgYHN0YXR1czogXCJyZXF1aXJlc19hY3Rpb25cImAgYW5kIGByZXF1aXJlZF9hY3Rpb24udHlwZWAgaXNcbiAgICAgKiBgc3VibWl0X3Rvb2xfb3V0cHV0c2AsIHRoaXMgZW5kcG9pbnQgY2FuIGJlIHVzZWQgdG8gc3VibWl0IHRoZSBvdXRwdXRzIGZyb20gdGhlXG4gICAgICogdG9vbCBjYWxscyBvbmNlIHRoZXkncmUgYWxsIGNvbXBsZXRlZC4gQWxsIG91dHB1dHMgbXVzdCBiZSBzdWJtaXR0ZWQgaW4gYSBzaW5nbGVcbiAgICAgKiByZXF1ZXN0LlxuICAgICAqL1xuICAgIHN1Ym1pdFRvb2xPdXRwdXRzKHRocmVhZElkLCBydW5JZCwgYm9keSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoYC90aHJlYWRzLyR7dGhyZWFkSWR9L3J1bnMvJHtydW5JZH0vc3VibWl0X3Rvb2xfb3V0cHV0c2AsIHtcbiAgICAgICAgICAgIGJvZHksXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgaGVhZGVyczogeyAnT3BlbkFJLUJldGEnOiAnYXNzaXN0YW50cz12MScsIC4uLm9wdGlvbnM/LmhlYWRlcnMgfSxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFJ1bnNQYWdlIGV4dGVuZHMgQ3Vyc29yUGFnZSB7XG59XG4oZnVuY3Rpb24gKFJ1bnMpIHtcbiAgICBSdW5zLlJ1bnNQYWdlID0gUnVuc0FQSS5SdW5zUGFnZTtcbiAgICBSdW5zLlN0ZXBzID0gU3RlcHNBUEkuU3RlcHM7XG4gICAgUnVucy5SdW5TdGVwc1BhZ2UgPSBTdGVwc0FQSS5SdW5TdGVwc1BhZ2U7XG59KShSdW5zIHx8IChSdW5zID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJ1bnMubWpzLm1hcCJdLCJuYW1lcyI6WyJBUElSZXNvdXJjZSIsImlzUmVxdWVzdE9wdGlvbnMiLCJSdW5zQVBJIiwiU3RlcHNBUEkiLCJDdXJzb3JQYWdlIiwiUnVucyIsImNvbnN0cnVjdG9yIiwiYXJndW1lbnRzIiwic3RlcHMiLCJTdGVwcyIsIl9jbGllbnQiLCJjcmVhdGUiLCJ0aHJlYWRJZCIsImJvZHkiLCJvcHRpb25zIiwicG9zdCIsImhlYWRlcnMiLCJyZXRyaWV2ZSIsInJ1bklkIiwiZ2V0IiwidXBkYXRlIiwibGlzdCIsInF1ZXJ5IiwiZ2V0QVBJTGlzdCIsIlJ1bnNQYWdlIiwiY2FuY2VsIiwic3VibWl0VG9vbE91dHB1dHMiLCJSdW5TdGVwc1BhZ2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openai/resources/beta/threads/runs/runs.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/openai/resources/beta/threads/runs/steps.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/openai/resources/beta/threads/runs/steps.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RunStepsPage: () => (/* binding */ RunStepsPage),\n/* harmony export */   Steps: () => (/* binding */ Steps)\n/* harmony export */ });\n/* harmony import */ var openai_resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/resource */ \"(ssr)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var openai_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai/core */ \"(ssr)/./node_modules/openai/core.mjs\");\n/* harmony import */ var openai_resources_beta_threads_runs_steps__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! openai/resources/beta/threads/runs/steps */ \"(ssr)/./node_modules/openai/resources/beta/threads/runs/steps.mjs\");\n/* harmony import */ var openai_pagination__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! openai/pagination */ \"(ssr)/./node_modules/openai/pagination.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\n\n\n\nclass Steps extends openai_resource__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Retrieves a run step.\n     */ retrieve(threadId, runId, stepId, options) {\n        return this._client.get(`/threads/${threadId}/runs/${runId}/steps/${stepId}`, {\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v1\",\n                ...options?.headers\n            }\n        });\n    }\n    list(threadId, runId, query = {}, options) {\n        if ((0,openai_core__WEBPACK_IMPORTED_MODULE_1__.isRequestOptions)(query)) {\n            return this.list(threadId, runId, {}, query);\n        }\n        return this._client.getAPIList(`/threads/${threadId}/runs/${runId}/steps`, RunStepsPage, {\n            query,\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v1\",\n                ...options?.headers\n            }\n        });\n    }\n}\nclass RunStepsPage extends openai_pagination__WEBPACK_IMPORTED_MODULE_2__.CursorPage {\n}\n(function(Steps) {\n    Steps.RunStepsPage = openai_resources_beta_threads_runs_steps__WEBPACK_IMPORTED_MODULE_3__.RunStepsPage;\n})(Steps || (Steps = {})); //# sourceMappingURL=steps.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9iZXRhL3RocmVhZHMvcnVucy9zdGVwcy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEscURBQXFEO0FBQ1A7QUFDQztBQUNzQjtBQUN0QjtBQUN4QyxNQUFNSSxjQUFjSix3REFBV0E7SUFDbEM7O0tBRUMsR0FDREssU0FBU0MsUUFBUSxFQUFFQyxLQUFLLEVBQUVDLE1BQU0sRUFBRUMsT0FBTyxFQUFFO1FBQ3ZDLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNDLEdBQUcsQ0FBQyxDQUFDLFNBQVMsRUFBRUwsU0FBUyxNQUFNLEVBQUVDLE1BQU0sT0FBTyxFQUFFQyxPQUFPLENBQUMsRUFBRTtZQUMxRSxHQUFHQyxPQUFPO1lBQ1ZHLFNBQVM7Z0JBQUUsZUFBZTtnQkFBaUIsR0FBR0gsU0FBU0csT0FBTztZQUFDO1FBQ25FO0lBQ0o7SUFDQUMsS0FBS1AsUUFBUSxFQUFFQyxLQUFLLEVBQUVPLFFBQVEsQ0FBQyxDQUFDLEVBQUVMLE9BQU8sRUFBRTtRQUN2QyxJQUFJUiw2REFBZ0JBLENBQUNhLFFBQVE7WUFDekIsT0FBTyxJQUFJLENBQUNELElBQUksQ0FBQ1AsVUFBVUMsT0FBTyxDQUFDLEdBQUdPO1FBQzFDO1FBQ0EsT0FBTyxJQUFJLENBQUNKLE9BQU8sQ0FBQ0ssVUFBVSxDQUFDLENBQUMsU0FBUyxFQUFFVCxTQUFTLE1BQU0sRUFBRUMsTUFBTSxNQUFNLENBQUMsRUFBRVMsY0FBYztZQUNyRkY7WUFDQSxHQUFHTCxPQUFPO1lBQ1ZHLFNBQVM7Z0JBQUUsZUFBZTtnQkFBaUIsR0FBR0gsU0FBU0csT0FBTztZQUFDO1FBQ25FO0lBQ0o7QUFDSjtBQUNPLE1BQU1JLHFCQUFxQmIseURBQVVBO0FBQzVDO0FBQ0MsVUFBVUMsS0FBSztJQUNaQSxNQUFNWSxZQUFZLEdBQUdkLGtGQUFxQjtBQUM5QyxHQUFHRSxTQUFVQSxDQUFBQSxRQUFRLENBQUMsS0FDdEIsa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktYXBwLy4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZXMvYmV0YS90aHJlYWRzL3J1bnMvc3RlcHMubWpzPzQ3ZTMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSAnb3BlbmFpL3Jlc291cmNlJztcbmltcG9ydCB7IGlzUmVxdWVzdE9wdGlvbnMgfSBmcm9tICdvcGVuYWkvY29yZSc7XG5pbXBvcnQgKiBhcyBTdGVwc0FQSSBmcm9tICdvcGVuYWkvcmVzb3VyY2VzL2JldGEvdGhyZWFkcy9ydW5zL3N0ZXBzJztcbmltcG9ydCB7IEN1cnNvclBhZ2UgfSBmcm9tICdvcGVuYWkvcGFnaW5hdGlvbic7XG5leHBvcnQgY2xhc3MgU3RlcHMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIGEgcnVuIHN0ZXAuXG4gICAgICovXG4gICAgcmV0cmlldmUodGhyZWFkSWQsIHJ1bklkLCBzdGVwSWQsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXQoYC90aHJlYWRzLyR7dGhyZWFkSWR9L3J1bnMvJHtydW5JZH0vc3RlcHMvJHtzdGVwSWR9YCwge1xuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHsgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djEnLCAuLi5vcHRpb25zPy5oZWFkZXJzIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBsaXN0KHRocmVhZElkLCBydW5JZCwgcXVlcnkgPSB7fSwgb3B0aW9ucykge1xuICAgICAgICBpZiAoaXNSZXF1ZXN0T3B0aW9ucyhxdWVyeSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxpc3QodGhyZWFkSWQsIHJ1bklkLCB7fSwgcXVlcnkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0QVBJTGlzdChgL3RocmVhZHMvJHt0aHJlYWRJZH0vcnVucy8ke3J1bklkfS9zdGVwc2AsIFJ1blN0ZXBzUGFnZSwge1xuICAgICAgICAgICAgcXVlcnksXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgaGVhZGVyczogeyAnT3BlbkFJLUJldGEnOiAnYXNzaXN0YW50cz12MScsIC4uLm9wdGlvbnM/LmhlYWRlcnMgfSxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFJ1blN0ZXBzUGFnZSBleHRlbmRzIEN1cnNvclBhZ2Uge1xufVxuKGZ1bmN0aW9uIChTdGVwcykge1xuICAgIFN0ZXBzLlJ1blN0ZXBzUGFnZSA9IFN0ZXBzQVBJLlJ1blN0ZXBzUGFnZTtcbn0pKFN0ZXBzIHx8IChTdGVwcyA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdGVwcy5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiaXNSZXF1ZXN0T3B0aW9ucyIsIlN0ZXBzQVBJIiwiQ3Vyc29yUGFnZSIsIlN0ZXBzIiwicmV0cmlldmUiLCJ0aHJlYWRJZCIsInJ1bklkIiwic3RlcElkIiwib3B0aW9ucyIsIl9jbGllbnQiLCJnZXQiLCJoZWFkZXJzIiwibGlzdCIsInF1ZXJ5IiwiZ2V0QVBJTGlzdCIsIlJ1blN0ZXBzUGFnZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openai/resources/beta/threads/runs/steps.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/openai/resources/beta/threads/threads.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/openai/resources/beta/threads/threads.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Threads: () => (/* binding */ Threads)\n/* harmony export */ });\n/* harmony import */ var openai_resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/resource */ \"(ssr)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var openai_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! openai/core */ \"(ssr)/./node_modules/openai/core.mjs\");\n/* harmony import */ var openai_resources_beta_threads_messages_messages__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! openai/resources/beta/threads/messages/messages */ \"(ssr)/./node_modules/openai/resources/beta/threads/messages/messages.mjs\");\n/* harmony import */ var openai_resources_beta_threads_runs_runs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai/resources/beta/threads/runs/runs */ \"(ssr)/./node_modules/openai/resources/beta/threads/runs/runs.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\n\n\n\nclass Threads extends openai_resource__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    constructor(){\n        super(...arguments);\n        this.runs = new openai_resources_beta_threads_runs_runs__WEBPACK_IMPORTED_MODULE_1__.Runs(this._client);\n        this.messages = new openai_resources_beta_threads_messages_messages__WEBPACK_IMPORTED_MODULE_2__.Messages(this._client);\n    }\n    create(body = {}, options) {\n        if ((0,openai_core__WEBPACK_IMPORTED_MODULE_3__.isRequestOptions)(body)) {\n            return this.create({}, body);\n        }\n        return this._client.post(\"/threads\", {\n            body,\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v1\",\n                ...options?.headers\n            }\n        });\n    }\n    /**\n     * Retrieves a thread.\n     */ retrieve(threadId, options) {\n        return this._client.get(`/threads/${threadId}`, {\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v1\",\n                ...options?.headers\n            }\n        });\n    }\n    /**\n     * Modifies a thread.\n     */ update(threadId, body, options) {\n        return this._client.post(`/threads/${threadId}`, {\n            body,\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v1\",\n                ...options?.headers\n            }\n        });\n    }\n    /**\n     * Delete a thread.\n     */ del(threadId, options) {\n        return this._client.delete(`/threads/${threadId}`, {\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v1\",\n                ...options?.headers\n            }\n        });\n    }\n    /**\n     * Create a thread and run it in one request.\n     */ createAndRun(body, options) {\n        return this._client.post(\"/threads/runs\", {\n            body,\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v1\",\n                ...options?.headers\n            }\n        });\n    }\n}\n(function(Threads) {\n    Threads.Runs = openai_resources_beta_threads_runs_runs__WEBPACK_IMPORTED_MODULE_1__.Runs;\n    Threads.RunsPage = openai_resources_beta_threads_runs_runs__WEBPACK_IMPORTED_MODULE_1__.RunsPage;\n    Threads.Messages = openai_resources_beta_threads_messages_messages__WEBPACK_IMPORTED_MODULE_2__.Messages;\n    Threads.ThreadMessagesPage = openai_resources_beta_threads_messages_messages__WEBPACK_IMPORTED_MODULE_2__.ThreadMessagesPage;\n})(Threads || (Threads = {})); //# sourceMappingURL=threads.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9iZXRhL3RocmVhZHMvdGhyZWFkcy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxxREFBcUQ7QUFDUDtBQUNDO0FBQ2dDO0FBQ1o7QUFDNUQsTUFBTUksZ0JBQWdCSix3REFBV0E7SUFDcENLLGFBQWM7UUFDVixLQUFLLElBQUlDO1FBQ1QsSUFBSSxDQUFDQyxJQUFJLEdBQUcsSUFBSUoseUVBQVksQ0FBQyxJQUFJLENBQUNNLE9BQU87UUFDekMsSUFBSSxDQUFDQyxRQUFRLEdBQUcsSUFBSVIscUZBQW9CLENBQUMsSUFBSSxDQUFDTyxPQUFPO0lBQ3pEO0lBQ0FHLE9BQU9DLE9BQU8sQ0FBQyxDQUFDLEVBQUVDLE9BQU8sRUFBRTtRQUN2QixJQUFJYiw2REFBZ0JBLENBQUNZLE9BQU87WUFDeEIsT0FBTyxJQUFJLENBQUNELE1BQU0sQ0FBQyxDQUFDLEdBQUdDO1FBQzNCO1FBQ0EsT0FBTyxJQUFJLENBQUNKLE9BQU8sQ0FBQ00sSUFBSSxDQUFDLFlBQVk7WUFDakNGO1lBQ0EsR0FBR0MsT0FBTztZQUNWRSxTQUFTO2dCQUFFLGVBQWU7Z0JBQWlCLEdBQUdGLFNBQVNFLE9BQU87WUFBQztRQUNuRTtJQUNKO0lBQ0E7O0tBRUMsR0FDREMsU0FBU0MsUUFBUSxFQUFFSixPQUFPLEVBQUU7UUFDeEIsT0FBTyxJQUFJLENBQUNMLE9BQU8sQ0FBQ1UsR0FBRyxDQUFDLENBQUMsU0FBUyxFQUFFRCxTQUFTLENBQUMsRUFBRTtZQUM1QyxHQUFHSixPQUFPO1lBQ1ZFLFNBQVM7Z0JBQUUsZUFBZTtnQkFBaUIsR0FBR0YsU0FBU0UsT0FBTztZQUFDO1FBQ25FO0lBQ0o7SUFDQTs7S0FFQyxHQUNESSxPQUFPRixRQUFRLEVBQUVMLElBQUksRUFBRUMsT0FBTyxFQUFFO1FBQzVCLE9BQU8sSUFBSSxDQUFDTCxPQUFPLENBQUNNLElBQUksQ0FBQyxDQUFDLFNBQVMsRUFBRUcsU0FBUyxDQUFDLEVBQUU7WUFDN0NMO1lBQ0EsR0FBR0MsT0FBTztZQUNWRSxTQUFTO2dCQUFFLGVBQWU7Z0JBQWlCLEdBQUdGLFNBQVNFLE9BQU87WUFBQztRQUNuRTtJQUNKO0lBQ0E7O0tBRUMsR0FDREssSUFBSUgsUUFBUSxFQUFFSixPQUFPLEVBQUU7UUFDbkIsT0FBTyxJQUFJLENBQUNMLE9BQU8sQ0FBQ2EsTUFBTSxDQUFDLENBQUMsU0FBUyxFQUFFSixTQUFTLENBQUMsRUFBRTtZQUMvQyxHQUFHSixPQUFPO1lBQ1ZFLFNBQVM7Z0JBQUUsZUFBZTtnQkFBaUIsR0FBR0YsU0FBU0UsT0FBTztZQUFDO1FBQ25FO0lBQ0o7SUFDQTs7S0FFQyxHQUNETyxhQUFhVixJQUFJLEVBQUVDLE9BQU8sRUFBRTtRQUN4QixPQUFPLElBQUksQ0FBQ0wsT0FBTyxDQUFDTSxJQUFJLENBQUMsaUJBQWlCO1lBQ3RDRjtZQUNBLEdBQUdDLE9BQU87WUFDVkUsU0FBUztnQkFBRSxlQUFlO2dCQUFpQixHQUFHRixTQUFTRSxPQUFPO1lBQUM7UUFDbkU7SUFDSjtBQUNKO0FBQ0MsVUFBVVosT0FBTztJQUNkQSxRQUFRSSxJQUFJLEdBQUdMLHlFQUFZO0lBQzNCQyxRQUFRb0IsUUFBUSxHQUFHckIsNkVBQWdCO0lBQ25DQyxRQUFRTyxRQUFRLEdBQUdULHFGQUFvQjtJQUN2Q0UsUUFBUXFCLGtCQUFrQixHQUFHdkIsK0ZBQThCO0FBQy9ELEdBQUdFLFdBQVlBLENBQUFBLFVBQVUsQ0FBQyxLQUMxQixvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1hcHAvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9iZXRhL3RocmVhZHMvdGhyZWFkcy5tanM/Njc3MSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tICdvcGVuYWkvcmVzb3VyY2UnO1xuaW1wb3J0IHsgaXNSZXF1ZXN0T3B0aW9ucyB9IGZyb20gJ29wZW5haS9jb3JlJztcbmltcG9ydCAqIGFzIE1lc3NhZ2VzQVBJIGZyb20gJ29wZW5haS9yZXNvdXJjZXMvYmV0YS90aHJlYWRzL21lc3NhZ2VzL21lc3NhZ2VzJztcbmltcG9ydCAqIGFzIFJ1bnNBUEkgZnJvbSAnb3BlbmFpL3Jlc291cmNlcy9iZXRhL3RocmVhZHMvcnVucy9ydW5zJztcbmV4cG9ydCBjbGFzcyBUaHJlYWRzIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLnJ1bnMgPSBuZXcgUnVuc0FQSS5SdW5zKHRoaXMuX2NsaWVudCk7XG4gICAgICAgIHRoaXMubWVzc2FnZXMgPSBuZXcgTWVzc2FnZXNBUEkuTWVzc2FnZXModGhpcy5fY2xpZW50KTtcbiAgICB9XG4gICAgY3JlYXRlKGJvZHkgPSB7fSwgb3B0aW9ucykge1xuICAgICAgICBpZiAoaXNSZXF1ZXN0T3B0aW9ucyhib2R5KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlKHt9LCBib2R5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoJy90aHJlYWRzJywge1xuICAgICAgICAgICAgYm9keSxcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiB7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYxJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIGEgdGhyZWFkLlxuICAgICAqL1xuICAgIHJldHJpZXZlKHRocmVhZElkLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0KGAvdGhyZWFkcy8ke3RocmVhZElkfWAsIHtcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiB7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYxJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTW9kaWZpZXMgYSB0aHJlYWQuXG4gICAgICovXG4gICAgdXBkYXRlKHRocmVhZElkLCBib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdChgL3RocmVhZHMvJHt0aHJlYWRJZH1gLCB7XG4gICAgICAgICAgICBib2R5LFxuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHsgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djEnLCAuLi5vcHRpb25zPy5oZWFkZXJzIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZWxldGUgYSB0aHJlYWQuXG4gICAgICovXG4gICAgZGVsKHRocmVhZElkLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZGVsZXRlKGAvdGhyZWFkcy8ke3RocmVhZElkfWAsIHtcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiB7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYxJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgdGhyZWFkIGFuZCBydW4gaXQgaW4gb25lIHJlcXVlc3QuXG4gICAgICovXG4gICAgY3JlYXRlQW5kUnVuKGJvZHksIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KCcvdGhyZWFkcy9ydW5zJywge1xuICAgICAgICAgICAgYm9keSxcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiB7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYxJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9LFxuICAgICAgICB9KTtcbiAgICB9XG59XG4oZnVuY3Rpb24gKFRocmVhZHMpIHtcbiAgICBUaHJlYWRzLlJ1bnMgPSBSdW5zQVBJLlJ1bnM7XG4gICAgVGhyZWFkcy5SdW5zUGFnZSA9IFJ1bnNBUEkuUnVuc1BhZ2U7XG4gICAgVGhyZWFkcy5NZXNzYWdlcyA9IE1lc3NhZ2VzQVBJLk1lc3NhZ2VzO1xuICAgIFRocmVhZHMuVGhyZWFkTWVzc2FnZXNQYWdlID0gTWVzc2FnZXNBUEkuVGhyZWFkTWVzc2FnZXNQYWdlO1xufSkoVGhyZWFkcyB8fCAoVGhyZWFkcyA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aHJlYWRzLm1qcy5tYXAiXSwibmFtZXMiOlsiQVBJUmVzb3VyY2UiLCJpc1JlcXVlc3RPcHRpb25zIiwiTWVzc2FnZXNBUEkiLCJSdW5zQVBJIiwiVGhyZWFkcyIsImNvbnN0cnVjdG9yIiwiYXJndW1lbnRzIiwicnVucyIsIlJ1bnMiLCJfY2xpZW50IiwibWVzc2FnZXMiLCJNZXNzYWdlcyIsImNyZWF0ZSIsImJvZHkiLCJvcHRpb25zIiwicG9zdCIsImhlYWRlcnMiLCJyZXRyaWV2ZSIsInRocmVhZElkIiwiZ2V0IiwidXBkYXRlIiwiZGVsIiwiZGVsZXRlIiwiY3JlYXRlQW5kUnVuIiwiUnVuc1BhZ2UiLCJUaHJlYWRNZXNzYWdlc1BhZ2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openai/resources/beta/threads/threads.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/openai/resources/chat/chat.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/openai/resources/chat/chat.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Chat: () => (/* binding */ Chat)\n/* harmony export */ });\n/* harmony import */ var openai_resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/resource */ \"(ssr)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var openai_resources_chat_completions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai/resources/chat/completions */ \"(ssr)/./node_modules/openai/resources/chat/completions.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\n\nclass Chat extends openai_resource__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    constructor(){\n        super(...arguments);\n        this.completions = new openai_resources_chat_completions__WEBPACK_IMPORTED_MODULE_1__.Completions(this._client);\n    }\n}\n(function(Chat) {\n    Chat.Completions = openai_resources_chat_completions__WEBPACK_IMPORTED_MODULE_1__.Completions;\n})(Chat || (Chat = {})); //# sourceMappingURL=chat.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9jaGF0L2NoYXQubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLHFEQUFxRDtBQUNQO0FBQ3NCO0FBQzdELE1BQU1FLGFBQWFGLHdEQUFXQTtJQUNqQ0csYUFBYztRQUNWLEtBQUssSUFBSUM7UUFDVCxJQUFJLENBQUNDLFdBQVcsR0FBRyxJQUFJSiwwRUFBMEIsQ0FBQyxJQUFJLENBQUNNLE9BQU87SUFDbEU7QUFDSjtBQUNDLFVBQVVMLElBQUk7SUFDWEEsS0FBS0ksV0FBVyxHQUFHTCwwRUFBMEI7QUFDakQsR0FBR0MsUUFBU0EsQ0FBQUEsT0FBTyxDQUFDLEtBQ3BCLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWFwcC8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2NoYXQvY2hhdC5tanM/OTBjMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tICdvcGVuYWkvcmVzb3VyY2UnO1xuaW1wb3J0ICogYXMgQ29tcGxldGlvbnNBUEkgZnJvbSAnb3BlbmFpL3Jlc291cmNlcy9jaGF0L2NvbXBsZXRpb25zJztcbmV4cG9ydCBjbGFzcyBDaGF0IGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmNvbXBsZXRpb25zID0gbmV3IENvbXBsZXRpb25zQVBJLkNvbXBsZXRpb25zKHRoaXMuX2NsaWVudCk7XG4gICAgfVxufVxuKGZ1bmN0aW9uIChDaGF0KSB7XG4gICAgQ2hhdC5Db21wbGV0aW9ucyA9IENvbXBsZXRpb25zQVBJLkNvbXBsZXRpb25zO1xufSkoQ2hhdCB8fCAoQ2hhdCA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaGF0Lm1qcy5tYXAiXSwibmFtZXMiOlsiQVBJUmVzb3VyY2UiLCJDb21wbGV0aW9uc0FQSSIsIkNoYXQiLCJjb25zdHJ1Y3RvciIsImFyZ3VtZW50cyIsImNvbXBsZXRpb25zIiwiQ29tcGxldGlvbnMiLCJfY2xpZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openai/resources/chat/chat.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/openai/resources/chat/completions.mjs":
/*!************************************************************!*\
  !*** ./node_modules/openai/resources/chat/completions.mjs ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Completions: () => (/* binding */ Completions)\n/* harmony export */ });\n/* harmony import */ var openai_resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/resource */ \"(ssr)/./node_modules/openai/resource.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\nclass Completions extends openai_resource__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    create(body, options) {\n        return this._client.post(\"/chat/completions\", {\n            body,\n            ...options,\n            stream: body.stream ?? false\n        });\n    }\n}\n(function(Completions) {})(Completions || (Completions = {})); //# sourceMappingURL=completions.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9jaGF0L2NvbXBsZXRpb25zLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLHFEQUFxRDtBQUNQO0FBQ3ZDLE1BQU1DLG9CQUFvQkQsd0RBQVdBO0lBQ3hDRSxPQUFPQyxJQUFJLEVBQUVDLE9BQU8sRUFBRTtRQUNsQixPQUFPLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxJQUFJLENBQUMscUJBQXFCO1lBQUVIO1lBQU0sR0FBR0MsT0FBTztZQUFFRyxRQUFRSixLQUFLSSxNQUFNLElBQUk7UUFBTTtJQUNuRztBQUNKO0FBQ0MsVUFBVU4sV0FBVyxHQUN0QixHQUFHQSxlQUFnQkEsQ0FBQUEsY0FBYyxDQUFDLEtBQ2xDLHdDQUF3QyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWFwcC8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2NoYXQvY29tcGxldGlvbnMubWpzP2RmM2MiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSAnb3BlbmFpL3Jlc291cmNlJztcbmV4cG9ydCBjbGFzcyBDb21wbGV0aW9ucyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgICBjcmVhdGUoYm9keSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoJy9jaGF0L2NvbXBsZXRpb25zJywgeyBib2R5LCAuLi5vcHRpb25zLCBzdHJlYW06IGJvZHkuc3RyZWFtID8/IGZhbHNlIH0pO1xuICAgIH1cbn1cbihmdW5jdGlvbiAoQ29tcGxldGlvbnMpIHtcbn0pKENvbXBsZXRpb25zIHx8IChDb21wbGV0aW9ucyA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21wbGV0aW9ucy5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiQ29tcGxldGlvbnMiLCJjcmVhdGUiLCJib2R5Iiwib3B0aW9ucyIsIl9jbGllbnQiLCJwb3N0Iiwic3RyZWFtIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openai/resources/chat/completions.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/openai/resources/completions.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/openai/resources/completions.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Completions: () => (/* binding */ Completions)\n/* harmony export */ });\n/* harmony import */ var openai_resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/resource */ \"(ssr)/./node_modules/openai/resource.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\nclass Completions extends openai_resource__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    create(body, options) {\n        return this._client.post(\"/completions\", {\n            body,\n            ...options,\n            stream: body.stream ?? false\n        });\n    }\n}\n(function(Completions) {})(Completions || (Completions = {})); //# sourceMappingURL=completions.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9jb21wbGV0aW9ucy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxxREFBcUQ7QUFDUDtBQUN2QyxNQUFNQyxvQkFBb0JELHdEQUFXQTtJQUN4Q0UsT0FBT0MsSUFBSSxFQUFFQyxPQUFPLEVBQUU7UUFDbEIsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDLGdCQUFnQjtZQUFFSDtZQUFNLEdBQUdDLE9BQU87WUFBRUcsUUFBUUosS0FBS0ksTUFBTSxJQUFJO1FBQU07SUFDOUY7QUFDSjtBQUNDLFVBQVVOLFdBQVcsR0FDdEIsR0FBR0EsZUFBZ0JBLENBQUFBLGNBQWMsQ0FBQyxLQUNsQyx3Q0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1hcHAvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9jb21wbGV0aW9ucy5tanM/YTQ4MSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tICdvcGVuYWkvcmVzb3VyY2UnO1xuZXhwb3J0IGNsYXNzIENvbXBsZXRpb25zIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAgIGNyZWF0ZShib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdCgnL2NvbXBsZXRpb25zJywgeyBib2R5LCAuLi5vcHRpb25zLCBzdHJlYW06IGJvZHkuc3RyZWFtID8/IGZhbHNlIH0pO1xuICAgIH1cbn1cbihmdW5jdGlvbiAoQ29tcGxldGlvbnMpIHtcbn0pKENvbXBsZXRpb25zIHx8IChDb21wbGV0aW9ucyA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21wbGV0aW9ucy5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiQ29tcGxldGlvbnMiLCJjcmVhdGUiLCJib2R5Iiwib3B0aW9ucyIsIl9jbGllbnQiLCJwb3N0Iiwic3RyZWFtIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openai/resources/completions.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/openai/resources/embeddings.mjs":
/*!******************************************************!*\
  !*** ./node_modules/openai/resources/embeddings.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Embeddings: () => (/* binding */ Embeddings)\n/* harmony export */ });\n/* harmony import */ var openai_resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/resource */ \"(ssr)/./node_modules/openai/resource.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\nclass Embeddings extends openai_resource__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Creates an embedding vector representing the input text.\n     */ create(body, options) {\n        return this._client.post(\"/embeddings\", {\n            body,\n            ...options\n        });\n    }\n}\n(function(Embeddings) {})(Embeddings || (Embeddings = {})); //# sourceMappingURL=embeddings.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9lbWJlZGRpbmdzLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLHFEQUFxRDtBQUNQO0FBQ3ZDLE1BQU1DLG1CQUFtQkQsd0RBQVdBO0lBQ3ZDOztLQUVDLEdBQ0RFLE9BQU9DLElBQUksRUFBRUMsT0FBTyxFQUFFO1FBQ2xCLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNDLElBQUksQ0FBQyxlQUFlO1lBQUVIO1lBQU0sR0FBR0MsT0FBTztRQUFDO0lBQy9EO0FBQ0o7QUFDQyxVQUFVSCxVQUFVLEdBQ3JCLEdBQUdBLGNBQWVBLENBQUFBLGFBQWEsQ0FBQyxLQUNoQyx1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1hcHAvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9lbWJlZGRpbmdzLm1qcz84NzkxIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gJ29wZW5haS9yZXNvdXJjZSc7XG5leHBvcnQgY2xhc3MgRW1iZWRkaW5ncyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGVtYmVkZGluZyB2ZWN0b3IgcmVwcmVzZW50aW5nIHRoZSBpbnB1dCB0ZXh0LlxuICAgICAqL1xuICAgIGNyZWF0ZShib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdCgnL2VtYmVkZGluZ3MnLCB7IGJvZHksIC4uLm9wdGlvbnMgfSk7XG4gICAgfVxufVxuKGZ1bmN0aW9uIChFbWJlZGRpbmdzKSB7XG59KShFbWJlZGRpbmdzIHx8IChFbWJlZGRpbmdzID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVtYmVkZGluZ3MubWpzLm1hcCJdLCJuYW1lcyI6WyJBUElSZXNvdXJjZSIsIkVtYmVkZGluZ3MiLCJjcmVhdGUiLCJib2R5Iiwib3B0aW9ucyIsIl9jbGllbnQiLCJwb3N0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openai/resources/embeddings.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/openai/resources/files.mjs":
/*!*************************************************!*\
  !*** ./node_modules/openai/resources/files.mjs ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FileObjectsPage: () => (/* binding */ FileObjectsPage),\n/* harmony export */   Files: () => (/* binding */ Files)\n/* harmony export */ });\n/* harmony import */ var openai_resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/resource */ \"(ssr)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var openai_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! openai/core */ \"(ssr)/./node_modules/openai/core.mjs\");\n/* harmony import */ var openai_error__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! openai/error */ \"(ssr)/./node_modules/openai/error.mjs\");\n/* harmony import */ var openai_resources_files__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! openai/resources/files */ \"(ssr)/./node_modules/openai/resources/files.mjs\");\n/* harmony import */ var openai_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai/core */ \"(ssr)/./node_modules/openai/uploads.mjs\");\n/* harmony import */ var openai_pagination__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! openai/pagination */ \"(ssr)/./node_modules/openai/pagination.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\n\n\n\n\n\n\nclass Files extends openai_resource__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Upload a file that can be used across various endpoints. The size of all the\n     * files uploaded by one organization can be up to 100 GB.\n     *\n     * The size of individual files can be a maximum of 512 MB or 2 million tokens for\n     * Assistants. See the\n     * [Assistants Tools guide](https://platform.openai.com/docs/assistants/tools) to\n     * learn more about the types of files supported. The Fine-tuning API only supports\n     * `.jsonl` files.\n     *\n     * Please [contact us](https://help.openai.com/) if you need to increase these\n     * storage limits.\n     */ create(body, options) {\n        return this._client.post(\"/files\", (0,openai_core__WEBPACK_IMPORTED_MODULE_1__.multipartFormRequestOptions)({\n            body,\n            ...options\n        }));\n    }\n    /**\n     * Returns information about a specific file.\n     */ retrieve(fileId, options) {\n        return this._client.get(`/files/${fileId}`, options);\n    }\n    list(query = {}, options) {\n        if ((0,openai_core__WEBPACK_IMPORTED_MODULE_2__.isRequestOptions)(query)) {\n            return this.list({}, query);\n        }\n        return this._client.getAPIList(\"/files\", FileObjectsPage, {\n            query,\n            ...options\n        });\n    }\n    /**\n     * Delete a file.\n     */ del(fileId, options) {\n        return this._client.delete(`/files/${fileId}`, options);\n    }\n    /**\n     * Returns the contents of the specified file.\n     */ content(fileId, options) {\n        return this._client.get(`/files/${fileId}/content`, {\n            ...options,\n            __binaryResponse: true\n        });\n    }\n    /**\n     * Returns the contents of the specified file.\n     *\n     * @deprecated The `.content()` method should be used instead\n     */ retrieveContent(fileId, options) {\n        return this._client.get(`/files/${fileId}/content`, {\n            ...options,\n            headers: {\n                Accept: \"application/json\",\n                ...options?.headers\n            }\n        });\n    }\n    /**\n     * Waits for the given file to be processed, default timeout is 30 mins.\n     */ async waitForProcessing(id, { pollInterval = 5000, maxWait = 30 * 60 * 1000 } = {}) {\n        const TERMINAL_STATES = new Set([\n            \"processed\",\n            \"error\",\n            \"deleted\"\n        ]);\n        const start = Date.now();\n        let file = await this.retrieve(id);\n        while(!file.status || !TERMINAL_STATES.has(file.status)){\n            await (0,openai_core__WEBPACK_IMPORTED_MODULE_2__.sleep)(pollInterval);\n            file = await this.retrieve(id);\n            if (Date.now() - start > maxWait) {\n                throw new openai_error__WEBPACK_IMPORTED_MODULE_3__.APIConnectionTimeoutError({\n                    message: `Giving up on waiting for file ${id} to finish processing after ${maxWait} milliseconds.`\n                });\n            }\n        }\n        return file;\n    }\n}\n/**\n * Note: no pagination actually occurs yet, this is for forwards-compatibility.\n */ class FileObjectsPage extends openai_pagination__WEBPACK_IMPORTED_MODULE_4__.Page {\n}\n(function(Files) {\n    Files.FileObjectsPage = openai_resources_files__WEBPACK_IMPORTED_MODULE_5__.FileObjectsPage;\n})(Files || (Files = {})); //# sourceMappingURL=files.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9maWxlcy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSxxREFBcUQ7QUFDUDtBQUNDO0FBQ1g7QUFDcUI7QUFDTjtBQUNPO0FBQ2pCO0FBQ2xDLE1BQU1PLGNBQWNQLHdEQUFXQTtJQUNsQzs7Ozs7Ozs7Ozs7O0tBWUMsR0FDRFEsT0FBT0MsSUFBSSxFQUFFQyxPQUFPLEVBQUU7UUFDbEIsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDLFVBQVVQLHdFQUEyQkEsQ0FBQztZQUFFSTtZQUFNLEdBQUdDLE9BQU87UUFBQztJQUN0RjtJQUNBOztLQUVDLEdBQ0RHLFNBQVNDLE1BQU0sRUFBRUosT0FBTyxFQUFFO1FBQ3RCLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNJLEdBQUcsQ0FBQyxDQUFDLE9BQU8sRUFBRUQsT0FBTyxDQUFDLEVBQUVKO0lBQ2hEO0lBQ0FNLEtBQUtDLFFBQVEsQ0FBQyxDQUFDLEVBQUVQLE9BQU8sRUFBRTtRQUN0QixJQUFJVCw2REFBZ0JBLENBQUNnQixRQUFRO1lBQ3pCLE9BQU8sSUFBSSxDQUFDRCxJQUFJLENBQUMsQ0FBQyxHQUFHQztRQUN6QjtRQUNBLE9BQU8sSUFBSSxDQUFDTixPQUFPLENBQUNPLFVBQVUsQ0FBQyxVQUFVQyxpQkFBaUI7WUFBRUY7WUFBTyxHQUFHUCxPQUFPO1FBQUM7SUFDbEY7SUFDQTs7S0FFQyxHQUNEVSxJQUFJTixNQUFNLEVBQUVKLE9BQU8sRUFBRTtRQUNqQixPQUFPLElBQUksQ0FBQ0MsT0FBTyxDQUFDVSxNQUFNLENBQUMsQ0FBQyxPQUFPLEVBQUVQLE9BQU8sQ0FBQyxFQUFFSjtJQUNuRDtJQUNBOztLQUVDLEdBQ0RZLFFBQVFSLE1BQU0sRUFBRUosT0FBTyxFQUFFO1FBQ3JCLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNJLEdBQUcsQ0FBQyxDQUFDLE9BQU8sRUFBRUQsT0FBTyxRQUFRLENBQUMsRUFBRTtZQUFFLEdBQUdKLE9BQU87WUFBRWEsa0JBQWtCO1FBQUs7SUFDN0Y7SUFDQTs7OztLQUlDLEdBQ0RDLGdCQUFnQlYsTUFBTSxFQUFFSixPQUFPLEVBQUU7UUFDN0IsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0ksR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFFRCxPQUFPLFFBQVEsQ0FBQyxFQUFFO1lBQ2hELEdBQUdKLE9BQU87WUFDVmUsU0FBUztnQkFBRUMsUUFBUTtnQkFBb0IsR0FBR2hCLFNBQVNlLE9BQU87WUFBQztRQUMvRDtJQUNKO0lBQ0E7O0tBRUMsR0FDRCxNQUFNRSxrQkFBa0JDLEVBQUUsRUFBRSxFQUFFQyxlQUFlLElBQUksRUFBRUMsVUFBVSxLQUFLLEtBQUssSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUU7UUFDaEYsTUFBTUMsa0JBQWtCLElBQUlDLElBQUk7WUFBQztZQUFhO1lBQVM7U0FBVTtRQUNqRSxNQUFNQyxRQUFRQyxLQUFLQyxHQUFHO1FBQ3RCLElBQUlDLE9BQU8sTUFBTSxJQUFJLENBQUN2QixRQUFRLENBQUNlO1FBQy9CLE1BQU8sQ0FBQ1EsS0FBS0MsTUFBTSxJQUFJLENBQUNOLGdCQUFnQk8sR0FBRyxDQUFDRixLQUFLQyxNQUFNLEVBQUc7WUFDdEQsTUFBTW5DLGtEQUFLQSxDQUFDMkI7WUFDWk8sT0FBTyxNQUFNLElBQUksQ0FBQ3ZCLFFBQVEsQ0FBQ2U7WUFDM0IsSUFBSU0sS0FBS0MsR0FBRyxLQUFLRixRQUFRSCxTQUFTO2dCQUM5QixNQUFNLElBQUkzQixtRUFBeUJBLENBQUM7b0JBQ2hDb0MsU0FBUyxDQUFDLDhCQUE4QixFQUFFWCxHQUFHLDRCQUE0QixFQUFFRSxRQUFRLGNBQWMsQ0FBQztnQkFDdEc7WUFDSjtRQUNKO1FBQ0EsT0FBT007SUFDWDtBQUNKO0FBQ0E7O0NBRUMsR0FDTSxNQUFNakIsd0JBQXdCYixtREFBSUE7QUFDekM7QUFDQyxVQUFVQyxLQUFLO0lBQ1pBLE1BQU1ZLGVBQWUsR0FBR2YsbUVBQXdCO0FBQ3BELEdBQUdHLFNBQVVBLENBQUFBLFFBQVEsQ0FBQyxLQUN0QixrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1hcHAvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9maWxlcy5tanM/MmU0MiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tICdvcGVuYWkvcmVzb3VyY2UnO1xuaW1wb3J0IHsgaXNSZXF1ZXN0T3B0aW9ucyB9IGZyb20gJ29wZW5haS9jb3JlJztcbmltcG9ydCB7IHNsZWVwIH0gZnJvbSAnb3BlbmFpL2NvcmUnO1xuaW1wb3J0IHsgQVBJQ29ubmVjdGlvblRpbWVvdXRFcnJvciB9IGZyb20gJ29wZW5haS9lcnJvcic7XG5pbXBvcnQgKiBhcyBGaWxlc0FQSSBmcm9tICdvcGVuYWkvcmVzb3VyY2VzL2ZpbGVzJztcbmltcG9ydCB7IG11bHRpcGFydEZvcm1SZXF1ZXN0T3B0aW9ucyB9IGZyb20gJ29wZW5haS9jb3JlJztcbmltcG9ydCB7IFBhZ2UgfSBmcm9tICdvcGVuYWkvcGFnaW5hdGlvbic7XG5leHBvcnQgY2xhc3MgRmlsZXMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gICAgLyoqXG4gICAgICogVXBsb2FkIGEgZmlsZSB0aGF0IGNhbiBiZSB1c2VkIGFjcm9zcyB2YXJpb3VzIGVuZHBvaW50cy4gVGhlIHNpemUgb2YgYWxsIHRoZVxuICAgICAqIGZpbGVzIHVwbG9hZGVkIGJ5IG9uZSBvcmdhbml6YXRpb24gY2FuIGJlIHVwIHRvIDEwMCBHQi5cbiAgICAgKlxuICAgICAqIFRoZSBzaXplIG9mIGluZGl2aWR1YWwgZmlsZXMgY2FuIGJlIGEgbWF4aW11bSBvZiA1MTIgTUIgb3IgMiBtaWxsaW9uIHRva2VucyBmb3JcbiAgICAgKiBBc3Npc3RhbnRzLiBTZWUgdGhlXG4gICAgICogW0Fzc2lzdGFudHMgVG9vbHMgZ3VpZGVdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2Fzc2lzdGFudHMvdG9vbHMpIHRvXG4gICAgICogbGVhcm4gbW9yZSBhYm91dCB0aGUgdHlwZXMgb2YgZmlsZXMgc3VwcG9ydGVkLiBUaGUgRmluZS10dW5pbmcgQVBJIG9ubHkgc3VwcG9ydHNcbiAgICAgKiBgLmpzb25sYCBmaWxlcy5cbiAgICAgKlxuICAgICAqIFBsZWFzZSBbY29udGFjdCB1c10oaHR0cHM6Ly9oZWxwLm9wZW5haS5jb20vKSBpZiB5b3UgbmVlZCB0byBpbmNyZWFzZSB0aGVzZVxuICAgICAqIHN0b3JhZ2UgbGltaXRzLlxuICAgICAqL1xuICAgIGNyZWF0ZShib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdCgnL2ZpbGVzJywgbXVsdGlwYXJ0Rm9ybVJlcXVlc3RPcHRpb25zKHsgYm9keSwgLi4ub3B0aW9ucyB9KSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgaW5mb3JtYXRpb24gYWJvdXQgYSBzcGVjaWZpYyBmaWxlLlxuICAgICAqL1xuICAgIHJldHJpZXZlKGZpbGVJZCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldChgL2ZpbGVzLyR7ZmlsZUlkfWAsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBsaXN0KHF1ZXJ5ID0ge30sIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKGlzUmVxdWVzdE9wdGlvbnMocXVlcnkpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5saXN0KHt9LCBxdWVyeSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXRBUElMaXN0KCcvZmlsZXMnLCBGaWxlT2JqZWN0c1BhZ2UsIHsgcXVlcnksIC4uLm9wdGlvbnMgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlbGV0ZSBhIGZpbGUuXG4gICAgICovXG4gICAgZGVsKGZpbGVJZCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmRlbGV0ZShgL2ZpbGVzLyR7ZmlsZUlkfWAsIG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjb250ZW50cyBvZiB0aGUgc3BlY2lmaWVkIGZpbGUuXG4gICAgICovXG4gICAgY29udGVudChmaWxlSWQsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXQoYC9maWxlcy8ke2ZpbGVJZH0vY29udGVudGAsIHsgLi4ub3B0aW9ucywgX19iaW5hcnlSZXNwb25zZTogdHJ1ZSB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgY29udGVudHMgb2YgdGhlIHNwZWNpZmllZCBmaWxlLlxuICAgICAqXG4gICAgICogQGRlcHJlY2F0ZWQgVGhlIGAuY29udGVudCgpYCBtZXRob2Qgc2hvdWxkIGJlIHVzZWQgaW5zdGVhZFxuICAgICAqL1xuICAgIHJldHJpZXZlQ29udGVudChmaWxlSWQsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXQoYC9maWxlcy8ke2ZpbGVJZH0vY29udGVudGAsIHtcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiB7IEFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb24nLCAuLi5vcHRpb25zPy5oZWFkZXJzIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXYWl0cyBmb3IgdGhlIGdpdmVuIGZpbGUgdG8gYmUgcHJvY2Vzc2VkLCBkZWZhdWx0IHRpbWVvdXQgaXMgMzAgbWlucy5cbiAgICAgKi9cbiAgICBhc3luYyB3YWl0Rm9yUHJvY2Vzc2luZyhpZCwgeyBwb2xsSW50ZXJ2YWwgPSA1MDAwLCBtYXhXYWl0ID0gMzAgKiA2MCAqIDEwMDAgfSA9IHt9KSB7XG4gICAgICAgIGNvbnN0IFRFUk1JTkFMX1NUQVRFUyA9IG5ldyBTZXQoWydwcm9jZXNzZWQnLCAnZXJyb3InLCAnZGVsZXRlZCddKTtcbiAgICAgICAgY29uc3Qgc3RhcnQgPSBEYXRlLm5vdygpO1xuICAgICAgICBsZXQgZmlsZSA9IGF3YWl0IHRoaXMucmV0cmlldmUoaWQpO1xuICAgICAgICB3aGlsZSAoIWZpbGUuc3RhdHVzIHx8ICFURVJNSU5BTF9TVEFURVMuaGFzKGZpbGUuc3RhdHVzKSkge1xuICAgICAgICAgICAgYXdhaXQgc2xlZXAocG9sbEludGVydmFsKTtcbiAgICAgICAgICAgIGZpbGUgPSBhd2FpdCB0aGlzLnJldHJpZXZlKGlkKTtcbiAgICAgICAgICAgIGlmIChEYXRlLm5vdygpIC0gc3RhcnQgPiBtYXhXYWl0KSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEFQSUNvbm5lY3Rpb25UaW1lb3V0RXJyb3Ioe1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBgR2l2aW5nIHVwIG9uIHdhaXRpbmcgZm9yIGZpbGUgJHtpZH0gdG8gZmluaXNoIHByb2Nlc3NpbmcgYWZ0ZXIgJHttYXhXYWl0fSBtaWxsaXNlY29uZHMuYCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmlsZTtcbiAgICB9XG59XG4vKipcbiAqIE5vdGU6IG5vIHBhZ2luYXRpb24gYWN0dWFsbHkgb2NjdXJzIHlldCwgdGhpcyBpcyBmb3IgZm9yd2FyZHMtY29tcGF0aWJpbGl0eS5cbiAqL1xuZXhwb3J0IGNsYXNzIEZpbGVPYmplY3RzUGFnZSBleHRlbmRzIFBhZ2Uge1xufVxuKGZ1bmN0aW9uIChGaWxlcykge1xuICAgIEZpbGVzLkZpbGVPYmplY3RzUGFnZSA9IEZpbGVzQVBJLkZpbGVPYmplY3RzUGFnZTtcbn0pKEZpbGVzIHx8IChGaWxlcyA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1maWxlcy5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiaXNSZXF1ZXN0T3B0aW9ucyIsInNsZWVwIiwiQVBJQ29ubmVjdGlvblRpbWVvdXRFcnJvciIsIkZpbGVzQVBJIiwibXVsdGlwYXJ0Rm9ybVJlcXVlc3RPcHRpb25zIiwiUGFnZSIsIkZpbGVzIiwiY3JlYXRlIiwiYm9keSIsIm9wdGlvbnMiLCJfY2xpZW50IiwicG9zdCIsInJldHJpZXZlIiwiZmlsZUlkIiwiZ2V0IiwibGlzdCIsInF1ZXJ5IiwiZ2V0QVBJTGlzdCIsIkZpbGVPYmplY3RzUGFnZSIsImRlbCIsImRlbGV0ZSIsImNvbnRlbnQiLCJfX2JpbmFyeVJlc3BvbnNlIiwicmV0cmlldmVDb250ZW50IiwiaGVhZGVycyIsIkFjY2VwdCIsIndhaXRGb3JQcm9jZXNzaW5nIiwiaWQiLCJwb2xsSW50ZXJ2YWwiLCJtYXhXYWl0IiwiVEVSTUlOQUxfU1RBVEVTIiwiU2V0Iiwic3RhcnQiLCJEYXRlIiwibm93IiwiZmlsZSIsInN0YXR1cyIsImhhcyIsIm1lc3NhZ2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openai/resources/files.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/openai/resources/fine-tuning/fine-tuning.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/openai/resources/fine-tuning/fine-tuning.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FineTuning: () => (/* binding */ FineTuning)\n/* harmony export */ });\n/* harmony import */ var openai_resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/resource */ \"(ssr)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var openai_resources_fine_tuning_jobs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai/resources/fine-tuning/jobs */ \"(ssr)/./node_modules/openai/resources/fine-tuning/jobs.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\n\nclass FineTuning extends openai_resource__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    constructor(){\n        super(...arguments);\n        this.jobs = new openai_resources_fine_tuning_jobs__WEBPACK_IMPORTED_MODULE_1__.Jobs(this._client);\n    }\n}\n(function(FineTuning) {\n    FineTuning.Jobs = openai_resources_fine_tuning_jobs__WEBPACK_IMPORTED_MODULE_1__.Jobs;\n    FineTuning.FineTuningJobsPage = openai_resources_fine_tuning_jobs__WEBPACK_IMPORTED_MODULE_1__.FineTuningJobsPage;\n    FineTuning.FineTuningJobEventsPage = openai_resources_fine_tuning_jobs__WEBPACK_IMPORTED_MODULE_1__.FineTuningJobEventsPage;\n})(FineTuning || (FineTuning = {})); //# sourceMappingURL=fine-tuning.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9maW5lLXR1bmluZy9maW5lLXR1bmluZy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEscURBQXFEO0FBQ1A7QUFDZTtBQUN0RCxNQUFNRSxtQkFBbUJGLHdEQUFXQTtJQUN2Q0csYUFBYztRQUNWLEtBQUssSUFBSUM7UUFDVCxJQUFJLENBQUNDLElBQUksR0FBRyxJQUFJSixtRUFBWSxDQUFDLElBQUksQ0FBQ00sT0FBTztJQUM3QztBQUNKO0FBQ0MsVUFBVUwsVUFBVTtJQUNqQkEsV0FBV0ksSUFBSSxHQUFHTCxtRUFBWTtJQUM5QkMsV0FBV00sa0JBQWtCLEdBQUdQLGlGQUEwQjtJQUMxREMsV0FBV08sdUJBQXVCLEdBQUdSLHNGQUErQjtBQUN4RSxHQUFHQyxjQUFlQSxDQUFBQSxhQUFhLENBQUMsS0FDaEMsd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktYXBwLy4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZXMvZmluZS10dW5pbmcvZmluZS10dW5pbmcubWpzPzI2NzciXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSAnb3BlbmFpL3Jlc291cmNlJztcbmltcG9ydCAqIGFzIEpvYnNBUEkgZnJvbSAnb3BlbmFpL3Jlc291cmNlcy9maW5lLXR1bmluZy9qb2JzJztcbmV4cG9ydCBjbGFzcyBGaW5lVHVuaW5nIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmpvYnMgPSBuZXcgSm9ic0FQSS5Kb2JzKHRoaXMuX2NsaWVudCk7XG4gICAgfVxufVxuKGZ1bmN0aW9uIChGaW5lVHVuaW5nKSB7XG4gICAgRmluZVR1bmluZy5Kb2JzID0gSm9ic0FQSS5Kb2JzO1xuICAgIEZpbmVUdW5pbmcuRmluZVR1bmluZ0pvYnNQYWdlID0gSm9ic0FQSS5GaW5lVHVuaW5nSm9ic1BhZ2U7XG4gICAgRmluZVR1bmluZy5GaW5lVHVuaW5nSm9iRXZlbnRzUGFnZSA9IEpvYnNBUEkuRmluZVR1bmluZ0pvYkV2ZW50c1BhZ2U7XG59KShGaW5lVHVuaW5nIHx8IChGaW5lVHVuaW5nID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpbmUtdHVuaW5nLm1qcy5tYXAiXSwibmFtZXMiOlsiQVBJUmVzb3VyY2UiLCJKb2JzQVBJIiwiRmluZVR1bmluZyIsImNvbnN0cnVjdG9yIiwiYXJndW1lbnRzIiwiam9icyIsIkpvYnMiLCJfY2xpZW50IiwiRmluZVR1bmluZ0pvYnNQYWdlIiwiRmluZVR1bmluZ0pvYkV2ZW50c1BhZ2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openai/resources/fine-tuning/fine-tuning.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/openai/resources/fine-tuning/jobs.mjs":
/*!************************************************************!*\
  !*** ./node_modules/openai/resources/fine-tuning/jobs.mjs ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FineTuningJobEventsPage: () => (/* binding */ FineTuningJobEventsPage),\n/* harmony export */   FineTuningJobsPage: () => (/* binding */ FineTuningJobsPage),\n/* harmony export */   Jobs: () => (/* binding */ Jobs)\n/* harmony export */ });\n/* harmony import */ var openai_resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/resource */ \"(ssr)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var openai_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai/core */ \"(ssr)/./node_modules/openai/core.mjs\");\n/* harmony import */ var openai_resources_fine_tuning_jobs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! openai/resources/fine-tuning/jobs */ \"(ssr)/./node_modules/openai/resources/fine-tuning/jobs.mjs\");\n/* harmony import */ var openai_pagination__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! openai/pagination */ \"(ssr)/./node_modules/openai/pagination.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\n\n\n\nclass Jobs extends openai_resource__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Creates a fine-tuning job which begins the process of creating a new model from\n     * a given dataset.\n     *\n     * Response includes details of the enqueued job including job status and the name\n     * of the fine-tuned models once complete.\n     *\n     * [Learn more about fine-tuning](https://platform.openai.com/docs/guides/fine-tuning)\n     */ create(body, options) {\n        return this._client.post(\"/fine_tuning/jobs\", {\n            body,\n            ...options\n        });\n    }\n    /**\n     * Get info about a fine-tuning job.\n     *\n     * [Learn more about fine-tuning](https://platform.openai.com/docs/guides/fine-tuning)\n     */ retrieve(fineTuningJobId, options) {\n        return this._client.get(`/fine_tuning/jobs/${fineTuningJobId}`, options);\n    }\n    list(query = {}, options) {\n        if ((0,openai_core__WEBPACK_IMPORTED_MODULE_1__.isRequestOptions)(query)) {\n            return this.list({}, query);\n        }\n        return this._client.getAPIList(\"/fine_tuning/jobs\", FineTuningJobsPage, {\n            query,\n            ...options\n        });\n    }\n    /**\n     * Immediately cancel a fine-tune job.\n     */ cancel(fineTuningJobId, options) {\n        return this._client.post(`/fine_tuning/jobs/${fineTuningJobId}/cancel`, options);\n    }\n    listEvents(fineTuningJobId, query = {}, options) {\n        if ((0,openai_core__WEBPACK_IMPORTED_MODULE_1__.isRequestOptions)(query)) {\n            return this.listEvents(fineTuningJobId, {}, query);\n        }\n        return this._client.getAPIList(`/fine_tuning/jobs/${fineTuningJobId}/events`, FineTuningJobEventsPage, {\n            query,\n            ...options\n        });\n    }\n}\nclass FineTuningJobsPage extends openai_pagination__WEBPACK_IMPORTED_MODULE_2__.CursorPage {\n}\nclass FineTuningJobEventsPage extends openai_pagination__WEBPACK_IMPORTED_MODULE_2__.CursorPage {\n}\n(function(Jobs) {\n    Jobs.FineTuningJobsPage = openai_resources_fine_tuning_jobs__WEBPACK_IMPORTED_MODULE_3__.FineTuningJobsPage;\n    Jobs.FineTuningJobEventsPage = openai_resources_fine_tuning_jobs__WEBPACK_IMPORTED_MODULE_3__.FineTuningJobEventsPage;\n})(Jobs || (Jobs = {})); //# sourceMappingURL=jobs.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9maW5lLXR1bmluZy9qb2JzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEscURBQXFEO0FBQ1A7QUFDQztBQUNjO0FBQ2Q7QUFDeEMsTUFBTUksYUFBYUosd0RBQVdBO0lBQ2pDOzs7Ozs7OztLQVFDLEdBQ0RLLE9BQU9DLElBQUksRUFBRUMsT0FBTyxFQUFFO1FBQ2xCLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNDLElBQUksQ0FBQyxxQkFBcUI7WUFBRUg7WUFBTSxHQUFHQyxPQUFPO1FBQUM7SUFDckU7SUFDQTs7OztLQUlDLEdBQ0RHLFNBQVNDLGVBQWUsRUFBRUosT0FBTyxFQUFFO1FBQy9CLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNJLEdBQUcsQ0FBQyxDQUFDLGtCQUFrQixFQUFFRCxnQkFBZ0IsQ0FBQyxFQUFFSjtJQUNwRTtJQUNBTSxLQUFLQyxRQUFRLENBQUMsQ0FBQyxFQUFFUCxPQUFPLEVBQUU7UUFDdEIsSUFBSU4sNkRBQWdCQSxDQUFDYSxRQUFRO1lBQ3pCLE9BQU8sSUFBSSxDQUFDRCxJQUFJLENBQUMsQ0FBQyxHQUFHQztRQUN6QjtRQUNBLE9BQU8sSUFBSSxDQUFDTixPQUFPLENBQUNPLFVBQVUsQ0FBQyxxQkFBcUJDLG9CQUFvQjtZQUFFRjtZQUFPLEdBQUdQLE9BQU87UUFBQztJQUNoRztJQUNBOztLQUVDLEdBQ0RVLE9BQU9OLGVBQWUsRUFBRUosT0FBTyxFQUFFO1FBQzdCLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNDLElBQUksQ0FBQyxDQUFDLGtCQUFrQixFQUFFRSxnQkFBZ0IsT0FBTyxDQUFDLEVBQUVKO0lBQzVFO0lBQ0FXLFdBQVdQLGVBQWUsRUFBRUcsUUFBUSxDQUFDLENBQUMsRUFBRVAsT0FBTyxFQUFFO1FBQzdDLElBQUlOLDZEQUFnQkEsQ0FBQ2EsUUFBUTtZQUN6QixPQUFPLElBQUksQ0FBQ0ksVUFBVSxDQUFDUCxpQkFBaUIsQ0FBQyxHQUFHRztRQUNoRDtRQUNBLE9BQU8sSUFBSSxDQUFDTixPQUFPLENBQUNPLFVBQVUsQ0FBQyxDQUFDLGtCQUFrQixFQUFFSixnQkFBZ0IsT0FBTyxDQUFDLEVBQUVRLHlCQUF5QjtZQUNuR0w7WUFDQSxHQUFHUCxPQUFPO1FBQ2Q7SUFDSjtBQUNKO0FBQ08sTUFBTVMsMkJBQTJCYix5REFBVUE7QUFDbEQ7QUFDTyxNQUFNZ0IsZ0NBQWdDaEIseURBQVVBO0FBQ3ZEO0FBQ0MsVUFBVUMsSUFBSTtJQUNYQSxLQUFLWSxrQkFBa0IsR0FBR2QsaUZBQTBCO0lBQ3BERSxLQUFLZSx1QkFBdUIsR0FBR2pCLHNGQUErQjtBQUNsRSxHQUFHRSxRQUFTQSxDQUFBQSxPQUFPLENBQUMsS0FDcEIsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktYXBwLy4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZXMvZmluZS10dW5pbmcvam9icy5tanM/NDk3MSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tICdvcGVuYWkvcmVzb3VyY2UnO1xuaW1wb3J0IHsgaXNSZXF1ZXN0T3B0aW9ucyB9IGZyb20gJ29wZW5haS9jb3JlJztcbmltcG9ydCAqIGFzIEpvYnNBUEkgZnJvbSAnb3BlbmFpL3Jlc291cmNlcy9maW5lLXR1bmluZy9qb2JzJztcbmltcG9ydCB7IEN1cnNvclBhZ2UgfSBmcm9tICdvcGVuYWkvcGFnaW5hdGlvbic7XG5leHBvcnQgY2xhc3MgSm9icyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZmluZS10dW5pbmcgam9iIHdoaWNoIGJlZ2lucyB0aGUgcHJvY2VzcyBvZiBjcmVhdGluZyBhIG5ldyBtb2RlbCBmcm9tXG4gICAgICogYSBnaXZlbiBkYXRhc2V0LlxuICAgICAqXG4gICAgICogUmVzcG9uc2UgaW5jbHVkZXMgZGV0YWlscyBvZiB0aGUgZW5xdWV1ZWQgam9iIGluY2x1ZGluZyBqb2Igc3RhdHVzIGFuZCB0aGUgbmFtZVxuICAgICAqIG9mIHRoZSBmaW5lLXR1bmVkIG1vZGVscyBvbmNlIGNvbXBsZXRlLlxuICAgICAqXG4gICAgICogW0xlYXJuIG1vcmUgYWJvdXQgZmluZS10dW5pbmddKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy9maW5lLXR1bmluZylcbiAgICAgKi9cbiAgICBjcmVhdGUoYm9keSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoJy9maW5lX3R1bmluZy9qb2JzJywgeyBib2R5LCAuLi5vcHRpb25zIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgaW5mbyBhYm91dCBhIGZpbmUtdHVuaW5nIGpvYi5cbiAgICAgKlxuICAgICAqIFtMZWFybiBtb3JlIGFib3V0IGZpbmUtdHVuaW5nXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9ndWlkZXMvZmluZS10dW5pbmcpXG4gICAgICovXG4gICAgcmV0cmlldmUoZmluZVR1bmluZ0pvYklkLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0KGAvZmluZV90dW5pbmcvam9icy8ke2ZpbmVUdW5pbmdKb2JJZH1gLCBvcHRpb25zKTtcbiAgICB9XG4gICAgbGlzdChxdWVyeSA9IHt9LCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChpc1JlcXVlc3RPcHRpb25zKHF1ZXJ5KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubGlzdCh7fSwgcXVlcnkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0QVBJTGlzdCgnL2ZpbmVfdHVuaW5nL2pvYnMnLCBGaW5lVHVuaW5nSm9ic1BhZ2UsIHsgcXVlcnksIC4uLm9wdGlvbnMgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEltbWVkaWF0ZWx5IGNhbmNlbCBhIGZpbmUtdHVuZSBqb2IuXG4gICAgICovXG4gICAgY2FuY2VsKGZpbmVUdW5pbmdKb2JJZCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoYC9maW5lX3R1bmluZy9qb2JzLyR7ZmluZVR1bmluZ0pvYklkfS9jYW5jZWxgLCBvcHRpb25zKTtcbiAgICB9XG4gICAgbGlzdEV2ZW50cyhmaW5lVHVuaW5nSm9iSWQsIHF1ZXJ5ID0ge30sIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKGlzUmVxdWVzdE9wdGlvbnMocXVlcnkpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5saXN0RXZlbnRzKGZpbmVUdW5pbmdKb2JJZCwge30sIHF1ZXJ5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldEFQSUxpc3QoYC9maW5lX3R1bmluZy9qb2JzLyR7ZmluZVR1bmluZ0pvYklkfS9ldmVudHNgLCBGaW5lVHVuaW5nSm9iRXZlbnRzUGFnZSwge1xuICAgICAgICAgICAgcXVlcnksXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgRmluZVR1bmluZ0pvYnNQYWdlIGV4dGVuZHMgQ3Vyc29yUGFnZSB7XG59XG5leHBvcnQgY2xhc3MgRmluZVR1bmluZ0pvYkV2ZW50c1BhZ2UgZXh0ZW5kcyBDdXJzb3JQYWdlIHtcbn1cbihmdW5jdGlvbiAoSm9icykge1xuICAgIEpvYnMuRmluZVR1bmluZ0pvYnNQYWdlID0gSm9ic0FQSS5GaW5lVHVuaW5nSm9ic1BhZ2U7XG4gICAgSm9icy5GaW5lVHVuaW5nSm9iRXZlbnRzUGFnZSA9IEpvYnNBUEkuRmluZVR1bmluZ0pvYkV2ZW50c1BhZ2U7XG59KShKb2JzIHx8IChKb2JzID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWpvYnMubWpzLm1hcCJdLCJuYW1lcyI6WyJBUElSZXNvdXJjZSIsImlzUmVxdWVzdE9wdGlvbnMiLCJKb2JzQVBJIiwiQ3Vyc29yUGFnZSIsIkpvYnMiLCJjcmVhdGUiLCJib2R5Iiwib3B0aW9ucyIsIl9jbGllbnQiLCJwb3N0IiwicmV0cmlldmUiLCJmaW5lVHVuaW5nSm9iSWQiLCJnZXQiLCJsaXN0IiwicXVlcnkiLCJnZXRBUElMaXN0IiwiRmluZVR1bmluZ0pvYnNQYWdlIiwiY2FuY2VsIiwibGlzdEV2ZW50cyIsIkZpbmVUdW5pbmdKb2JFdmVudHNQYWdlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openai/resources/fine-tuning/jobs.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/openai/resources/images.mjs":
/*!**************************************************!*\
  !*** ./node_modules/openai/resources/images.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Images: () => (/* binding */ Images)\n/* harmony export */ });\n/* harmony import */ var openai_resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/resource */ \"(ssr)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var openai_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai/core */ \"(ssr)/./node_modules/openai/uploads.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\n\nclass Images extends openai_resource__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Creates a variation of a given image.\n     */ createVariation(body, options) {\n        return this._client.post(\"/images/variations\", (0,openai_core__WEBPACK_IMPORTED_MODULE_1__.multipartFormRequestOptions)({\n            body,\n            ...options\n        }));\n    }\n    /**\n     * Creates an edited or extended image given an original image and a prompt.\n     */ edit(body, options) {\n        return this._client.post(\"/images/edits\", (0,openai_core__WEBPACK_IMPORTED_MODULE_1__.multipartFormRequestOptions)({\n            body,\n            ...options\n        }));\n    }\n    /**\n     * Creates an image given a prompt.\n     */ generate(body, options) {\n        return this._client.post(\"/images/generations\", {\n            body,\n            ...options\n        });\n    }\n}\n(function(Images) {})(Images || (Images = {})); //# sourceMappingURL=images.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9pbWFnZXMubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLHFEQUFxRDtBQUNQO0FBQ1k7QUFDbkQsTUFBTUUsZUFBZUYsd0RBQVdBO0lBQ25DOztLQUVDLEdBQ0RHLGdCQUFnQkMsSUFBSSxFQUFFQyxPQUFPLEVBQUU7UUFDM0IsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDLHNCQUFzQk4sd0VBQTJCQSxDQUFDO1lBQUVHO1lBQU0sR0FBR0MsT0FBTztRQUFDO0lBQ2xHO0lBQ0E7O0tBRUMsR0FDREcsS0FBS0osSUFBSSxFQUFFQyxPQUFPLEVBQUU7UUFDaEIsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDLGlCQUFpQk4sd0VBQTJCQSxDQUFDO1lBQUVHO1lBQU0sR0FBR0MsT0FBTztRQUFDO0lBQzdGO0lBQ0E7O0tBRUMsR0FDREksU0FBU0wsSUFBSSxFQUFFQyxPQUFPLEVBQUU7UUFDcEIsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDLHVCQUF1QjtZQUFFSDtZQUFNLEdBQUdDLE9BQU87UUFBQztJQUN2RTtBQUNKO0FBQ0MsVUFBVUgsTUFBTSxHQUNqQixHQUFHQSxVQUFXQSxDQUFBQSxTQUFTLENBQUMsS0FDeEIsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktYXBwLy4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZXMvaW1hZ2VzLm1qcz82ZjdlIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gJ29wZW5haS9yZXNvdXJjZSc7XG5pbXBvcnQgeyBtdWx0aXBhcnRGb3JtUmVxdWVzdE9wdGlvbnMgfSBmcm9tICdvcGVuYWkvY29yZSc7XG5leHBvcnQgY2xhc3MgSW1hZ2VzIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSB2YXJpYXRpb24gb2YgYSBnaXZlbiBpbWFnZS5cbiAgICAgKi9cbiAgICBjcmVhdGVWYXJpYXRpb24oYm9keSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoJy9pbWFnZXMvdmFyaWF0aW9ucycsIG11bHRpcGFydEZvcm1SZXF1ZXN0T3B0aW9ucyh7IGJvZHksIC4uLm9wdGlvbnMgfSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGVkaXRlZCBvciBleHRlbmRlZCBpbWFnZSBnaXZlbiBhbiBvcmlnaW5hbCBpbWFnZSBhbmQgYSBwcm9tcHQuXG4gICAgICovXG4gICAgZWRpdChib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdCgnL2ltYWdlcy9lZGl0cycsIG11bHRpcGFydEZvcm1SZXF1ZXN0T3B0aW9ucyh7IGJvZHksIC4uLm9wdGlvbnMgfSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGltYWdlIGdpdmVuIGEgcHJvbXB0LlxuICAgICAqL1xuICAgIGdlbmVyYXRlKGJvZHksIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KCcvaW1hZ2VzL2dlbmVyYXRpb25zJywgeyBib2R5LCAuLi5vcHRpb25zIH0pO1xuICAgIH1cbn1cbihmdW5jdGlvbiAoSW1hZ2VzKSB7XG59KShJbWFnZXMgfHwgKEltYWdlcyA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbWFnZXMubWpzLm1hcCJdLCJuYW1lcyI6WyJBUElSZXNvdXJjZSIsIm11bHRpcGFydEZvcm1SZXF1ZXN0T3B0aW9ucyIsIkltYWdlcyIsImNyZWF0ZVZhcmlhdGlvbiIsImJvZHkiLCJvcHRpb25zIiwiX2NsaWVudCIsInBvc3QiLCJlZGl0IiwiZ2VuZXJhdGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openai/resources/images.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/openai/resources/models.mjs":
/*!**************************************************!*\
  !*** ./node_modules/openai/resources/models.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Models: () => (/* binding */ Models),\n/* harmony export */   ModelsPage: () => (/* binding */ ModelsPage)\n/* harmony export */ });\n/* harmony import */ var openai_resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/resource */ \"(ssr)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var openai_resources_models__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! openai/resources/models */ \"(ssr)/./node_modules/openai/resources/models.mjs\");\n/* harmony import */ var openai_pagination__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai/pagination */ \"(ssr)/./node_modules/openai/pagination.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\n\n\nclass Models extends openai_resource__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Retrieves a model instance, providing basic information about the model such as\n     * the owner and permissioning.\n     */ retrieve(model, options) {\n        return this._client.get(`/models/${model}`, options);\n    }\n    /**\n     * Lists the currently available models, and provides basic information about each\n     * one such as the owner and availability.\n     */ list(options) {\n        return this._client.getAPIList(\"/models\", ModelsPage, options);\n    }\n    /**\n     * Delete a fine-tuned model. You must have the Owner role in your organization to\n     * delete a model.\n     */ del(model, options) {\n        return this._client.delete(`/models/${model}`, options);\n    }\n}\n/**\n * Note: no pagination actually occurs yet, this is for forwards-compatibility.\n */ class ModelsPage extends openai_pagination__WEBPACK_IMPORTED_MODULE_1__.Page {\n}\n(function(Models) {\n    Models.ModelsPage = openai_resources_models__WEBPACK_IMPORTED_MODULE_2__.ModelsPage;\n})(Models || (Models = {})); //# sourceMappingURL=models.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9tb2RlbHMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEscURBQXFEO0FBQ1A7QUFDTztBQUNaO0FBQ2xDLE1BQU1HLGVBQWVILHdEQUFXQTtJQUNuQzs7O0tBR0MsR0FDREksU0FBU0MsS0FBSyxFQUFFQyxPQUFPLEVBQUU7UUFDckIsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLENBQUMsUUFBUSxFQUFFSCxNQUFNLENBQUMsRUFBRUM7SUFDaEQ7SUFDQTs7O0tBR0MsR0FDREcsS0FBS0gsT0FBTyxFQUFFO1FBQ1YsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0csVUFBVSxDQUFDLFdBQVdDLFlBQVlMO0lBQzFEO0lBQ0E7OztLQUdDLEdBQ0RNLElBQUlQLEtBQUssRUFBRUMsT0FBTyxFQUFFO1FBQ2hCLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNNLE1BQU0sQ0FBQyxDQUFDLFFBQVEsRUFBRVIsTUFBTSxDQUFDLEVBQUVDO0lBQ25EO0FBQ0o7QUFDQTs7Q0FFQyxHQUNNLE1BQU1LLG1CQUFtQlQsbURBQUlBO0FBQ3BDO0FBQ0MsVUFBVUMsTUFBTTtJQUNiQSxPQUFPUSxVQUFVLEdBQUdWLCtEQUFvQjtBQUM1QyxHQUFHRSxVQUFXQSxDQUFBQSxTQUFTLENBQUMsS0FDeEIsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktYXBwLy4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZXMvbW9kZWxzLm1qcz9mN2EyIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gJ29wZW5haS9yZXNvdXJjZSc7XG5pbXBvcnQgKiBhcyBNb2RlbHNBUEkgZnJvbSAnb3BlbmFpL3Jlc291cmNlcy9tb2RlbHMnO1xuaW1wb3J0IHsgUGFnZSB9IGZyb20gJ29wZW5haS9wYWdpbmF0aW9uJztcbmV4cG9ydCBjbGFzcyBNb2RlbHMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIGEgbW9kZWwgaW5zdGFuY2UsIHByb3ZpZGluZyBiYXNpYyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgbW9kZWwgc3VjaCBhc1xuICAgICAqIHRoZSBvd25lciBhbmQgcGVybWlzc2lvbmluZy5cbiAgICAgKi9cbiAgICByZXRyaWV2ZShtb2RlbCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldChgL21vZGVscy8ke21vZGVsfWAsIG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBMaXN0cyB0aGUgY3VycmVudGx5IGF2YWlsYWJsZSBtb2RlbHMsIGFuZCBwcm92aWRlcyBiYXNpYyBpbmZvcm1hdGlvbiBhYm91dCBlYWNoXG4gICAgICogb25lIHN1Y2ggYXMgdGhlIG93bmVyIGFuZCBhdmFpbGFiaWxpdHkuXG4gICAgICovXG4gICAgbGlzdChvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0QVBJTGlzdCgnL21vZGVscycsIE1vZGVsc1BhZ2UsIG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZWxldGUgYSBmaW5lLXR1bmVkIG1vZGVsLiBZb3UgbXVzdCBoYXZlIHRoZSBPd25lciByb2xlIGluIHlvdXIgb3JnYW5pemF0aW9uIHRvXG4gICAgICogZGVsZXRlIGEgbW9kZWwuXG4gICAgICovXG4gICAgZGVsKG1vZGVsLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZGVsZXRlKGAvbW9kZWxzLyR7bW9kZWx9YCwgb3B0aW9ucyk7XG4gICAgfVxufVxuLyoqXG4gKiBOb3RlOiBubyBwYWdpbmF0aW9uIGFjdHVhbGx5IG9jY3VycyB5ZXQsIHRoaXMgaXMgZm9yIGZvcndhcmRzLWNvbXBhdGliaWxpdHkuXG4gKi9cbmV4cG9ydCBjbGFzcyBNb2RlbHNQYWdlIGV4dGVuZHMgUGFnZSB7XG59XG4oZnVuY3Rpb24gKE1vZGVscykge1xuICAgIE1vZGVscy5Nb2RlbHNQYWdlID0gTW9kZWxzQVBJLk1vZGVsc1BhZ2U7XG59KShNb2RlbHMgfHwgKE1vZGVscyA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb2RlbHMubWpzLm1hcCJdLCJuYW1lcyI6WyJBUElSZXNvdXJjZSIsIk1vZGVsc0FQSSIsIlBhZ2UiLCJNb2RlbHMiLCJyZXRyaWV2ZSIsIm1vZGVsIiwib3B0aW9ucyIsIl9jbGllbnQiLCJnZXQiLCJsaXN0IiwiZ2V0QVBJTGlzdCIsIk1vZGVsc1BhZ2UiLCJkZWwiLCJkZWxldGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openai/resources/models.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/openai/resources/moderations.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/openai/resources/moderations.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Moderations: () => (/* binding */ Moderations)\n/* harmony export */ });\n/* harmony import */ var openai_resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/resource */ \"(ssr)/./node_modules/openai/resource.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\nclass Moderations extends openai_resource__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Classifies if text violates OpenAI's Content Policy\n     */ create(body, options) {\n        return this._client.post(\"/moderations\", {\n            body,\n            ...options\n        });\n    }\n}\n(function(Moderations) {})(Moderations || (Moderations = {})); //# sourceMappingURL=moderations.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9tb2RlcmF0aW9ucy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxxREFBcUQ7QUFDUDtBQUN2QyxNQUFNQyxvQkFBb0JELHdEQUFXQTtJQUN4Qzs7S0FFQyxHQUNERSxPQUFPQyxJQUFJLEVBQUVDLE9BQU8sRUFBRTtRQUNsQixPQUFPLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxJQUFJLENBQUMsZ0JBQWdCO1lBQUVIO1lBQU0sR0FBR0MsT0FBTztRQUFDO0lBQ2hFO0FBQ0o7QUFDQyxVQUFVSCxXQUFXLEdBQ3RCLEdBQUdBLGVBQWdCQSxDQUFBQSxjQUFjLENBQUMsS0FDbEMsd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktYXBwLy4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZXMvbW9kZXJhdGlvbnMubWpzP2FmZTYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSAnb3BlbmFpL3Jlc291cmNlJztcbmV4cG9ydCBjbGFzcyBNb2RlcmF0aW9ucyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgICAvKipcbiAgICAgKiBDbGFzc2lmaWVzIGlmIHRleHQgdmlvbGF0ZXMgT3BlbkFJJ3MgQ29udGVudCBQb2xpY3lcbiAgICAgKi9cbiAgICBjcmVhdGUoYm9keSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoJy9tb2RlcmF0aW9ucycsIHsgYm9keSwgLi4ub3B0aW9ucyB9KTtcbiAgICB9XG59XG4oZnVuY3Rpb24gKE1vZGVyYXRpb25zKSB7XG59KShNb2RlcmF0aW9ucyB8fCAoTW9kZXJhdGlvbnMgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9kZXJhdGlvbnMubWpzLm1hcCJdLCJuYW1lcyI6WyJBUElSZXNvdXJjZSIsIk1vZGVyYXRpb25zIiwiY3JlYXRlIiwiYm9keSIsIm9wdGlvbnMiLCJfY2xpZW50IiwicG9zdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openai/resources/moderations.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/openai/streaming.mjs":
/*!*******************************************!*\
  !*** ./node_modules/openai/streaming.mjs ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Stream: () => (/* binding */ Stream),\n/* harmony export */   readableStreamAsyncIterable: () => (/* binding */ readableStreamAsyncIterable)\n/* harmony export */ });\n/* harmony import */ var _shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_shims/index.mjs */ \"(ssr)/./node_modules/openai/_shims/index.mjs\");\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai/error */ \"(ssr)/./node_modules/openai/error.mjs\");\n\n\n\nclass Stream {\n    constructor(iterator, controller){\n        this.iterator = iterator;\n        this.controller = controller;\n    }\n    static fromSSEResponse(response, controller) {\n        let consumed = false;\n        const decoder = new SSEDecoder();\n        async function* iterMessages() {\n            if (!response.body) {\n                controller.abort();\n                throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`Attempted to iterate over a response with no body`);\n            }\n            const lineDecoder = new LineDecoder();\n            const iter = readableStreamAsyncIterable(response.body);\n            for await (const chunk of iter){\n                for (const line of lineDecoder.decode(chunk)){\n                    const sse = decoder.decode(line);\n                    if (sse) yield sse;\n                }\n            }\n            for (const line of lineDecoder.flush()){\n                const sse = decoder.decode(line);\n                if (sse) yield sse;\n            }\n        }\n        async function* iterator() {\n            if (consumed) {\n                throw new Error(\"Cannot iterate over a consumed stream, use `.tee()` to split the stream.\");\n            }\n            consumed = true;\n            let done = false;\n            try {\n                for await (const sse of iterMessages()){\n                    if (done) continue;\n                    if (sse.data.startsWith(\"[DONE]\")) {\n                        done = true;\n                        continue;\n                    }\n                    if (sse.event === null) {\n                        let data;\n                        try {\n                            data = JSON.parse(sse.data);\n                        } catch (e) {\n                            console.error(`Could not parse message into JSON:`, sse.data);\n                            console.error(`From chunk:`, sse.raw);\n                            throw e;\n                        }\n                        if (data && data.error) {\n                            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.APIError(undefined, data.error, undefined, undefined);\n                        }\n                        yield data;\n                    }\n                }\n                done = true;\n            } catch (e) {\n                // If the user calls `stream.controller.abort()`, we should exit without throwing.\n                if (e instanceof Error && e.name === \"AbortError\") return;\n                throw e;\n            } finally{\n                // If the user `break`s, abort the ongoing request.\n                if (!done) controller.abort();\n            }\n        }\n        return new Stream(iterator, controller);\n    }\n    /**\n     * Generates a Stream from a newline-separated ReadableStream\n     * where each item is a JSON value.\n     */ static fromReadableStream(readableStream, controller) {\n        let consumed = false;\n        async function* iterLines() {\n            const lineDecoder = new LineDecoder();\n            const iter = readableStreamAsyncIterable(readableStream);\n            for await (const chunk of iter){\n                for (const line of lineDecoder.decode(chunk)){\n                    yield line;\n                }\n            }\n            for (const line of lineDecoder.flush()){\n                yield line;\n            }\n        }\n        async function* iterator() {\n            if (consumed) {\n                throw new Error(\"Cannot iterate over a consumed stream, use `.tee()` to split the stream.\");\n            }\n            consumed = true;\n            let done = false;\n            try {\n                for await (const line of iterLines()){\n                    if (done) continue;\n                    if (line) yield JSON.parse(line);\n                }\n                done = true;\n            } catch (e) {\n                // If the user calls `stream.controller.abort()`, we should exit without throwing.\n                if (e instanceof Error && e.name === \"AbortError\") return;\n                throw e;\n            } finally{\n                // If the user `break`s, abort the ongoing request.\n                if (!done) controller.abort();\n            }\n        }\n        return new Stream(iterator, controller);\n    }\n    [Symbol.asyncIterator]() {\n        return this.iterator();\n    }\n    /**\n     * Splits the stream into two streams which can be\n     * independently read from at different speeds.\n     */ tee() {\n        const left = [];\n        const right = [];\n        const iterator = this.iterator();\n        const teeIterator = (queue)=>{\n            return {\n                next: ()=>{\n                    if (queue.length === 0) {\n                        const result = iterator.next();\n                        left.push(result);\n                        right.push(result);\n                    }\n                    return queue.shift();\n                }\n            };\n        };\n        return [\n            new Stream(()=>teeIterator(left), this.controller),\n            new Stream(()=>teeIterator(right), this.controller)\n        ];\n    }\n    /**\n     * Converts this stream to a newline-separated ReadableStream of\n     * JSON stringified values in the stream\n     * which can be turned back into a Stream with `Stream.fromReadableStream()`.\n     */ toReadableStream() {\n        const self = this;\n        let iter;\n        const encoder = new TextEncoder();\n        return new _shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.ReadableStream({\n            async start () {\n                iter = self[Symbol.asyncIterator]();\n            },\n            async pull (ctrl) {\n                try {\n                    const { value, done } = await iter.next();\n                    if (done) return ctrl.close();\n                    const bytes = encoder.encode(JSON.stringify(value) + \"\\n\");\n                    ctrl.enqueue(bytes);\n                } catch (err) {\n                    ctrl.error(err);\n                }\n            },\n            async cancel () {\n                await iter.return?.();\n            }\n        });\n    }\n}\nclass SSEDecoder {\n    constructor(){\n        this.event = null;\n        this.data = [];\n        this.chunks = [];\n    }\n    decode(line) {\n        if (line.endsWith(\"\\r\")) {\n            line = line.substring(0, line.length - 1);\n        }\n        if (!line) {\n            // empty line and we didn't previously encounter any messages\n            if (!this.event && !this.data.length) return null;\n            const sse = {\n                event: this.event,\n                data: this.data.join(\"\\n\"),\n                raw: this.chunks\n            };\n            this.event = null;\n            this.data = [];\n            this.chunks = [];\n            return sse;\n        }\n        this.chunks.push(line);\n        if (line.startsWith(\":\")) {\n            return null;\n        }\n        let [fieldname, _, value] = partition(line, \":\");\n        if (value.startsWith(\" \")) {\n            value = value.substring(1);\n        }\n        if (fieldname === \"event\") {\n            this.event = value;\n        } else if (fieldname === \"data\") {\n            this.data.push(value);\n        }\n        return null;\n    }\n}\n/**\n * A re-implementation of httpx's `LineDecoder` in Python that handles incrementally\n * reading lines from text.\n *\n * https://github.com/encode/httpx/blob/920333ea98118e9cf617f246905d7b202510941c/httpx/_decoders.py#L258\n */ class LineDecoder {\n    constructor(){\n        this.buffer = [];\n        this.trailingCR = false;\n    }\n    decode(chunk) {\n        let text = this.decodeText(chunk);\n        if (this.trailingCR) {\n            text = \"\\r\" + text;\n            this.trailingCR = false;\n        }\n        if (text.endsWith(\"\\r\")) {\n            this.trailingCR = true;\n            text = text.slice(0, -1);\n        }\n        if (!text) {\n            return [];\n        }\n        const trailingNewline = LineDecoder.NEWLINE_CHARS.has(text[text.length - 1] || \"\");\n        let lines = text.split(LineDecoder.NEWLINE_REGEXP);\n        if (lines.length === 1 && !trailingNewline) {\n            this.buffer.push(lines[0]);\n            return [];\n        }\n        if (this.buffer.length > 0) {\n            lines = [\n                this.buffer.join(\"\") + lines[0],\n                ...lines.slice(1)\n            ];\n            this.buffer = [];\n        }\n        if (!trailingNewline) {\n            this.buffer = [\n                lines.pop() || \"\"\n            ];\n        }\n        return lines;\n    }\n    decodeText(bytes) {\n        if (bytes == null) return \"\";\n        if (typeof bytes === \"string\") return bytes;\n        // Node:\n        if (typeof Buffer !== \"undefined\") {\n            if (bytes instanceof Buffer) {\n                return bytes.toString();\n            }\n            if (bytes instanceof Uint8Array) {\n                return Buffer.from(bytes).toString();\n            }\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`Unexpected: received non-Uint8Array (${bytes.constructor.name}) stream chunk in an environment with a global \"Buffer\" defined, which this library assumes to be Node. Please report this error.`);\n        }\n        // Browser\n        if (typeof TextDecoder !== \"undefined\") {\n            if (bytes instanceof Uint8Array || bytes instanceof ArrayBuffer) {\n                this.textDecoder ?? (this.textDecoder = new TextDecoder(\"utf8\"));\n                return this.textDecoder.decode(bytes);\n            }\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`Unexpected: received non-Uint8Array/ArrayBuffer (${bytes.constructor.name}) in a web platform. Please report this error.`);\n        }\n        throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`Unexpected: neither Buffer nor TextDecoder are available as globals. Please report this error.`);\n    }\n    flush() {\n        if (!this.buffer.length && !this.trailingCR) {\n            return [];\n        }\n        const lines = [\n            this.buffer.join(\"\")\n        ];\n        this.buffer = [];\n        this.trailingCR = false;\n        return lines;\n    }\n}\n// prettier-ignore\nLineDecoder.NEWLINE_CHARS = new Set([\n    \"\\n\",\n    \"\\r\",\n    \"\\v\",\n    \"\\f\",\n    \"\\x1c\",\n    \"\\x1d\",\n    \"\\x1e\",\n    \"\\x85\",\n    \"\\u2028\",\n    \"\\u2029\"\n]);\nLineDecoder.NEWLINE_REGEXP = /\\r\\n|[\\n\\r\\x0b\\x0c\\x1c\\x1d\\x1e\\x85\\u2028\\u2029]/g;\nfunction partition(str, delimiter) {\n    const index = str.indexOf(delimiter);\n    if (index !== -1) {\n        return [\n            str.substring(0, index),\n            delimiter,\n            str.substring(index + delimiter.length)\n        ];\n    }\n    return [\n        str,\n        \"\",\n        \"\"\n    ];\n}\n/**\n * Most browsers don't yet have async iterable support for ReadableStream,\n * and Node has a very different way of reading bytes from its \"ReadableStream\".\n *\n * This polyfill was pulled from https://github.com/MattiasBuelens/web-streams-polyfill/pull/122#issuecomment-1627354490\n */ function readableStreamAsyncIterable(stream) {\n    if (stream[Symbol.asyncIterator]) return stream;\n    const reader = stream.getReader();\n    return {\n        async next () {\n            try {\n                const result = await reader.read();\n                if (result?.done) reader.releaseLock(); // release lock when stream becomes closed\n                return result;\n            } catch (e) {\n                reader.releaseLock(); // release lock when stream becomes errored\n                throw e;\n            }\n        },\n        async return () {\n            const cancelPromise = reader.cancel();\n            reader.releaseLock();\n            await cancelPromise;\n            return {\n                done: true,\n                value: undefined\n            };\n        },\n        [Symbol.asyncIterator] () {\n            return this;\n        }\n    };\n} //# sourceMappingURL=streaming.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openai/streaming.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/openai/uploads.mjs":
/*!*****************************************!*\
  !*** ./node_modules/openai/uploads.mjs ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createForm: () => (/* binding */ createForm),\n/* harmony export */   fileFromPath: () => (/* reexport safe */ _shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.fileFromPath),\n/* harmony export */   isBlobLike: () => (/* binding */ isBlobLike),\n/* harmony export */   isFileLike: () => (/* binding */ isFileLike),\n/* harmony export */   isMultipartBody: () => (/* binding */ isMultipartBody),\n/* harmony export */   isResponseLike: () => (/* binding */ isResponseLike),\n/* harmony export */   isUploadable: () => (/* binding */ isUploadable),\n/* harmony export */   maybeMultipartFormRequestOptions: () => (/* binding */ maybeMultipartFormRequestOptions),\n/* harmony export */   multipartFormRequestOptions: () => (/* binding */ multipartFormRequestOptions),\n/* harmony export */   toFile: () => (/* binding */ toFile)\n/* harmony export */ });\n/* harmony import */ var _shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_shims/index.mjs */ \"(ssr)/./node_modules/openai/_shims/index.mjs\");\n\n\nconst isResponseLike = (value)=>value != null && typeof value === \"object\" && typeof value.url === \"string\" && typeof value.blob === \"function\";\nconst isFileLike = (value)=>value != null && typeof value === \"object\" && typeof value.name === \"string\" && typeof value.lastModified === \"number\" && isBlobLike(value);\n/**\n * The BlobLike type omits arrayBuffer() because @types/node-fetch@^2.6.4 lacks it; but this check\n * adds the arrayBuffer() method type because it is available and used at runtime\n */ const isBlobLike = (value)=>value != null && typeof value === \"object\" && typeof value.size === \"number\" && typeof value.type === \"string\" && typeof value.text === \"function\" && typeof value.slice === \"function\" && typeof value.arrayBuffer === \"function\";\nconst isUploadable = (value)=>{\n    return isFileLike(value) || isResponseLike(value) || (0,_shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.isFsReadStream)(value);\n};\n/**\n * Helper for creating a {@link File} to pass to an SDK upload method from a variety of different data formats\n * @param value the raw content of the file.  Can be an {@link Uploadable}, {@link BlobLikePart}, or {@link AsyncIterable} of {@link BlobLikePart}s\n * @param {string=} name the name of the file. If omitted, toFile will try to determine a file name from bits if possible\n * @param {Object=} options additional properties\n * @param {string=} options.type the MIME type of the content\n * @param {number=} options.lastModified the last modified timestamp\n * @returns a {@link File} with the given properties\n */ async function toFile(value, name, options = {}) {\n    // If it's a promise, resolve it.\n    value = await value;\n    if (isResponseLike(value)) {\n        const blob = await value.blob();\n        name || (name = new URL(value.url).pathname.split(/[\\\\/]/).pop() ?? \"unknown_file\");\n        return new _shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.File([\n            blob\n        ], name, options);\n    }\n    const bits = await getBytes(value);\n    name || (name = getName(value) ?? \"unknown_file\");\n    if (!options.type) {\n        const type = bits[0]?.type;\n        if (typeof type === \"string\") {\n            options = {\n                ...options,\n                type\n            };\n        }\n    }\n    return new _shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.File(bits, name, options);\n}\nasync function getBytes(value) {\n    let parts = [];\n    if (typeof value === \"string\" || ArrayBuffer.isView(value) || // includes Uint8Array, Buffer, etc.\n    value instanceof ArrayBuffer) {\n        parts.push(value);\n    } else if (isBlobLike(value)) {\n        parts.push(await value.arrayBuffer());\n    } else if (isAsyncIterableIterator(value) // includes Readable, ReadableStream, etc.\n    ) {\n        for await (const chunk of value){\n            parts.push(chunk); // TODO, consider validating?\n        }\n    } else {\n        throw new Error(`Unexpected data type: ${typeof value}; constructor: ${value?.constructor?.name}; props: ${propsForError(value)}`);\n    }\n    return parts;\n}\nfunction propsForError(value) {\n    const props = Object.getOwnPropertyNames(value);\n    return `[${props.map((p)=>`\"${p}\"`).join(\", \")}]`;\n}\nfunction getName(value) {\n    return getStringFromMaybeBuffer(value.name) || getStringFromMaybeBuffer(value.filename) || // For fs.ReadStream\n    getStringFromMaybeBuffer(value.path)?.split(/[\\\\/]/).pop();\n}\nconst getStringFromMaybeBuffer = (x)=>{\n    if (typeof x === \"string\") return x;\n    if (typeof Buffer !== \"undefined\" && x instanceof Buffer) return String(x);\n    return undefined;\n};\nconst isAsyncIterableIterator = (value)=>value != null && typeof value === \"object\" && typeof value[Symbol.asyncIterator] === \"function\";\nconst isMultipartBody = (body)=>body && typeof body === \"object\" && body.body && body[Symbol.toStringTag] === \"MultipartBody\";\n/**\n * Returns a multipart/form-data request if any part of the given request body contains a File / Blob value.\n * Otherwise returns the request as is.\n */ const maybeMultipartFormRequestOptions = async (opts)=>{\n    if (!hasUploadableValue(opts.body)) return opts;\n    const form = await createForm(opts.body);\n    return (0,_shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.getMultipartRequestOptions)(form, opts);\n};\nconst multipartFormRequestOptions = async (opts)=>{\n    const form = await createForm(opts.body);\n    return (0,_shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.getMultipartRequestOptions)(form, opts);\n};\nconst createForm = async (body)=>{\n    const form = new _shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.FormData();\n    await Promise.all(Object.entries(body || {}).map(([key, value])=>addFormValue(form, key, value)));\n    return form;\n};\nconst hasUploadableValue = (value)=>{\n    if (isUploadable(value)) return true;\n    if (Array.isArray(value)) return value.some(hasUploadableValue);\n    if (value && typeof value === \"object\") {\n        for(const k in value){\n            if (hasUploadableValue(value[k])) return true;\n        }\n    }\n    return false;\n};\nconst addFormValue = async (form, key, value)=>{\n    if (value === undefined) return;\n    if (value == null) {\n        throw new TypeError(`Received null for \"${key}\"; to pass null in FormData, you must use the string 'null'`);\n    }\n    // TODO: make nested formats configurable\n    if (typeof value === \"string\" || typeof value === \"number\" || typeof value === \"boolean\") {\n        form.append(key, String(value));\n    } else if (isUploadable(value)) {\n        const file = await toFile(value);\n        form.append(key, file);\n    } else if (Array.isArray(value)) {\n        await Promise.all(value.map((entry)=>addFormValue(form, key + \"[]\", entry)));\n    } else if (typeof value === \"object\") {\n        await Promise.all(Object.entries(value).map(([name, prop])=>addFormValue(form, `${key}[${name}]`, prop)));\n    } else {\n        throw new TypeError(`Invalid value given to form, expected a string, number, boolean, object, Array, File or Blob but got ${value} instead`);\n    }\n}; //# sourceMappingURL=uploads.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openai/uploads.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/openai/version.mjs":
/*!*****************************************!*\
  !*** ./node_modules/openai/version.mjs ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VERSION: () => (/* binding */ VERSION)\n/* harmony export */ });\nconst VERSION = \"4.26.0\"; // x-release-please-version\n //# sourceMappingURL=version.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3ZlcnNpb24ubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxNQUFNQSxVQUFVLFNBQVMsQ0FBQywyQkFBMkI7Q0FDNUQsb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktYXBwLy4vbm9kZV9tb2R1bGVzL29wZW5haS92ZXJzaW9uLm1qcz9kYzJmIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBWRVJTSU9OID0gJzQuMjYuMCc7IC8vIHgtcmVsZWFzZS1wbGVhc2UtdmVyc2lvblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmVyc2lvbi5tanMubWFwIl0sIm5hbWVzIjpbIlZFUlNJT04iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openai/version.mjs\n");

/***/ })

};
;