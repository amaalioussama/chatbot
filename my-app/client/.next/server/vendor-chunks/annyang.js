"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/annyang";
exports.ids = ["vendor-chunks/annyang"];
exports.modules = {

/***/ "(ssr)/./node_modules/annyang/dist/annyang.min.js":
/*!**************************************************!*\
  !*** ./node_modules/annyang/dist/annyang.min.js ***!
  \**************************************************/
/***/ ((module, exports) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\nvar _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(e) {\n    return typeof e;\n} : function(e) {\n    return e && \"function\" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? \"symbol\" : typeof e;\n};\n//! annyang\n//! version : 2.6.1\n//! author  : Tal Ater @TalAter\n//! license : MIT\n//! https://www.TalAter.com/annyang/\n//! annyang\n//! version : 2.6.1\n//! author  : Tal Ater @TalAter\n//! license : MIT\n//! https://www.TalAter.com/annyang/\n!function(e, n) {\n     true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n        return e.annyang = n(e);\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;\n}( false ? 0 : void 0, function(r, i) {\n    var t, o = r.SpeechRecognition || r.webkitSpeechRecognition || r.mozSpeechRecognition || r.msSpeechRecognition || r.oSpeechRecognition;\n    if (!o) return null;\n    var a, c, s = [], u = {\n        start: [],\n        error: [],\n        end: [],\n        soundstart: [],\n        result: [],\n        resultMatch: [],\n        resultNoMatch: [],\n        errorNetwork: [],\n        errorPermissionBlocked: [],\n        errorPermissionDenied: []\n    }, f = 0, l = 0, d = !1, p = \"font-weight: bold; color: #00f;\", g = !1, m = !1, h = /\\s*\\((.*?)\\)\\s*/g, y = /(\\(\\?:[^)]+\\))\\?/g, b = /(\\(\\?)?:\\w+/g, v = /\\*\\w+/g, w = /[\\-{}\\[\\]+?.,\\\\\\^$|#]/g, S = function(e) {\n        for(var n = arguments.length, t = Array(1 < n ? n - 1 : 0), o = 1; o < n; o++)t[o - 1] = arguments[o];\n        e.forEach(function(e) {\n            e.callback.apply(e.context, t);\n        });\n    }, e = function() {\n        return a !== i;\n    }, k = function(e, n) {\n        -1 !== e.indexOf(\"%c\") || n ? console.log(e, n || p) : console.log(e);\n    }, x = function() {\n        e() || t.init({}, !1);\n    }, R = function(e, n, t) {\n        s.push({\n            command: e,\n            callback: n,\n            originalPhrase: t\n        }), d && k(\"Command successfully loaded: %c\" + t, p);\n    }, P = function(e) {\n        var n;\n        S(u.result, e);\n        for(var t = 0; t < e.length; t++){\n            n = e[t].trim(), d && k(\"Speech recognized: %c\" + n, p);\n            for(var o = 0, r = s.length; o < r; o++){\n                var i = s[o], a = i.command.exec(n);\n                if (a) {\n                    var c = a.slice(1);\n                    return d && (k(\"command matched: %c\" + i.originalPhrase, p), c.length && k(\"with parameters\", c)), i.callback.apply(this, c), void S(u.resultMatch, n, i.originalPhrase, e);\n                }\n            }\n        }\n        S(u.resultNoMatch, e);\n    };\n    return t = {\n        init: function(e) {\n            var n = !(1 < arguments.length && arguments[1] !== i) || arguments[1];\n            a && a.abort && a.abort(), (a = new o).maxAlternatives = 5, a.continuous = \"http:\" === r.location.protocol, a.lang = \"en-US\", a.onstart = function() {\n                m = !0, S(u.start);\n            }, a.onsoundstart = function() {\n                S(u.soundstart);\n            }, a.onerror = function(e) {\n                switch(S(u.error, e), e.error){\n                    case \"network\":\n                        S(u.errorNetwork, e);\n                        break;\n                    case \"not-allowed\":\n                    case \"service-not-allowed\":\n                        c = !1, (new Date).getTime() - f < 200 ? S(u.errorPermissionBlocked, e) : S(u.errorPermissionDenied, e);\n                }\n            }, a.onend = function() {\n                if (m = !1, S(u.end), c) {\n                    var e = (new Date).getTime() - f;\n                    (l += 1) % 10 == 0 && d && k(\"Speech Recognition is repeatedly stopping and starting. See http://is.gd/annyang_restarts for tips.\"), e < 1e3 ? setTimeout(function() {\n                        t.start({\n                            paused: g\n                        });\n                    }, 1e3 - e) : t.start({\n                        paused: g\n                    });\n                }\n            }, a.onresult = function(e) {\n                if (g) return d && k(\"Speech heard, but annyang is paused\"), !1;\n                for(var n = e.results[e.resultIndex], t = [], o = 0; o < n.length; o++)t[o] = n[o].transcript;\n                P(t);\n            }, n && (s = []), e.length && this.addCommands(e);\n        },\n        start: function(e) {\n            x(), g = (e = e || {}).paused !== i && !!e.paused, c = e.autoRestart === i || !!e.autoRestart, e.continuous !== i && (a.continuous = !!e.continuous), f = (new Date).getTime();\n            try {\n                a.start();\n            } catch (e) {\n                d && k(e.message);\n            }\n        },\n        abort: function() {\n            c = !1, l = 0, e() && a.abort();\n        },\n        pause: function() {\n            g = !0;\n        },\n        resume: function() {\n            t.start();\n        },\n        debug: function() {\n            var e = !(0 < arguments.length && arguments[0] !== i) || arguments[0];\n            d = !!e;\n        },\n        setLanguage: function(e) {\n            x(), a.lang = e;\n        },\n        addCommands: function(e) {\n            var n, t;\n            for(var o in x(), e)if (e.hasOwnProperty(o)) if (\"function\" == typeof (n = r[e[o]] || e[o])) R((t = (t = o).replace(w, \"\\\\$&\").replace(h, \"(?:$1)?\").replace(b, function(e, n) {\n                return n ? e : \"([^\\\\s]+)\";\n            }).replace(v, \"(.*?)\").replace(y, \"\\\\s*$1?\\\\s*\"), new RegExp(\"^\" + t + \"$\", \"i\")), n, o);\n            else {\n                if (!(\"object\" === (void 0 === n ? \"undefined\" : _typeof(n)) && n.regexp instanceof RegExp)) {\n                    d && k(\"Can not register command: %c\" + o, p);\n                    continue;\n                }\n                R(new RegExp(n.regexp.source, \"i\"), n.callback, o);\n            }\n        },\n        removeCommands: function(t) {\n            t === i ? s = [] : (t = Array.isArray(t) ? t : [\n                t\n            ], s = s.filter(function(e) {\n                for(var n = 0; n < t.length; n++)if (t[n] === e.originalPhrase) return !1;\n                return !0;\n            }));\n        },\n        addCallback: function(e, n, t) {\n            var o = r[n] || n;\n            \"function\" == typeof o && u[e] !== i && u[e].push({\n                callback: o,\n                context: t || this\n            });\n        },\n        removeCallback: function(e, n) {\n            var t = function(e) {\n                return e.callback !== n;\n            };\n            for(var o in u)u.hasOwnProperty(o) && (e !== i && e !== o || (u[o] = n === i ? [] : u[o].filter(t)));\n        },\n        isListening: function() {\n            return m && !g;\n        },\n        getSpeechRecognizer: function() {\n            return a;\n        },\n        trigger: function(e) {\n            t.isListening() ? (Array.isArray(e) || (e = [\n                e\n            ]), P(e)) : d && k(m ? \"Speech heard, but annyang is paused\" : \"Cannot trigger while annyang is aborted\");\n        }\n    };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/annyang/dist/annyang.min.js\n");

/***/ })

};
;